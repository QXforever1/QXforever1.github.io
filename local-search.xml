<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>安卓逆向</title>
    <link href="/2023/07/11/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/"/>
    <url>/2023/07/11/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h1 id="安卓逆向"><a href="#安卓逆向" class="headerlink" title="安卓逆向"></a>安卓逆向</h1><h2 id="安卓学习过程"><a href="#安卓学习过程" class="headerlink" title="安卓学习过程"></a>安卓学习过程</h2><p>java动态调试-so文件调试-Java层hook-so文件hook-web渗透</p><h2 id="APK-文件结构"><a href="#APK-文件结构" class="headerlink" title="APK 文件结构"></a>APK 文件结构</h2><p>apk全程Android Package，相当于一个压缩文件，只要在电脑上将apk后缀改为rar或者zip即可解压</p><h3 id="assets目录-（不一定有，但比较常见）"><a href="#assets目录-（不一定有，但比较常见）" class="headerlink" title="assets目录 （不一定有，但比较常见）"></a>assets目录 （不一定有，但比较常见）</h3><p>存放APK的静态资源文件，比如视频、音频、图片等</p><p>静态资源文件主要指存放在assets 文件夹中的文件。assets 文件夹是一种未经编译的资源目录，它会被打包进 APK 文件中，在安装应用程序之后可以被访问。assets 文件夹中的文件不会被解压缩，这意味着它们的访问速度会比较快，但是会占用更多的安装包空间。通常情况下，开发者会将应用程序中的静态文件、配置文件、原始数据或者其他不常改变的文件放在 assets 文件夹中。这样可以使得应用程序的下载包大小变小，并且可以更快速地访问这些文件。</p><h3 id="lib目录（不一定有，但比较常见）"><a href="#lib目录（不一定有，但比较常见）" class="headerlink" title="lib目录（不一定有，但比较常见）"></a>lib目录（不一定有，但比较常见）</h3><p>armeabi-v7a基本通用所有的安卓设备，arm64-v8a只适用于64位的安卓设备，x86常见于安卓模拟器，其目录下的.so文件时c或者c++编译的动态链接库文件</p><p>库文件主要指lib文件夹中的文件，在这个文件夹中，存放了运行APP所需要的so文件，也就是动态链接库的二进制文件。为了适配不同安卓系统处理器的版本，lib文件夹中的so库也是按不同处理器版本的文件夹分类放置。在图3的示例中，分成了三种文件夹包括armeabi、armeabi-v7a和x86文件夹，分别用来存储适配arm5架构、arm7架构、Intel32架构的CPU处理器版本的安卓系统。例如，如果智能手机使用的是arm7架构CPU处理器版本的安卓系统，APP在运行时就会调用armeabi-v7a文件夹下的动态链接库文件执行程序。</p><p>在安卓系统中库文件分文两种，一种是共享库文件（Shared Libraries），另一种是本地库文件（Native Libraries）。共享库文件是可供多个应用程序使用的库，它们被存放在系统目录中。在 Android 系统中，共享库文件以 .so 为后缀，常见的共享库文件包括 libc.so 和 libm.so。</p><p>而lib文件夹存放的就是本地库文件。本地库是专门为应用程序所使用的库，它们被打包进 APK 文件中，在安装应用程序之后会被放到私有目录中。在 Android 系统中，本地库文件也以 .so 为后缀，armeabi-v7a的so文件示例见图4。对于一个 Android 应用程序来说，本地库文件往往是应用程序所特有的，并且不会被其他应用程序使用。例如，一个应用程序可能使用本地库文件来封装特定的硬件访问功能，或者使用本地库文件来进行加密解密操作。</p><h3 id="META-INF目录"><a href="#META-INF目录" class="headerlink" title="META-INF目录"></a>META-INF目录</h3><p>保存应用的签名信息，签名信息可以验证APK文件的完整性，相当于APK的身份证（验证文件是否又被修改）</p><p>签名文件指的是存放在META-INF文件夹中的文件。META-INF 文件夹是 Android 系统中的一种特殊文件夹，它用来存放应用程序的签名信息。在 META-INF 文件夹中可以找到三种常见的文件：CERT.RSA、CERT.SF和MANIFEST.MF，META-INF文件夹示例见图5。CERT.RSA、CERT.SF这两个文件用来存放应用程序的签名信息。当安装一个应用程序时，Android 系统会检查这两个文件，确保应用程序的完整性和安全性。MANIFEST.MF文件用来存放应用程序的所有文件的清单信息。</p><p>当打包应用程序时，这些文件会自动生成，并且会被打包进 APK 文件中。通常情况下，不需要手动修改这些文件，但是有时候可能需要编辑这些文件来更新应用程序的版本号或者修改权限要求。</p><p>META-INF文件夹，用于存放签名证书，在APK安装时作为校验的凭据，用于保护APK不被恶意篡改，同时也是对APK著作权和所有权的声名。例如，对安装包的任意文件最作修改，导致安卓系统检查计算后的签名信息与APK文件中存储的签名信息不一致，最终无法安装，会出现签名冲突的问题。</p><h3 id="res目录"><a href="#res目录" class="headerlink" title="res目录"></a>res目录</h3><p>res目录存放资源文件，包括图片，字符串等等，APK的脸蛋由他的layout文件设计</p><h3 id="res目录与asstes目录的区别"><a href="#res目录与asstes目录的区别" class="headerlink" title="res目录与asstes目录的区别"></a>res目录与asstes目录的区别</h3><ol><li>assets目录不会在R.java文件下生成相应标记，存放到R.java中的资源在运行打包时都会打入程序安装包中</li><li>res目录会在R.java文件下生成相应的标记。</li></ol><p>在res文件夹下还可以定义一下目录：</p><p>res&#x2F;anim:这里存放的是动画资源</p><p>res&#x2F;xml:可以在Activity中使用getResource().getXML()读取这里的资源文件</p><p>res&#x2F;raw:该目录下的文件可以直接复制到设备上，编译软件时，这里的数据不需要编译，直接加入到程序安装包中，使用的方法是getResource().OpenRawResources(ID),其中参数ID的形式是R.raw.XXX、</p><h3 id="res-x2F-raw和assets的相同点"><a href="#res-x2F-raw和assets的相同点" class="headerlink" title="res&#x2F;raw和assets的相同点"></a>res&#x2F;raw和assets的相同点</h3><p>两者目录下的文件在打包后会原封不动的保存在apk包中，不会被编译成二进制</p><h3 id="res-x2F-raw和assets的不同点"><a href="#res-x2F-raw和assets的不同点" class="headerlink" title="res&#x2F;raw和assets的不同点"></a>res&#x2F;raw和assets的不同点</h3><p>1.res&#x2F;raw中的文件会被映射到R.java文件中，访问的时候直接使用资源ID即R.id.filename;assets文件下的文件不会被映射到R.java中，访问的时候需要AssetManger类。</p><p>2.res&#x2F;raw不可以有目录结构，而assets则可以有目录结构，也就是assets目录下可以再建立文件夹</p><h4 id="读取文件资源："><a href="#读取文件资源：" class="headerlink" title="读取文件资源："></a>读取文件资源：</h4><p> 1.读取res&#x2F;raw下的文件资源，通过以下方式获取输入流来进行写操作<br> · InputStream is &#x3D;getResources().openRawResource(R.id.filename);<br> 2.读取assets下的文件资源，通过以下方式获取输入流来进行写操作<br> · AssetManager am &#x3D; null;<br> · am &#x3D; getAssets();<br> · InputStream is &#x3D; am.open(“filename”);</p><h3 id="AndroidMainfest-xml-文件"><a href="#AndroidMainfest-xml-文件" class="headerlink" title="AndroidMainfest.xml 文件"></a>AndroidMainfest.xml 文件</h3><p>APK的应用清单信息，它描述了应用的名字，版本，权限，引用的库文件等等信息</p><p>xml文件中存放着应用的Activity信息</p><h3 id="classes-dex文件"><a href="#classes-dex文件" class="headerlink" title="classes.dex文件"></a>classes.dex文件</h3><p>classes.dex是java源码编译后生成的java字节码文件，APK运行的主要逻辑，是apk文件的核心代码文件</p><p>核心代码文件主要指classes.dex文件。classes.dex文件是 Android 系统中的重要代码文件，它是 Dalvik 可执行文件的缩写。Dalvik 是 Android 系统中的一种虚拟机，它负责在 Android 系统中运行应用程序的代码。classes.dex文件运行在Dalvik虚拟机上的核心代码文件，它反编译后的语言是smali代码语言，smali代码可转换为java代码。对于大的APK文件会出现多个dex文件，但在APP实际运行的过程中会将多个dex文件合并成一个dex文件运行。APK打包时存放多个dex的原因是每个dex文件的大小是有限制的。</p><p>.dex 文件中存放的是 Java 字节码，这是 Java 编译器编译出来的机器码。.dex 文件本身是一种二进制文件，它使用一种特殊的格式来存放字节码。</p><p>在打包 Android 应用程序时，.dex 文件会自动生成，并且会被打包进 APK 文件中。当你安装应用程序时，.dex 文件会被解压缩并放到私有目录中，然后被 Dalvik 虚拟机加载并运行。</p><p>.dex 文件的好处是，它可以使得应用程序的下载包大小变小，因为 Java 字节码文件可以被压缩得比较小。但是，.dex 文件的缺点是，它的访问速度略慢于共享库文件。因此，在 Android 系统中，一般情况下会尽量使用共享库文件来实现应用程序的功能。</p><h3 id="resources-arsc文件"><a href="#resources-arsc文件" class="headerlink" title="resources.arsc文件"></a>resources.arsc文件</h3><p>resources.arsc是编译后的二进制资源文件，它是一个映射表，映射着资源和id，通过R文件中的id就可以找到对应的资源</p><p>AndroidManifest.xml文件是整个应用程序的信息描述文件，定义了应用程序中包含的Activity,Service,Content provider和BroadcastReceiver组件信息。每个应用程序在根目录下必须包含一个AndroidManifest.xml文件，且文件名不能修改。它描述了package中暴露的组件，他们各自的实现类，各种能被处理的数据和启动位置。</p><table><thead><tr><th>versionCode</th><th>版本号，主要用来更新，例如:12</th></tr></thead><tbody><tr><td>versionName</td><td>版本名，给用户看的，例如:1.2</td></tr><tr><td>package</td><td>包名，例如：com.zj.52pj.demo</td></tr><tr><td>uses-permission android:name&#x3D;””</td><td>应用权限，例如：android.permission.INTERNET 代表网络权限</td></tr><tr><td>android:label&#x3D;”@string&#x2F;app_name”</td><td>应用名称</td></tr><tr><td>android:icon&#x3D;”@mipmap&#x2F;ic_launcher”</td><td>应用图标路径</td></tr><tr><td>android:debuggable&#x3D;”true”</td><td>应用是否开启debug权限</td></tr></tbody></table><h2 id="双开原理"><a href="#双开原理" class="headerlink" title="双开原理"></a>双开原理</h2><h3 id="修改包名"><a href="#修改包名" class="headerlink" title="修改包名"></a>修改包名</h3><p>让手机系统认为这是2个APP，这样的话就能生成2个数据储存路径，此时的多开就等于打开了两个互不干扰的APP</p><h3 id="修改Framework"><a href="#修改Framework" class="headerlink" title="修改Framework"></a>修改Framework</h3><p>对于有系统权限的厂商，可以修改 Framework来实现双开的目的，例如：小米自带多开</p><h3 id="通过虚拟化技术实现"><a href="#通过虚拟化技术实现" class="headerlink" title="通过虚拟化技术实现"></a>通过虚拟化技术实现</h3><p>虚拟Framework层、虚拟文件系统、模拟Android对组件的管理、虚拟应用进程等一整套虚拟技术，将APK复制一份到虚拟空间中运行。例如：平行空间</p><h3 id="以插件机制运行"><a href="#以插件机制运行" class="headerlink" title="以插件机制运行"></a>以插件机制运行</h3><p>利用反射替换，动态代理，hook了系统的大部分与system-server进程通讯的函数，以此作为“欺上瞒下”的目的，欺骗系统“以为”只要一个apk在运行，瞒过插件让其“认为”自己已经安装。例如：VirtualAPP</p><h2 id="JVM、Dalvik、ART"><a href="#JVM、Dalvik、ART" class="headerlink" title="JVM、Dalvik、ART"></a>JVM、Dalvik、ART</h2><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p>jvm是java虚拟机，运行java字节码程序</p><h3 id="Dalvik"><a href="#Dalvik" class="headerlink" title="Dalvik"></a>Dalvik</h3><p>Dalvik是Google专门为Android设计的一个虚拟机，Dalvik有专属的文件执行格式dex（Dalvik executable）</p><h3 id="ART"><a href="#ART" class="headerlink" title="ART"></a>ART</h3><p>ART（AndroidRuntime）相当于Dalvik的升级版，本质相同</p><h2 id="smali及其语法"><a href="#smali及其语法" class="headerlink" title="smali及其语法"></a>smali及其语法</h2><p>smali是Dalvik的寄存器语言，smali代码是dex反编译而来的。</p><p>关键字</p><table><thead><tr><th align="left">名称</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left">.class</td><td align="left">类名</td></tr><tr><td align="left">.super</td><td align="left">父类名，继承的上级类名名称</td></tr><tr><td align="left">.source</td><td align="left">源名</td></tr><tr><td align="left">.field</td><td align="left">变量</td></tr><tr><td align="left">.method</td><td align="left">方法名</td></tr><tr><td align="left">.register</td><td align="left">寄存器</td></tr><tr><td align="left">.end method</td><td align="left">方法名的结束</td></tr><tr><td align="left">public</td><td align="left">公有</td></tr><tr><td align="left">protected</td><td align="left">半公开，只有同一家人才能用</td></tr><tr><td align="left">private</td><td align="left">私有，只能自己使用</td></tr><tr><td align="left">.parameter</td><td align="left">方法参数</td></tr><tr><td align="left">.prologue</td><td align="left">方法开始</td></tr><tr><td align="left">.line xxx</td><td align="left">位于第xxx行</td></tr></tbody></table><p>数据类型对应</p><table><thead><tr><th align="left">smali类型</th><th align="left">java类型</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left">V</td><td align="left">void</td><td align="left">无返回值</td></tr><tr><td align="left">Z</td><td align="left">boolean</td><td align="left">布尔值类型，返回0或1</td></tr><tr><td align="left">B</td><td align="left">byte</td><td align="left">字节类型，返回字节</td></tr><tr><td align="left">S</td><td align="left">short</td><td align="left">短整数类型，返回数字</td></tr><tr><td align="left">C</td><td align="left">char</td><td align="left">字符类型，返回字符</td></tr><tr><td align="left">I</td><td align="left">int</td><td align="left">整数类型，返回数字</td></tr><tr><td align="left">J</td><td align="left">long （64位 需要2个寄存器存储）</td><td align="left">长整数类型，返回数字</td></tr><tr><td align="left">F</td><td align="left">float</td><td align="left">单浮点类型，返回数字</td></tr><tr><td align="left">D</td><td align="left">double （64位 需要2个寄存器存储）</td><td align="left">双浮点类型，返回数字</td></tr><tr><td align="left">string</td><td align="left">String</td><td align="left">文本类型，返回字符串</td></tr><tr><td align="left">Lxxx&#x2F;xxx&#x2F;xxx</td><td align="left">object</td><td align="left">对象类型，返回对象</td></tr></tbody></table><p>常用指令</p><table><thead><tr><th align="left">关键字</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left">const</td><td align="left">重写整数属性，真假属性内容，只能是数字类型</td></tr><tr><td align="left">const-string</td><td align="left">重写字符串内容</td></tr><tr><td align="left">const-wide</td><td align="left">重写长整数类型，多用于修改到期时间。</td></tr><tr><td align="left">return</td><td align="left">返回指令</td></tr><tr><td align="left">if-eq</td><td align="left">全称equal(a&#x3D;b)，比较寄存器ab内容，相同则跳</td></tr><tr><td align="left">if-ne</td><td align="left">全称not equal(a!&#x3D;b)，ab内容不相同则跳</td></tr><tr><td align="left">if-eqz</td><td align="left">全称equal zero(a&#x3D;0)，z即是0的标记，a等于0则跳</td></tr><tr><td align="left">if-nez</td><td align="left">全称not equal zero(a!&#x3D;0)，a不等于0则跳</td></tr><tr><td align="left">if-ge</td><td align="left">全称greater equal(a&gt;&#x3D;b)，a大于或等于则跳</td></tr><tr><td align="left">if-le</td><td align="left">全称little equal(a&lt;&#x3D;b)，a小于或等于则跳</td></tr><tr><td align="left">goto</td><td align="left">强制跳到指定位置</td></tr><tr><td align="left">switch</td><td align="left">分支跳转，一般会有多个分支线，并根据指令跳转到适当位置</td></tr><tr><td align="left">iget</td><td align="left">获取寄存器数据</td></tr></tbody></table><p>其余指令可用语法工具查询</p><h2 id="安卓四大组件"><a href="#安卓四大组件" class="headerlink" title="安卓四大组件"></a>安卓四大组件</h2><h3 id="Activity（活动）"><a href="#Activity（活动）" class="headerlink" title="Activity（活动）"></a>Activity（活动）</h3><p>在应用中的一个Activity可以用来表示一个界面，意思可以理解为“活动”，即一个活动开始，代表Activity组件启动，活动结束，代表一个Activity的生命周结束，一个Android应用必须通过Activity来运行和启动，Activity的生命周期交给系统统一管理。</p><h3 id="Service（服务）"><a href="#Service（服务）" class="headerlink" title="Service（服务）"></a>Service（服务）</h3><p>Service可以在后台执行长时间运行操作而没有用户界面的应用组件，不依赖任何用户界面，例如后台播放音乐，后台下载文件等</p><h3 id="Broadcast-Receive（广播接收器）"><a href="#Broadcast-Receive（广播接收器）" class="headerlink" title="Broadcast Receive（广播接收器）"></a>Broadcast Receive（广播接收器）</h3><p>一个用于接收广播信息，并作出对应处理的组件。比如常见的系统广播：通知时区改变、电量低、用户改变了语言选项等</p><h3 id="Content-Provider（内容提供者）"><a href="#Content-Provider（内容提供者）" class="headerlink" title="Content Provider（内容提供者）"></a>Content Provider（内容提供者）</h3><p>作为程序之间唯一的共享的途径，Content Provider主要的功能就是储存并检索数据以及向其他应用程序提供访问数据接口。Android内置的许多数据都是使用ContentProvider形式，供开发者调用（如视频，音频，图片，通讯录等）</p><h3 id="安卓广告"><a href="#安卓广告" class="headerlink" title="安卓广告"></a>安卓广告</h3><h4 id="广告启动流程"><a href="#广告启动流程" class="headerlink" title="广告启动流程"></a>广告启动流程</h4><p>启动Activity-&gt;广告Activity-&gt;主页Activity</p><h4 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h4><h5 id="1-修改加载时间"><a href="#1-修改加载时间" class="headerlink" title="1.修改加载时间"></a>1.修改加载时间</h5><p>通过获取程序的Activity活动进程得到广告所对应的类名，通过类名在dex文件里面对应相关代码，阅读相关代码找到相关进程，修改广告进程的加载时间</p><h5 id="2-Activity切换定位，修改Inten的Activity类名"><a href="#2-Activity切换定位，修改Inten的Activity类名" class="headerlink" title="2.Activity切换定位，修改Inten的Activity类名"></a>2.Activity切换定位，修改Inten的Activity类名</h5><h6 id="找到xml文件"><a href="#找到xml文件" class="headerlink" title="找到xml文件"></a>找到xml文件</h6><p>当xml文件中有<intent-filter>这一串的时候，android.name中的内容是作为当前启动页，也就是我们第一个看到的界面的类名</p><intent-filter><p>&lt;action  表示activity作为一个动作启动，android.intent.action.MAIN表示作为主activity启动</p><p>&lt;category 这是action元素的额外类别信息，android.intent.category.LAUNCHER表示这个activity为当前应用程序优先级最高的Activity</p><p>（一般不推荐这种方式，可能会导致程序的闪退。程序在启动Activity之前会预先加载一些数据，如果有数据没有对上，后续可能会造成某些问题）</p><h6 id="另一种activity定位方法"><a href="#另一种activity定位方法" class="headerlink" title="另一种activity定位方法"></a>另一种activity定位方法</h6><p>还是找到广告的activity但是要去找到它的smali代码然后再去定位，找到其他类中所调用的该方法</p><h5 id="3-修改xml文件中的versioncode"><a href="#3-修改xml文件中的versioncode" class="headerlink" title="3.修改xml文件中的versioncode"></a>3.修改xml文件中的versioncode</h5><p>更新弹窗会检测现在的版本和最新的版本是否一致，所以我们修改当前版本和最新版本一致即可</p><h5 id="4-Hook弹窗（推荐使用算法助手开启弹窗定位）"><a href="#4-Hook弹窗（推荐使用算法助手开启弹窗定位）" class="headerlink" title="4.Hook弹窗（推荐使用算法助手开启弹窗定位）"></a>4.Hook弹窗（推荐使用算法助手开启弹窗定位）</h5><h5 id="5-修改dex弹窗代码"><a href="#5-修改dex弹窗代码" class="headerlink" title="5.修改dex弹窗代码"></a>5.修改dex弹窗代码</h5><p>在算法助手中找到日志，然后定位广告所使用的方法，再去dex文件中找到该方法，然后进行修改</p><h5 id="布局优化"><a href="#布局优化" class="headerlink" title="布局优化"></a>布局优化</h5><p>1.使用开发助手抓到布局id</p><p>2。MT管理器xml搜索定位</p><p>3.修改xml代码</p><p>android:visiblity&#x3D;”gone”</p><p>这一行代码的含义为隐藏布局</p><h2 id="Activity生命周期"><a href="#Activity生命周期" class="headerlink" title="Activity生命周期"></a>Activity生命周期</h2><p>onCreat()    一个Activity启动后第一个被调用的函数，常用在此方法中进行Activity的一些初始化操作。例如创建View，绑定数据，注册监听，加载函数等……</p><p>onStart()   当Activity显示在屏幕上时，此方法被调用但此时还无法进行与用户的交互操作。</p><p>onResume()   这个方法在onStart()之后调用，也就是在Activity准备好与用户进行交互的时候调用，此时的Activity一定位于Activity栈顶，处于运行状态。</p><p>onPause()   这个方法是在系统准备去启动或者恢复另一个Activity的时候调用，通常在这个方法中执行一些释放资源的方法，以及保存一些相关数据。</p><p>onStop()   这个方法是Activity完全不可见的时候调用的。</p><p>onDestroy()   这个方法在Activity销毁之前调用，之后Activity的状态为销毁状态</p><p>onRestart()   当Activity从停止stop状态恢复进入start状态时调用状态</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202307111255356.png" alt="105514fnc44338qubb43t3"></p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>动态调试是指自带的调试器跟踪自己软件的运行，可以在调试的过程中知道参数或者局部变量的值以及履清代码运行的先后顺序。多用于爆破注册码（CTF必备技能）</p><h4 id="动态调试步骤"><a href="#动态调试步骤" class="headerlink" title="动态调试步骤"></a>动态调试步骤</h4><h5 id="1-修改debug权限"><a href="#1-修改debug权限" class="headerlink" title="1.修改debug权限"></a>1.修改debug权限</h5><h6 id="方法一：在AndroidManifest-xml里添加可调试权限"><a href="#方法一：在AndroidManifest-xml里添加可调试权限" class="headerlink" title="方法一：在AndroidManifest.xml里添加可调试权限"></a>方法一：在AndroidManifest.xml里添加可调试权限</h6><p>android:debuggable&#x3D;”true”</p><p>添加至&lt;application     下</p><h6 id="方法二：XappDebug模块hook对应的app"><a href="#方法二：XappDebug模块hook对应的app" class="headerlink" title="方法二：XappDebug模块hook对应的app"></a>方法二：XappDebug模块hook对应的app</h6><p>项目地址</p><p>XappDebug</p><p><a href="https://github.com/Palatis/XAppDebug">https://github.com/Palatis/XAppDebug</a></p><h6 id="方法三：Magisk命令（重启失效）"><a href="#方法三：Magisk命令（重启失效）" class="headerlink" title="方法三：Magisk命令（重启失效）"></a>方法三：Magisk命令（重启失效）</h6><ol><li>adb shell #adb进入命令模式</li><li>su #切换超级用户</li><li>magisk resetprop ro.debuggable 1</li><li>stop;start; #一定要通过该方式重启</li></ol><h6 id="方法四：刷入MagiskHide-Props-Config模块（永久有效）"><a href="#方法四：刷入MagiskHide-Props-Config模块（永久有效）" class="headerlink" title="方法四：刷入MagiskHide Props Config模块（永久有效）"></a>方法四：刷入MagiskHide Props Config模块（永久有效）</h6><p>一般来说，在4选项中如果有ro.debuggable那就直接修改，没有的话就选5</p><p><img src="C:\Users\16329\Desktop\安卓逆向这点事\105323jzffqjyzb6qyhfqc.png" alt="105323jzffqjyzb6qyhfqc"></p><p>修改ro.debuggable的值为1</p><h5 id="2-端口转发以及开启adb权限"><a href="#2-端口转发以及开启adb权限" class="headerlink" title="2.端口转发以及开启adb权限"></a>2.端口转发以及开启adb权限</h5><p>版本号点击七次开发者模式并开启adb调试权限</p><h5 id="3-下断点"><a href="#3-下断点" class="headerlink" title="3.下断点"></a>3.下断点</h5><p>ctrl + b下断点</p><h5 id="4-debug模式启动"><a href="#4-debug模式启动" class="headerlink" title="4.debug模式启动"></a>4.debug模式启动</h5><p>adb shell am start -D -n com.zj.wuaipojie&#x2F;.ui.MainActivity</p><p>adb shell am start am start -D -n</p><p>adb shell am start am start -D -n 包名&#x2F;类名</p><p>am start -n 表示启动一个activity类</p><p>am start -D 表示将应用设置为可调式模式</p><h5 id="动态调试快捷键"><a href="#动态调试快捷键" class="headerlink" title="动态调试快捷键"></a>动态调试快捷键</h5><p>F6进入方法</p><p>F7跳出方法</p><p>F8</p><p>R运行到光标处</p><h4 id="log插桩"><a href="#log插桩" class="headerlink" title="log插桩"></a>log插桩</h4><p>定义：Log插桩指的是反编译APK文件时，在对应的smali文件里，添加相应的smali代码，将程序中的关键信息，以log日志的形式进行输出</p><p>调用命令：</p><p>invoke-static {对应寄存器}, Lcom&#x2F;mtools&#x2F;LogUtils;-&gt;v(Ljava&#x2F;lang&#x2F;Object;)V</p><h2 id="APK签名"><a href="#APK签名" class="headerlink" title="APK签名"></a>APK签名</h2><h3 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h3><p>是开发者在数据传送时采用的一种校对数据的一种方式</p><p>常见的校验有：签名校验（最为常见）、dexcrc校验、apk完整性校验、路径文件校验等</p><h3 id="APK签名-1"><a href="#APK签名-1" class="headerlink" title="APK签名"></a>APK签名</h3><p>通过对Apk进行签名，开发者可以证明对Apk的所有权和控制权，可用于安装和更新其应用。在Android设备上安装的Apk，如果是一个没有被签名的Apk，则会被拒绝安装。在安装Apk时，软件包管理器也会验证Apk是否已经被正确签名，并且通过签名证书和数据摘要验证是否合法和是否被篡改。只有安全无篡改的情况下，才允许安装在设备上。签名就相当于Apk文件的身份证。</p><p>APK的签名主要作用有两个：</p><p>1.证明APK所有者。</p><p>2.允许Android市场和设备校验APK完整性</p><p>Android目前支持以下四种签名方案：</p><p>v1方案：基于JAR签名。</p><p>v2方案：APK签名方案v2（在Android7.0中引入）</p><p>v3方案：APK签名方案v3（在Android9中引入）</p><p>v4方案：APK签名方案v4（在Android11中引入）</p><p>v1签名的签名机制主要在META-INF目录下的三个文件，MANIFEST.MF，ANDROID.SF，ANDROID.RSA它们都是v1签名的产物。</p><p>（1）MANIFEST.MF：这是摘要文件。程序遍历Apk包中的所有文件（entry），对非文件夹非签名文件，逐个用SHA1（安全哈希算法）生成摘要信息，再用base64进行编码。如果改变了Apk包中的文件，在Apk安装校验时，改变后的文件摘要信息与MANIFEST.MF的校验信息不同，程序会安装失败。</p><p>（2）ANDROID.SF：这是对摘要的签名文件。对前一步生成的MANIFEST.MF，使用SHA1-RSA算法，用开发者的私钥进行签名。在安装时只能使用公钥才能解开。解密之后将其与未加密的摘要信息（即MANIFEST.MF文件）进行比对，如果相符，则表明内容没有异常修改。</p><p>（3）ANDROID.RSA文件中保存了公钥、所采集的加密算法等信息</p><p>在某些情况下，直接对apk进行v1签名可以绕过aok的签名信息</p><p>v2方案会将APK文件视为blob，并对整个文件进行签名检查。对APK进行的任何修改（包括对ZIP元数据进行的修改）都会使APK签名作废。这种形式的APK验证不仅速度快，而且能发现更多未经授权的修改。</p><h3 id="签名校验"><a href="#签名校验" class="headerlink" title="签名校验"></a>签名校验</h3><h4 id="判断是否有签名校验："><a href="#判断是否有签名校验：" class="headerlink" title="判断是否有签名校验："></a>判断是否有签名校验：</h4><p>不做任何修改，直接签名安装，应用闪退则说明大概率有签名校验</p><p>一般来说，普通的签名校验会导致软件的闪退，黑屏，卡启动页等，有些可能会直接rm -rf&#x2F;，直接把基带都格式掉</p><p>常见特征：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">kill/killProcess-----kill/<span class="hljs-title function_">killProcess</span>()可以杀死当前应用活动的进程，这一操作将会把所有该进程内的资源（包括线程全部清理掉）。<br>由于<span class="hljs-title class_">ActivityManage</span>时刻监听着进程，一旦发现进程被非正常kill，他将试图去重启这个进程，这就是为什么，有时候当我们试图这样去结束一个应用的时候，发现它又自动重启的原因。<br>system.<span class="hljs-property">exit</span>------杀死整个进程，这时活动所占用的资源也会被释放。<br>finish----------仅仅针对<span class="hljs-title class_">Activity</span>，当调用finish（）时，只是将活动推向后台，并没立即释放内存，活动的资源并没有被清理<br></code></pre></td></tr></table></figure><h4 id="三角校验："><a href="#三角校验：" class="headerlink" title="三角校验："></a>三角校验：</h4><p>所谓三角校验就是so检测dex，动态加载的dex（在软件运行时会解压释放一段dex文件，检测完后就删除）检测so，dex检测动态架加载的dex</p><h4 id="签名校验示例"><a href="#签名校验示例" class="headerlink" title="签名校验示例"></a>签名校验示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">SignCheck</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">trueSignMD5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d0add9987c7c84aeb7198c3ff26ca152&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">nowSignMD5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 得到签名的MD5</span><br>        <span class="hljs-type">PackageInfo</span> <span class="hljs-variable">packageInfo</span> <span class="hljs-operator">=</span> getPackageManager().getPackageInfo(getPackageName(),PackageManager.GET_SIGNATURES);<br>        Signature[] signs = packageInfo.signatures;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">signBase64</span> <span class="hljs-operator">=</span> Base64Util.encodeToString(signs[<span class="hljs-number">0</span>].toByteArray());<br>        nowSignMD5 = MD5Utils.MD5(signBase64);<br>    &#125; <span class="hljs-keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> trueSignMD5.equals(nowSignMD5);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>系统将应用的签名信息封装在PackageInfo中，调用PackageManager的getPackageInfo（String packageName，int flags）即可获取指定包名的签名信息</p><h4 id="定位签名校验"><a href="#定位签名校验" class="headerlink" title="定位签名校验"></a>定位签名校验</h4><h5 id="通过闪退的逻辑定位签名校验"><a href="#通过闪退的逻辑定位签名校验" class="headerlink" title="通过闪退的逻辑定位签名校验"></a>通过闪退的逻辑定位签名校验</h5><p>第一种：首先对apk文件进行签名，再安装，如果出现闪退就说明这个Apk文件有签名校验，使用算法助手，打开拦截应用退出，防止应用闪退。来到算法助手中查看日志，找到相应日志，查看其调用堆栈，找到相应方法名，到MT管理器中查看其dex文件，在dex文件中找到相应位置，在该方法下找到exit（）函数，将代码注释掉，程序便不会发生闪退。</p><h5 id="拦截获取签名信息的堆栈"><a href="#拦截获取签名信息的堆栈" class="headerlink" title="拦截获取签名信息的堆栈"></a>拦截获取签名信息的堆栈</h5><p>第二种：打开算法助手中的读取应用签名监听选项，运行程序，到算法助手日志中找到读取应用签名的信息，找到堆栈中的相应方法，同样到MT管理器中找到dex文件，然后对相应方法名进行定位。打开jadx找到相应源码，找到相应方法进行分析，按住ctrl点击相应变量进行转跳，找到签名信息。修改方法：</p><p>​找到相应判断语句，再去MT管理器中找到dex文件中相应代码所对应的代码，然后对判断方法进行修改 ，通过算法助手中的日志找到签名后的信息，然后进行替换。（重点是找到签名后比对的信息）</p><h3 id="签名校验对抗"><a href="#签名校验对抗" class="headerlink" title="签名校验对抗"></a>签名校验对抗</h3><p>方法一：核心破解插件，不签名安装应用</p><p>方法二：一键过签名工具，例如MT、NP、ARMPro、CNFIX、Modex的去除签名校验功能</p><p>方法三：具体分析签名校验逻辑（手撕签名校验）</p><p>方法四：io重定向–VA&amp;SVC：ptrace+seccomp</p><p>方法五：严刑拷打作者拿到.jks文件和密码</p><p>.jks文件是应用在进行签名时用到的密钥文件</p><h4 id="方法一（普通签名校验）："><a href="#方法一（普通签名校验）：" class="headerlink" title="方法一（普通签名校验）："></a>方法一（普通签名校验）：</h4><p>通过文件的日志输出文件，来找到签名之前应用的一个签名信息，然后对签名过后的相应位置的信息进行替换，从而达到骗过应用的签名校验的目的</p><h4 id="方法二（普通签名校验）："><a href="#方法二（普通签名校验）：" class="headerlink" title="方法二（普通签名校验）："></a>方法二（普通签名校验）：</h4><p>如果能够确定该签名校验是通过签名信息的比对，从而判断是否被签名的。我们可以通过修改dex文件中的判断条件，比如dex文件中的判断条件是 if-nez v3（若v3不等于0则转跳），我们可以改为if-eqz v3(若v3等于0则转跳)。或者我们可以直接修改v3的值从而让该应用觉得签名信息没有被更改。</p><h3 id="手动实现PM代理"><a href="#手动实现PM代理" class="headerlink" title="手动实现PM代理"></a>手动实现PM代理</h3><p>PackageManagerService（简称PMS），是Android系统核心服务之一，处理包管理相关的工作，常见的比如安装、卸载应用等。</p><p>[过签名校验(2) – MT 的 IO 重定向实践]: “<a href="https://www.52pojie.cn/thread-1733548-1-1.html">https://www.52pojie.cn/thread-1733548-1-1.html</a>“</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>使用动态代理的方式替换这两个属性：</p><p>ActivityThread的静态变量sPackageManager</p><p>ApplicationPackageManager对象里面的mPM变量</p><p>先新建两个类，一个是ServiceManagerWraper ，另一个是PmsHookBinderInvocationHandler ，并且用AS的java2smali插件把java代码转化为smali</p><p>代码如下：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-keyword">.class</span><span class="hljs-keyword"> public</span> <span class="hljs-class">Lzhengji/Hook/PmsHookBinderInvocationHandler;</span><br><span class="hljs-keyword">.super</span> <span class="hljs-class">Ljava/lang/Object;</span><br><span class="hljs-keyword">.source</span> <span class="hljs-string">&quot;PmsHookBinderInvocationHandler.java&quot;</span><br><br><span class="hljs-comment"># interfaces</span><br><span class="hljs-keyword">.implements</span> <span class="hljs-class">Ljava/lang/reflect/InvocationHandler;</span><br><br><span class="hljs-comment"># static fields</span><br><span class="hljs-keyword">.field</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span> SHARK:<span class="hljs-class">Ljava/lang/String;</span> = <span class="hljs-string">&quot;\u6b63\u5df1&quot;</span><br><br><span class="hljs-comment"># instance fields</span><br><span class="hljs-keyword">.field</span><span class="hljs-keyword"> private</span> SIGN:<span class="hljs-class">Ljava/lang/String;</span><br><br><span class="hljs-keyword">.field</span><span class="hljs-keyword"> private</span> appPkgName:<span class="hljs-class">Ljava/lang/String;</span><br><br><span class="hljs-keyword">.field</span><span class="hljs-keyword"> private</span> base:<span class="hljs-class">Ljava/lang/Object;</span><br><br><span class="hljs-comment"># direct methods</span><br><span class="hljs-keyword">.method</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> constructor</span> &lt;init&gt;(<span class="hljs-class">Ljava/lang/Object;</span><span class="hljs-class">Ljava/lang/String;</span><span class="hljs-class">Ljava/lang/String;</span>I)V<br><span class="hljs-keyword">    .registers</span> 9<br><span class="hljs-keyword">    .param</span> p1, <span class="hljs-string">&quot;base&quot;</span>    <span class="hljs-comment"># Ljava/lang/Object;</span><br><span class="hljs-keyword">    .param</span> p2, <span class="hljs-string">&quot;sign&quot;</span>    <span class="hljs-comment"># Ljava/lang/String;</span><br><span class="hljs-keyword">    .param</span> p3, <span class="hljs-string">&quot;appPkgName&quot;</span>    <span class="hljs-comment"># Ljava/lang/String;</span><br><span class="hljs-keyword">    .param</span> p4, <span class="hljs-string">&quot;hashCode&quot;</span>    <span class="hljs-comment"># I</span><br><br><span class="hljs-keyword">    .prologue</span><br><span class="hljs-keyword">    .line</span> 20<br>   <span class="hljs-built_in"> invoke-direct </span>&#123;p0&#125;, <span class="hljs-class">Ljava/lang/Object;</span>-&gt;&lt;init&gt;()V<br><br><span class="hljs-keyword">    .line</span> 18<br>   <span class="hljs-built_in"> const-string </span>v1, <span class="hljs-string">&quot;&quot;</span><br><br>   <span class="hljs-built_in"> iput-object </span>v1, p0, <span class="hljs-class">Lzhengji/Hook/PmsHookBinderInvocationHandler;</span>-&gt;appPkgName:<span class="hljs-class">Ljava/lang/String;</span><br><br><span class="hljs-keyword">    .line</span> 22<br>   <span class="hljs-keyword"> :try_start_7</span><br>   <span class="hljs-built_in"> iput-object </span>p1, p0, <span class="hljs-class">Lzhengji/Hook/PmsHookBinderInvocationHandler;</span>-&gt;base:<span class="hljs-class">Ljava/lang/Object;</span><br><br><span class="hljs-keyword">    .line</span> 23<br>   <span class="hljs-built_in"> iput-object </span>p2, p0, <span class="hljs-class">Lzhengji/Hook/PmsHookBinderInvocationHandler;</span>-&gt;SIGN:<span class="hljs-class">Ljava/lang/String;</span><br><br><span class="hljs-keyword">    .line</span> 24<br>   <span class="hljs-built_in"> iput-object </span>p3, p0, <span class="hljs-class">Lzhengji/Hook/PmsHookBinderInvocationHandler;</span>-&gt;appPkgName:<span class="hljs-class">Ljava/lang/String;</span><br>   <span class="hljs-keyword"> :try_end_d</span><br><span class="hljs-keyword">    .catch</span> <span class="hljs-class">Ljava/lang/Exception;</span> &#123;:try_start_7 ..<span class="hljs-keyword"> :try_end_d</span>&#125;<span class="hljs-keyword"> :catch_e</span><br><br><span class="hljs-keyword">    .line</span> 28<br>   <span class="hljs-keyword"> :goto_d</span><br>   <span class="hljs-built_in"> return-void</span><br><span class="hljs-built_in"></span><br><span class="hljs-keyword">    .line</span> 25<br>   <span class="hljs-keyword"> :catch_e</span><br>   <span class="hljs-built_in"> move-exception </span>v0<br><br><span class="hljs-keyword">    .line</span> 26<br><span class="hljs-keyword">    .local</span> v0, <span class="hljs-string">&quot;e&quot;</span>:<span class="hljs-class">Ljava/lang/Exception;</span><br>   <span class="hljs-built_in"> const-string </span>v1, <span class="hljs-string">&quot;\u6b63\u5df1&quot;</span><br><br>   <span class="hljs-built_in"> new-instance </span>v2, <span class="hljs-class">Ljava/lang/StringBuilder;</span><br><br>   <span class="hljs-built_in"> invoke-direct </span>&#123;v2&#125;, <span class="hljs-class">Ljava/lang/StringBuilder;</span>-&gt;&lt;init&gt;()V<br><br>   <span class="hljs-built_in"> const-string </span>v3, <span class="hljs-string">&quot;error:&quot;</span><br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v2, v3&#125;, <span class="hljs-class">Ljava/lang/StringBuilder;</span>-&gt;append(<span class="hljs-class">Ljava/lang/String;</span>)<span class="hljs-class">Ljava/lang/StringBuilder;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v2<br><br>   <span class="hljs-built_in"> invoke-static </span>&#123;v0&#125;, <span class="hljs-class">Landroid/util/Log;</span>-&gt;getStackTraceString(<span class="hljs-class">Ljava/lang/Throwable;</span>)<span class="hljs-class">Ljava/lang/String;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v3<br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v2, v3&#125;, <span class="hljs-class">Ljava/lang/StringBuilder;</span>-&gt;append(<span class="hljs-class">Ljava/lang/String;</span>)<span class="hljs-class">Ljava/lang/StringBuilder;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v2<br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v2&#125;, <span class="hljs-class">Ljava/lang/StringBuilder;</span>-&gt;toString()<span class="hljs-class">Ljava/lang/String;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v2<br><br>   <span class="hljs-built_in"> invoke-static </span>&#123;v1, v2&#125;, <span class="hljs-class">Landroid/util/Log;</span>-&gt;d(<span class="hljs-class">Ljava/lang/String;</span><span class="hljs-class">Ljava/lang/String;</span>)I<br><br>   <span class="hljs-built_in"> goto </span>:goto_d<span class="hljs-keyword"></span><br><span class="hljs-keyword">.end method</span><br><br><span class="hljs-comment"># virtual methods</span><br><span class="hljs-keyword">.method</span><span class="hljs-keyword"> public</span> invoke(<span class="hljs-class">Ljava/lang/Object;</span><span class="hljs-class">Ljava/lang/reflect/Method;</span>[<span class="hljs-class">Ljava/lang/Object;</span>)<span class="hljs-class">Ljava/lang/Object;</span><br><span class="hljs-keyword">    .registers</span> 11<br><span class="hljs-keyword">    .param</span> p1, <span class="hljs-string">&quot;proxy&quot;</span>    <span class="hljs-comment"># Ljava/lang/Object;</span><br><span class="hljs-keyword">    .param</span> p2, <span class="hljs-string">&quot;method&quot;</span>    <span class="hljs-comment"># Ljava/lang/reflect/Method;</span><br><span class="hljs-keyword">    .param</span> p3, <span class="hljs-string">&quot;args&quot;</span>    <span class="hljs-comment"># [Ljava/lang/Object;</span><br><span class="hljs-keyword">    .annotation</span><span class="hljs-keyword"> system</span> <span class="hljs-class">Ldalvik/annotation/Throws;</span><br>        value = &#123;<br>            <span class="hljs-class">Ljava/lang/Throwable;</span><br>        &#125;<span class="hljs-keyword"></span><br><span class="hljs-keyword">    .end annotation</span><br><br><span class="hljs-keyword">    .prologue</span><br>   <span class="hljs-built_in"> const/4 </span>v6, 0x0<br><br><span class="hljs-keyword">    .line</span> 32<br>   <span class="hljs-built_in"> const-string </span>v4, <span class="hljs-string">&quot;\u6b63\u5df1&quot;</span><br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p2&#125;, <span class="hljs-class">Ljava/lang/reflect/Method;</span>-&gt;getName()<span class="hljs-class">Ljava/lang/String;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v5<br><br>   <span class="hljs-built_in"> invoke-static </span>&#123;v4, v5&#125;, <span class="hljs-class">Landroid/util/Log;</span>-&gt;i(<span class="hljs-class">Ljava/lang/String;</span><span class="hljs-class">Ljava/lang/String;</span>)I<br><br><span class="hljs-keyword">    .line</span> 34<br>   <span class="hljs-built_in"> const-string </span>v4, <span class="hljs-string">&quot;getPackageInfo&quot;</span><br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p2&#125;, <span class="hljs-class">Ljava/lang/reflect/Method;</span>-&gt;getName()<span class="hljs-class">Ljava/lang/String;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v5<br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v4, v5&#125;, <span class="hljs-class">Ljava/lang/String;</span>-&gt;equals(<span class="hljs-class">Ljava/lang/Object;</span>)Z<br><br>   <span class="hljs-built_in"> move-result </span>v4<br><br>   <span class="hljs-built_in"> if-eqz </span>v4,<span class="hljs-keyword"> :cond_43</span><br><br><span class="hljs-keyword">    .line</span> 35<br>   <span class="hljs-built_in"> aget-object </span>v2, p3, v6<br><br>   <span class="hljs-built_in"> check-cast </span>v2, <span class="hljs-class">Ljava/lang/String;</span><br><br><span class="hljs-keyword">    .line</span> 36<br><span class="hljs-keyword">    .local</span> v2, <span class="hljs-string">&quot;pkgName&quot;</span>:<span class="hljs-class">Ljava/lang/String;</span><br>   <span class="hljs-built_in"> const/4 </span>v4, 0x1<br><br>   <span class="hljs-built_in"> aget-object </span>v0, p3, v4<br><br>   <span class="hljs-built_in"> check-cast </span>v0, <span class="hljs-class">Ljava/lang/Integer;</span><br><br><span class="hljs-keyword">    .line</span> 38<br><span class="hljs-keyword">    .local</span> v0, <span class="hljs-string">&quot;flag&quot;</span>:<span class="hljs-class">Ljava/lang/Integer;</span><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v0&#125;, <span class="hljs-class">Ljava/lang/Integer;</span>-&gt;intValue()I<br><br>   <span class="hljs-built_in"> move-result </span>v4<br><br>   <span class="hljs-built_in"> const/16 </span>v5, 0x40<br><br>   <span class="hljs-built_in"> if-ne </span>v4, v5,<span class="hljs-keyword"> :cond_43</span><br><br>   <span class="hljs-built_in"> iget-object </span>v4, p0, <span class="hljs-class">Lzhengji/Hook/PmsHookBinderInvocationHandler;</span>-&gt;appPkgName:<span class="hljs-class">Ljava/lang/String;</span><br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v4, v2&#125;, <span class="hljs-class">Ljava/lang/String;</span>-&gt;equals(<span class="hljs-class">Ljava/lang/Object;</span>)Z<br><br>   <span class="hljs-built_in"> move-result </span>v4<br><br>   <span class="hljs-built_in"> if-eqz </span>v4,<span class="hljs-keyword"> :cond_43</span><br><br><span class="hljs-keyword">    .line</span> 40<br>   <span class="hljs-built_in"> new-instance </span>v3, <span class="hljs-class">Landroid/content/pm/Signature;</span><br><br>   <span class="hljs-built_in"> iget-object </span>v4, p0, <span class="hljs-class">Lzhengji/Hook/PmsHookBinderInvocationHandler;</span>-&gt;SIGN:<span class="hljs-class">Ljava/lang/String;</span><br><br>   <span class="hljs-built_in"> invoke-direct </span>&#123;v3, v4&#125;, <span class="hljs-class">Landroid/content/pm/Signature;</span>-&gt;&lt;init&gt;(<span class="hljs-class">Ljava/lang/String;</span>)V<br><br><span class="hljs-keyword">    .line</span> 41<br><span class="hljs-keyword">    .local</span> v3, <span class="hljs-string">&quot;sign&quot;</span>:<span class="hljs-class">Landroid/content/pm/Signature;</span><br>   <span class="hljs-built_in"> iget-object </span>v4, p0, <span class="hljs-class">Lzhengji/Hook/PmsHookBinderInvocationHandler;</span>-&gt;base:<span class="hljs-class">Ljava/lang/Object;</span><br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p2, v4, p3&#125;, <span class="hljs-class">Ljava/lang/reflect/Method;</span>-&gt;invoke(<span class="hljs-class">Ljava/lang/Object;</span>[<span class="hljs-class">Ljava/lang/Object;</span>)<span class="hljs-class">Ljava/lang/Object;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v1<br><br>   <span class="hljs-built_in"> check-cast </span>v1, <span class="hljs-class">Landroid/content/pm/PackageInfo;</span><br><br><span class="hljs-keyword">    .line</span> 42<br><span class="hljs-keyword">    .local</span> v1, <span class="hljs-string">&quot;info&quot;</span>:<span class="hljs-class">Landroid/content/pm/PackageInfo;</span><br>   <span class="hljs-built_in"> iget-object </span>v4, v1, <span class="hljs-class">Landroid/content/pm/PackageInfo;</span>-&gt;signatures:[<span class="hljs-class">Landroid/content/pm/Signature;</span><br><br>   <span class="hljs-built_in"> aput-object </span>v3, v4, v6<br><br><span class="hljs-keyword">    .line</span> 46<span class="hljs-keyword"></span><br><span class="hljs-keyword">    .end local</span> v0    <span class="hljs-comment"># &quot;flag&quot;:Ljava/lang/Integer;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">    .end local</span> v1    <span class="hljs-comment"># &quot;info&quot;:Landroid/content/pm/PackageInfo;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">    .end local</span> v2    <span class="hljs-comment"># &quot;pkgName&quot;:Ljava/lang/String;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">    .end local</span> v3    <span class="hljs-comment"># &quot;sign&quot;:Landroid/content/pm/Signature;</span><br>   <span class="hljs-keyword"> :goto_42</span><br>   <span class="hljs-built_in"> return-object </span>v1<br><br>   <span class="hljs-keyword"> :cond_43</span><br>   <span class="hljs-built_in"> iget-object </span>v4, p0, <span class="hljs-class">Lzhengji/Hook/PmsHookBinderInvocationHandler;</span>-&gt;base:<span class="hljs-class">Ljava/lang/Object;</span><br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p2, v4, p3&#125;, <span class="hljs-class">Ljava/lang/reflect/Method;</span>-&gt;invoke(<span class="hljs-class">Ljava/lang/Object;</span>[<span class="hljs-class">Ljava/lang/Object;</span>)<span class="hljs-class">Ljava/lang/Object;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v1<br><br>   <span class="hljs-built_in"> goto </span>:goto_42<span class="hljs-keyword"></span><br><span class="hljs-keyword">.end method</span><br><br></code></pre></td></tr></table></figure><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-keyword">.class</span><span class="hljs-keyword"> public</span> <span class="hljs-class">Lzhengji/Hook/ServiceManagerWraper;</span><br><span class="hljs-keyword">.super</span> <span class="hljs-class">Ljava/lang/Object;</span><br><span class="hljs-keyword">.source</span> <span class="hljs-string">&quot;ServiceManagerWraper.java&quot;</span><br><br><span class="hljs-comment"># static fields</span><br><span class="hljs-keyword">.field</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span> SHARK:<span class="hljs-class">Ljava/lang/String;</span> = <span class="hljs-string">&quot;\u6b63\u5df1&quot;</span><br><br><span class="hljs-comment"># direct methods</span><br><span class="hljs-keyword">.method</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> constructor</span> &lt;init&gt;()V<br><span class="hljs-keyword">    .registers</span> 1<br><br><span class="hljs-keyword">    .prologue</span><br><span class="hljs-keyword">    .line</span> 11<br>   <span class="hljs-built_in"> invoke-direct </span>&#123;p0&#125;, <span class="hljs-class">Ljava/lang/Object;</span>-&gt;&lt;init&gt;()V<br><br>   <span class="hljs-built_in"> return-void</span><br><span class="hljs-built_in"></span><span class="hljs-keyword">.end method</span><br><br><span class="hljs-keyword">.method</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> static</span> hookPMS(<span class="hljs-class">Landroid/content/Context;</span>)V<br><span class="hljs-keyword">    .registers</span> 4<br><span class="hljs-keyword">    .param</span> p0, <span class="hljs-string">&quot;context&quot;</span>    <span class="hljs-comment"># Landroid/content/Context;</span><br><br><span class="hljs-keyword">    .prologue</span><br><span class="hljs-keyword">    .line</span> 45<br>   <span class="hljs-built_in"> const-string </span>v0, <span class="hljs-string">&quotquot;</span><br><br><span class="hljs-keyword">    .line</span> 46<br><span class="hljs-keyword">    .local</span> v0, <span class="hljs-string">&quot;Sign&quot;</span>:<span class="hljs-class">Ljava/lang/String;</span><br>   <span class="hljs-built_in"> const-string </span>v1, <span class="hljs-string">&quot;com.uzero.baimiao&quot;</span><br><br>   <span class="hljs-built_in"> const/4 </span>v2, 0x0<br><br>   <span class="hljs-built_in"> invoke-static </span>&#123;p0, v0, v1, v2&#125;, <span class="hljs-class">Lzhengji/Hook/ServiceManagerWraper;</span>-&gt;hookPMS(<span class="hljs-class">Landroid/content/Context;</span><span class="hljs-class">Ljava/lang/String;</span><span class="hljs-class">Ljava/lang/String;</span>I)V<br><br><span class="hljs-keyword">    .line</span> 47<br>   <span class="hljs-built_in"> return-void</span><br><span class="hljs-built_in"></span><span class="hljs-keyword">.end method</span><br><br><span class="hljs-keyword">.method</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> static</span> hookPMS(<span class="hljs-class">Landroid/content/Context;</span><span class="hljs-class">Ljava/lang/String;</span><span class="hljs-class">Ljava/lang/String;</span>I)V<br><span class="hljs-keyword">    .registers</span> 20<br><span class="hljs-keyword">    .param</span> p0, <span class="hljs-string">&quot;context&quot;</span>    <span class="hljs-comment"># Landroid/content/Context;</span><br><span class="hljs-keyword">    .param</span> p1, <span class="hljs-string">&quot;signed&quot;</span>    <span class="hljs-comment"># Ljava/lang/String;</span><br><span class="hljs-keyword">    .param</span> p2, <span class="hljs-string">&quot;appPkgName&quot;</span>    <span class="hljs-comment"># Ljava/lang/String;</span><br><span class="hljs-keyword">    .param</span> p3, <span class="hljs-string">&quot;hashCode&quot;</span>    <span class="hljs-comment"># I</span><br><br><span class="hljs-keyword">    .prologue</span><br><span class="hljs-keyword">    .line</span> 18<br>   <span class="hljs-keyword"> :try_start_0</span><br>   <span class="hljs-built_in"> const-string </span>v12, <span class="hljs-string">&quot;android.app.ActivityThread&quot;</span><br><br>   <span class="hljs-built_in"> invoke-static </span>&#123;v12&#125;, <span class="hljs-class">Ljava/lang/Class;</span>-&gt;forName(<span class="hljs-class">Ljava/lang/String;</span>)<span class="hljs-class">Ljava/lang/Class;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v2<br><br><span class="hljs-keyword">    .line</span> 19<br><span class="hljs-keyword">    .local</span> v2, <span class="hljs-string">&quot;activityThreadClass&quot;</span>:<span class="hljs-class">Ljava/lang/Class;</span>, <span class="hljs-string">&quot;Ljava/lang/Class&lt;*&gt;;&quot;</span><br>   <span class="hljs-built_in"> const-string </span>v12, <span class="hljs-string">&quot;currentActivityThread&quot;</span><br><br>   <span class="hljs-built_in"> const/4 </span>v13, 0x0<br><br>   <span class="hljs-built_in"> new-array </span>v13, v13, [<span class="hljs-class">Ljava/lang/Class;</span><br><br><span class="hljs-keyword">    .line</span> 20<br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v2, v12, v13&#125;, <span class="hljs-class">Ljava/lang/Class;</span>-&gt;getDeclaredMethod(<span class="hljs-class">Ljava/lang/String;</span>[<span class="hljs-class">Ljava/lang/Class;</span>)<span class="hljs-class">Ljava/lang/reflect/Method;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v4<br><br><span class="hljs-keyword">    .line</span> 21<br><span class="hljs-keyword">    .local</span> v4, <span class="hljs-string">&quot;currentActivityThreadMethod&quot;</span>:<span class="hljs-class">Ljava/lang/reflect/Method;</span><br>   <span class="hljs-built_in"> const/4 </span>v12, 0x0<br><br>   <span class="hljs-built_in"> const/4 </span>v13, 0x0<br><br>   <span class="hljs-built_in"> new-array </span>v13, v13, [<span class="hljs-class">Ljava/lang/Object;</span><br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v4, v12, v13&#125;, <span class="hljs-class">Ljava/lang/reflect/Method;</span>-&gt;invoke(<span class="hljs-class">Ljava/lang/Object;</span>[<span class="hljs-class">Ljava/lang/Object;</span>)<span class="hljs-class">Ljava/lang/Object;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v3<br><br><span class="hljs-keyword">    .line</span> 23<br><span class="hljs-keyword">    .local</span> v3, <span class="hljs-string">&quot;currentActivityThread&quot;</span>:<span class="hljs-class">Ljava/lang/Object;</span><br>   <span class="hljs-built_in"> const-string </span>v12, <span class="hljs-string">&quot;sPackageManager&quot;</span><br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v2, v12&#125;, <span class="hljs-class">Ljava/lang/Class;</span>-&gt;getDeclaredField(<span class="hljs-class">Ljava/lang/String;</span>)<span class="hljs-class">Ljava/lang/reflect/Field;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v11<br><br><span class="hljs-keyword">    .line</span> 24<br><span class="hljs-keyword">    .local</span> v11, <span class="hljs-string">&quot;sPackageManagerField&quot;</span>:<span class="hljs-class">Ljava/lang/reflect/Field;</span><br>   <span class="hljs-built_in"> const/4 </span>v12, 0x1<br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v11, v12&#125;, <span class="hljs-class">Ljava/lang/reflect/Field;</span>-&gt;setAccessible(Z)V<br><br><span class="hljs-keyword">    .line</span> 25<br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v11, v3&#125;, <span class="hljs-class">Ljava/lang/reflect/Field;</span>-&gt;get(<span class="hljs-class">Ljava/lang/Object;</span>)<span class="hljs-class">Ljava/lang/Object;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v10<br><br><span class="hljs-keyword">    .line</span> 27<br><span class="hljs-keyword">    .local</span> v10, <span class="hljs-string">&quot;sPackageManager&quot;</span>:<span class="hljs-class">Ljava/lang/Object;</span><br>   <span class="hljs-built_in"> const-string </span>v12, <span class="hljs-string">&quot;android.content.pm.IPackageManager&quot;</span><br><br>   <span class="hljs-built_in"> invoke-static </span>&#123;v12&#125;, <span class="hljs-class">Ljava/lang/Class;</span>-&gt;forName(<span class="hljs-class">Ljava/lang/String;</span>)<span class="hljs-class">Ljava/lang/Class;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v6<br><br><span class="hljs-keyword">    .line</span> 29<br><span class="hljs-keyword">    .local</span> v6, <span class="hljs-string">&quot;iPackageManagerInterface&quot;</span>:<span class="hljs-class">Ljava/lang/Class;</span>, <span class="hljs-string">&quot;Ljava/lang/Class&lt;*&gt;;&quot;</span><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v6&#125;, <span class="hljs-class">Ljava/lang/Class;</span>-&gt;getClassLoader()<span class="hljs-class">Ljava/lang/ClassLoader;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v12<br><br>   <span class="hljs-built_in"> const/4 </span>v13, 0x1<br><br>   <span class="hljs-built_in"> new-array </span>v13, v13, [<span class="hljs-class">Ljava/lang/Class;</span><br><br>   <span class="hljs-built_in"> const/4 </span>v14, 0x0<br><br>   <span class="hljs-built_in"> aput-object </span>v6, v13, v14<br><br>   <span class="hljs-built_in"> new-instance </span>v14, <span class="hljs-class">Lzhengji/Hook/PmsHookBinderInvocationHandler;</span><br><br>   <span class="hljs-built_in"> const/4 </span>v15, 0x0<br><br>   <span class="hljs-built_in"> move-object/from16 </span>v0, p1<br><br>   <span class="hljs-built_in"> move-object/from16 </span>v1, p2<br><br>   <span class="hljs-built_in"> invoke-direct </span>&#123;v14, v10, v0, v1, v15&#125;, <span class="hljs-class">Lzhengji/Hook/PmsHookBinderInvocationHandler;</span>-&gt;&lt;init&gt;(<span class="hljs-class">Ljava/lang/Object;</span><span class="hljs-class">Ljava/lang/String;</span><span class="hljs-class">Ljava/lang/String;</span>I)V<br><br><span class="hljs-keyword">    .line</span> 28<br>   <span class="hljs-built_in"> invoke-static </span>&#123;v12, v13, v14&#125;, <span class="hljs-class">Ljava/lang/reflect/Proxy;</span>-&gt;newProxyInstance(<span class="hljs-class">Ljava/lang/ClassLoader;</span>[<span class="hljs-class">Ljava/lang/Class;</span><span class="hljs-class">Ljava/lang/reflect/InvocationHandler;</span>)<span class="hljs-class">Ljava/lang/Object;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v9<br><br><span class="hljs-keyword">    .line</span> 33<br><span class="hljs-keyword">    .local</span> v9, <span class="hljs-string">&quot;proxy&quot;</span>:<span class="hljs-class">Ljava/lang/Object;</span><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v11, v3, v9&#125;, <span class="hljs-class">Ljava/lang/reflect/Field;</span>-&gt;set(<span class="hljs-class">Ljava/lang/Object;</span><span class="hljs-class">Ljava/lang/Object;</span>)V<br><br><span class="hljs-keyword">    .line</span> 35<br>   <span class="hljs-built_in"> invoke-virtual/range </span>&#123;p0 .. p0&#125;, <span class="hljs-class">Landroid/content/Context;</span>-&gt;getPackageManager()<span class="hljs-class">Landroid/content/pm/PackageManager;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v8<br><br><span class="hljs-keyword">    .line</span> 36<br><span class="hljs-keyword">    .local</span> v8, <span class="hljs-string">&quot;pm&quot;</span>:<span class="hljs-class">Landroid/content/pm/PackageManager;</span><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v8&#125;, <span class="hljs-class">Ljava/lang/Object;</span>-&gt;getClass()<span class="hljs-class">Ljava/lang/Class;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v12<br><br>   <span class="hljs-built_in"> const-string </span>v13, <span class="hljs-string">&quot;mPM&quot;</span><br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v12, v13&#125;, <span class="hljs-class">Ljava/lang/Class;</span>-&gt;getDeclaredField(<span class="hljs-class">Ljava/lang/String;</span>)<span class="hljs-class">Ljava/lang/reflect/Field;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v7<br><br><span class="hljs-keyword">    .line</span> 37<br><span class="hljs-keyword">    .local</span> v7, <span class="hljs-string">&quot;mPmField&quot;</span>:<span class="hljs-class">Ljava/lang/reflect/Field;</span><br>   <span class="hljs-built_in"> const/4 </span>v12, 0x1<br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v7, v12&#125;, <span class="hljs-class">Ljava/lang/reflect/Field;</span>-&gt;setAccessible(Z)V<br><br><span class="hljs-keyword">    .line</span> 38<br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v7, v8, v9&#125;, <span class="hljs-class">Ljava/lang/reflect/Field;</span>-&gt;set(<span class="hljs-class">Ljava/lang/Object;</span><span class="hljs-class">Ljava/lang/Object;</span>)V<br>   <span class="hljs-keyword"> :try_end_5b</span><br><span class="hljs-keyword">    .catch</span> <span class="hljs-class">Ljava/lang/Exception;</span> &#123;:try_start_0 ..<span class="hljs-keyword"> :try_end_5b</span>&#125;<span class="hljs-keyword"> :catch_5c</span><br><br><span class="hljs-keyword">    .line</span> 42<span class="hljs-keyword"></span><br><span class="hljs-keyword">    .end local</span> v2    <span class="hljs-comment"># &quot;activityThreadClass&quot;:Ljava/lang/Class;, &quot;Ljava/lang/Class&lt;*&gt;;&quot;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">    .end local</span> v3    <span class="hljs-comment"># &quot;currentActivityThread&quot;:Ljava/lang/Object;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">    .end local</span> v4    <span class="hljs-comment"># &quot;currentActivityThreadMethod&quot;:Ljava/lang/reflect/Method;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">    .end local</span> v6    <span class="hljs-comment"># &quot;iPackageManagerInterface&quot;:Ljava/lang/Class;, &quot;Ljava/lang/Class&lt;*&gt;;&quot;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">    .end local</span> v7    <span class="hljs-comment"># &quot;mPmField&quot;:Ljava/lang/reflect/Field;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">    .end local</span> v8    <span class="hljs-comment"># &quot;pm&quot;:Landroid/content/pm/PackageManager;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">    .end local</span> v9    <span class="hljs-comment"># &quot;proxy&quot;:Ljava/lang/Object;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">    .end local</span> v10    <span class="hljs-comment"># &quot;sPackageManager&quot;:Ljava/lang/Object;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">    .end local</span> v11    <span class="hljs-comment"># &quot;sPackageManagerField&quot;:Ljava/lang/reflect/Field;</span><br>   <span class="hljs-keyword"> :goto_5b</span><br>   <span class="hljs-built_in"> return-void</span><br><span class="hljs-built_in"></span><br><span class="hljs-keyword">    .line</span> 39<br>   <span class="hljs-keyword"> :catch_5c</span><br>   <span class="hljs-built_in"> move-exception </span>v5<br><br><span class="hljs-keyword">    .line</span> 40<br><span class="hljs-keyword">    .local</span> v5, <span class="hljs-string">&quot;e&quot;</span>:<span class="hljs-class">Ljava/lang/Exception;</span><br>   <span class="hljs-built_in"> const-string </span>v12, <span class="hljs-string">&quot;\u6b63\u5df1&quot;</span><br><br>   <span class="hljs-built_in"> new-instance </span>v13, <span class="hljs-class">Ljava/lang/StringBuilder;</span><br><br>   <span class="hljs-built_in"> invoke-direct </span>&#123;v13&#125;, <span class="hljs-class">Ljava/lang/StringBuilder;</span>-&gt;&lt;init&gt;()V<br><br>   <span class="hljs-built_in"> const-string </span>v14, <span class="hljs-string">&quot;hook pms error:&quot;</span><br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v13, v14&#125;, <span class="hljs-class">Ljava/lang/StringBuilder;</span>-&gt;append(<span class="hljs-class">Ljava/lang/String;</span>)<span class="hljs-class">Ljava/lang/StringBuilder;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v13<br><br>   <span class="hljs-built_in"> invoke-static </span>&#123;v5&#125;, <span class="hljs-class">Landroid/util/Log;</span>-&gt;getStackTraceString(<span class="hljs-class">Ljava/lang/Throwable;</span>)<span class="hljs-class">Ljava/lang/String;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v14<br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v13, v14&#125;, <span class="hljs-class">Ljava/lang/StringBuilder;</span>-&gt;append(<span class="hljs-class">Ljava/lang/String;</span>)<span class="hljs-class">Ljava/lang/StringBuilder;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v13<br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v13&#125;, <span class="hljs-class">Ljava/lang/StringBuilder;</span>-&gt;toString()<span class="hljs-class">Ljava/lang/String;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v13<br><br>   <span class="hljs-built_in"> invoke-static </span>&#123;v12, v13&#125;, <span class="hljs-class">Landroid/util/Log;</span>-&gt;d(<span class="hljs-class">Ljava/lang/String;</span><span class="hljs-class">Ljava/lang/String;</span>)I<br><br>   <span class="hljs-built_in"> goto </span>:goto_5b<span class="hljs-keyword"></span><br><span class="hljs-keyword">.end method</span><br><br></code></pre></td></tr></table></figure><p>在ServiceManagerWraper类的hookPMS方法里有两个需要注意的点，传入的参数里第二个参数sign可以直接用mt获取，获取方法如下</p><p>第二点就是传入的第三个参数是包名。<br>接下来，在mt里新建导入我打包好的dex文件<br>最后一步，根据文章的说法，我们需要在attachBaseContext方法里调用我们的hookPMS，于是，我们在dex里搜索这个方法，结果有两个，两个都可以，在这里我们选择第一个<br>调用代码如下：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">invoke-static &#123;p1&#125;, <span class="hljs-class">Lcom/zhengji/Hook/ServiceManagerWraper;</span>-&gt;hookPMS(<span class="hljs-class">Landroid/content/Context;</span>)V<br></code></pre></td></tr></table></figure><p>Hookpms.dex文件内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zj.hookpms;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.content.pm.PackageManager;<br><span class="hljs-keyword">import</span> android.util.Log;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceManagerWraper</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">ZJ</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ZJ595&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hookPMS</span><span class="hljs-params">(Context context, String signed, String appPkgName, <span class="hljs-type">int</span> hashCode)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 获取全局的ActivityThread对象</span><br>            Class&lt;?&gt; activityThreadClass = Class.forName(<span class="hljs-string">&quot;android.app.ActivityThread&quot;</span>);<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">currentActivityThreadMethod</span> <span class="hljs-operator">=</span><br>                    activityThreadClass.getDeclaredMethod(<span class="hljs-string">&quot;currentActivityThread&quot;</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">currentActivityThread</span> <span class="hljs-operator">=</span> currentActivityThreadMethod.invoke(<span class="hljs-literal">null</span>);<br>            <span class="hljs-comment">// 获取ActivityThread里面原始的sPackageManager</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">sPackageManagerField</span> <span class="hljs-operator">=</span> activityThreadClass.getDeclaredField(<span class="hljs-string">&quot;sPackageManager&quot;</span>);<br>            sPackageManagerField.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">sPackageManager</span> <span class="hljs-operator">=</span> sPackageManagerField.get(currentActivityThread);<br>            <span class="hljs-comment">// 准备好代&#123;过&#125;&#123;滤&#125;理对象, 用来替换原始的对象</span><br>            Class&lt;?&gt; iPackageManagerInterface = Class.forName(<span class="hljs-string">&quot;android.content.pm.IPackageManager&quot;</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(<br>                    iPackageManagerInterface.getClassLoader(),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[]&#123;iPackageManagerInterface&#125;,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">PmsHookBinderInvocationHandler</span>(sPackageManager, signed, appPkgName, <span class="hljs-number">0</span>));<br>            <span class="hljs-comment">// 1. 替换掉ActivityThread里面的 sPackageManager 字段</span><br>            sPackageManagerField.set(currentActivityThread, proxy);<br>            <span class="hljs-comment">// 2. 替换 ApplicationPackageManager里面的 mPM对象</span><br>            <span class="hljs-type">PackageManager</span> <span class="hljs-variable">pm</span> <span class="hljs-operator">=</span> context.getPackageManager();<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">mPmField</span> <span class="hljs-operator">=</span> pm.getClass().getDeclaredField(<span class="hljs-string">&quot;mPM&quot;</span>);<br>            mPmField.setAccessible(<span class="hljs-literal">true</span>);<br>            mPmField.set(pm, proxy);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.d(ZJ, <span class="hljs-string">&quot;hook pms error:&quot;</span> + Log.getStackTraceString(e));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hookPMS</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Sign</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;原包的签名信息&quot;</span>;<br>        hookPMS(context, Sign, <span class="hljs-string">&quot;com.zj.hookpms（包名）&quot;</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在MT管理器中找到apk包的签名信息,以base64的方式复制,粘贴到上面代码相应处。</p><p>获取原包的签名信息：</p><p>打开MT管理器，点击要打开的apk文件，点击签名状态，点击查看原始数据，然后将所有数据以base64的形式复制</p><p>然后就可以绕过签名校验</p><h3 id="过签名校验-1-–-PM-去校验实践"><a href="#过签名校验-1-–-PM-去校验实践" class="headerlink" title="过签名校验(1) – PM 去校验实践"></a>过签名校验(1) – PM 去校验实践</h3><h4 id="PackageManager"><a href="#PackageManager" class="headerlink" title="PackageManager"></a>PackageManager</h4><p>包管理器用于检索与设备上当前安装的应用程序包相关的各种信息的类，其中包括砸门的签名信息。这里给hook掉就可以完全去除签名校验功能</p><p>如下所示：PackageManager 可以轻松获取当前App的各种信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] signatureFromAPI() &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">PackageInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> getPackageManager().getPackageInfo(getPackageName(),                                                 PackageManager.GET_SIGNATURES);<br>            Log.i(<span class="hljs-string">&quot;签名数量:&quot;</span>, info.signatures.length + <span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-keyword">return</span> info.signatures[<span class="hljs-number">0</span>].toByteArray();<br>        &#125; <span class="hljs-keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>   &#125;<br>&#125;    <br></code></pre></td></tr></table></figure><h3 id="IO重定向"><a href="#IO重定向" class="headerlink" title="IO重定向"></a>IO重定向</h3><h4 id="什么是IO重定向"><a href="#什么是IO重定向" class="headerlink" title="什么是IO重定向?"></a>什么是IO重定向?</h4><p>例:在读取文件A的时候指向B文件</p><p><a href="https://github.com/virjarRatel/ratel-core">平头哥的核心代码</a></p><p><a href="https://github.com/asLody/VirtualApp">Virtual Engine for Android(Support 12.0 in business version)</a></p><h4 id="IO重定向的作用"><a href="#IO重定向的作用" class="headerlink" title="IO重定向的作用"></a>IO重定向的作用</h4><ol><li>可以让文件只读,不写</li><li>禁止访问文件</li><li>路径替换</li></ol><h4 id="IO重定向具体实现"><a href="#IO重定向具体实现" class="headerlink" title="IO重定向具体实现:"></a>IO重定向具体实现:</h4><h5 id="过签名校验-读取原包"><a href="#过签名校验-读取原包" class="headerlink" title="过签名校验(读取原包)"></a>过签名校验(读取原包)</h5><p>就是在进行签名校验的时候让系统读取未进行签名的原包</p><h6 id="绕过Crc签名校验"><a href="#绕过Crc签名校验" class="headerlink" title="绕过Crc签名校验"></a>绕过Crc签名校验</h6><p>1.在dex文件中找到crc签名校验代码调用处,将下列代码粘贴至crc签名校验前,进行IO重定向处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs samli">    sget-object p10, Lcom/zj/wuaipojie/util/ContextUtils;-&gt;INSTANCE:Lcom/zj/wuaipojie/util/ContextUtils;  <br><br>invoke-virtual &#123;p10&#125;, Lcom/zj/wuaipojie/util/ContextUtils;-&gt;getContext()Landroid/content/Context;  <br><br>move-result-object p10  <br><br>invoke-static &#123;p10&#125;, Lcom/zj/wuaipojie/util/SecurityUtil;-&gt;hook(Landroid/content/Context;)V<br></code></pre></td></tr></table></figure><p>2.然后在签名过后的安装包的数据目录一下新建一个files文件夹,然后将没有经过签名的Apk包复制到该文件夹中,重命名为base.apk</p><p>此方法也可以绕过hash签名校验,因为Crc签名校验比较的是dex中的Crc的值,而hash签名校验比较的是整个Apk文件包的一个hash值</p><h5 id="风控对抗"><a href="#风控对抗" class="headerlink" title="风控对抗"></a>风控对抗</h5><p>例:一个文件记录App启动的次数</p><h5 id="过Root检测-Xposed检测"><a href="#过Root检测-Xposed检测" class="headerlink" title="过Root检测,Xposed检测"></a>过Root检测,Xposed检测</h5><p>文件不可取</p><h5 id="IO重定向源码"><a href="#IO重定向源码" class="headerlink" title="IO重定向源码"></a>IO重定向源码</h5><p>用到的是dobby的框架</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>string packname;  <br>string origpath;  <br>string fakepath;  <br><br><span class="hljs-built_in">int</span> (*orig_open)(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...);  <br><span class="hljs-built_in">int</span> (*orig_openat)(<span class="hljs-type">int</span>,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...);  <br>FILE *(*orig_fopen)(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *mode);  <br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-title">long</span> <span class="hljs-params">(*orig_syscall)</span><span class="hljs-params">(<span class="hljs-type">long</span> number, ...)</span></span>;  <br><span class="hljs-built_in">int</span> (*orig__NR_openat)(<span class="hljs-type">int</span>,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...);  <br><br><span class="hljs-type">void</span>* (*orig_dlopen_CI)(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">int</span> flag);  <br><span class="hljs-type">void</span>* (*orig_dlopen_CIV)(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">int</span> flag, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *extinfo);  <br><span class="hljs-type">void</span>* (*orig_dlopen_CIVV)(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name, <span class="hljs-type">int</span> flags, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *extinfo, <span class="hljs-type">void</span> *caller_addr);  <br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">needs_mode</span><span class="hljs-params">(<span class="hljs-type">int</span> flags)</span> </span>&#123;  <br>    <span class="hljs-keyword">return</span> ((flags &amp; O_CREAT) == O_CREAT) || ((flags &amp; O_TMPFILE) == O_TMPFILE);  <br>&#125;  <br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">startsWith</span><span class="hljs-params">(string str, string sub)</span></span>&#123;  <br>    <span class="hljs-keyword">return</span> str.<span class="hljs-built_in">find</span>(sub)==<span class="hljs-number">0</span>;  <br>&#125;  <br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">endsWith</span><span class="hljs-params">(string s,string sub)</span></span>&#123;  <br>    <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">rfind</span>(sub)==(s.<span class="hljs-built_in">length</span>()-sub.<span class="hljs-built_in">length</span>());  <br>&#125;  <br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isOrigAPK</span><span class="hljs-params">(string  path)</span></span>&#123;  <br><br>    <span class="hljs-keyword">if</span>(path==origpath)&#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>&#125;  <br><span class="hljs-comment">//该函数的功能是在打开一个文件时进行拦截，并在满足特定条件时将文件路径替换为另一个路径  </span><br><br><span class="hljs-comment">//fake_open 函数有三个参数：  </span><br><span class="hljs-comment">//pathname：一个字符串，表示要打开的文件的路径。  </span><br><span class="hljs-comment">//flags：一个整数，表示打开文件的方式，例如只读、只写、读写等。  </span><br><span class="hljs-comment">//mode（可选参数）：一个整数，表示打开文件时应用的权限模式。  </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fake_open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...)</span> </span>&#123;  <br>    <span class="hljs-type">mode_t</span> mode = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">needs_mode</span>(flags)) &#123;  <br>        va_list args;  <br>        <span class="hljs-built_in">va_start</span>(args, flags);  <br>        mode = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">mode_t</span>&gt;(<span class="hljs-built_in">va_arg</span>(args, <span class="hljs-type">int</span>));  <br>        <span class="hljs-built_in">va_end</span>(args);  <br>    &#125;  <br>    <span class="hljs-comment">//LOGI(&quot;open,  path: %s, flags: %d, mode: %d&quot;,pathname, flags ,mode);  </span><br>    string cpp_path= pathname;  <br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isOrigAPK</span>(cpp_path))&#123;  <br>        <span class="hljs-built_in">LOGI</span>(<span class="hljs-string">&quot;libc_open, redirect: %s, ---&gt;: %s&quot;</span>,pathname, fakepath.<span class="hljs-built_in">data</span>());  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">orig_open</span>(<span class="hljs-string">&quot;/data/user/0/com.zj.wuaipojie/files/base.apk&quot;</span>, flags, mode);  <br>    &#125;  <br>    <span class="hljs-keyword">return</span>  <span class="hljs-built_in">orig_open</span>(pathname, flags, mode);  <br><br>&#125;  <br><br><span class="hljs-comment">//该函数的功能是在打开一个文件时进行拦截，并在满足特定条件时将文件路径替换为另一个路径  </span><br><br><span class="hljs-comment">//fake_openat 函数有四个参数：  </span><br><span class="hljs-comment">//fd：一个整数，表示要打开的文件的文件描述符。  </span><br><span class="hljs-comment">//pathname：一个字符串，表示要打开的文件的路径。  </span><br><span class="hljs-comment">//flags：一个整数，表示打开文件的方式，例如只读、只写、读写等。  </span><br><span class="hljs-comment">//mode（可选参数）：一个整数，表示打开文件时应用的权限模式。  </span><br><span class="hljs-comment">//openat 函数的作用类似于 open 函数，但是它使用文件描述符来指定文件路径，而不是使用文件路径本身。这样，就可以在打开文件时使用相对路径，而不必提供完整的文件路径。  </span><br><span class="hljs-comment">//例如，如果要打开相对于当前目录的文件，可以使用 openat 函数，而不是 open 函数，因为 open 函数只能使用绝对路径。  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fake_openat</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...)</span> </span>&#123;  <br>    <span class="hljs-type">mode_t</span> mode = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">needs_mode</span>(flags)) &#123;  <br>        va_list args;  <br>        <span class="hljs-built_in">va_start</span>(args, flags);  <br>        mode = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">mode_t</span>&gt;(<span class="hljs-built_in">va_arg</span>(args, <span class="hljs-type">int</span>));  <br>        <span class="hljs-built_in">va_end</span>(args);  <br>    &#125;  <br>    <span class="hljs-built_in">LOGI</span>(<span class="hljs-string">&quot;openat, fd: %d, path: %s, flags: %d, mode: %d&quot;</span>,fd ,pathname, flags ,mode);  <br>    string cpp_path= pathname;  <br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isOrigAPK</span>(cpp_path))&#123;  <br>        <span class="hljs-built_in">LOGI</span>(<span class="hljs-string">&quot;libc_openat, redirect: %s, ---&gt;: %s&quot;</span>,pathname, fakepath.<span class="hljs-built_in">data</span>());  <br>        <span class="hljs-keyword">return</span>  <span class="hljs-built_in">orig_openat</span>(fd,fakepath.<span class="hljs-built_in">data</span>(), flags, mode);  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">orig_openat</span>(fd,pathname, flags, mode);  <br><br>&#125;  <br><span class="hljs-function">FILE *<span class="hljs-title">fake_fopen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *mode)</span> </span>&#123;  <br><br>    string cpp_path= filename;  <br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isOrigAPK</span>(cpp_path))&#123;  <br>        <span class="hljs-keyword">return</span>  <span class="hljs-built_in">orig_fopen</span>(fakepath.<span class="hljs-built_in">data</span>(), mode);  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">orig_fopen</span>(filename, mode);  <br>&#125;  <br><span class="hljs-comment">//该函数的功能是在执行系统调用时进行拦截，并在满足特定条件时修改系统调用的参数。  </span><br><span class="hljs-comment">//syscall 函数是一个系统调用，是程序访问内核功能的方法之一。使用 syscall 函数可以调用大量的系统调用，它们用于实现操作系统的各种功能，例如打开文件、创建进程、分配内存等。  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-title">fake_syscall</span><span class="hljs-params">(<span class="hljs-type">long</span> number, ...)</span> </span>&#123;  <br>    <span class="hljs-type">void</span> *arg[<span class="hljs-number">7</span>];  <br>    va_list list;  <br><br>    <span class="hljs-built_in">va_start</span>(list, number);  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; ++i) &#123;  <br>        arg[i] = <span class="hljs-built_in">va_arg</span>(list, <span class="hljs-type">void</span> *);  <br>    &#125;  <br>    <span class="hljs-built_in">va_end</span>(list);  <br>    <span class="hljs-keyword">if</span> (number == __NR_openat)&#123;  <br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span> *cpp_path = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">char</span> *&gt;(arg[<span class="hljs-number">1</span>]);  <br>        <span class="hljs-built_in">LOGI</span>(<span class="hljs-string">&quot;syscall __NR_openat, fd: %d, path: %s, flags: %d, mode: %d&quot;</span>,arg[<span class="hljs-number">0</span>] ,arg[<span class="hljs-number">1</span>], arg[<span class="hljs-number">2</span>], arg[<span class="hljs-number">3</span>]);  <br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isOrigAPK</span>(cpp_path))&#123;  <br>            <span class="hljs-built_in">LOGI</span>(<span class="hljs-string">&quot;syscall __NR_openat, redirect: %s, ---&gt;: %s&quot;</span>,arg[<span class="hljs-number">1</span>], fakepath.<span class="hljs-built_in">data</span>());  <br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">orig_syscall</span>(number,arg[<span class="hljs-number">0</span>], fakepath.<span class="hljs-built_in">data</span>() ,arg[<span class="hljs-number">2</span>],arg[<span class="hljs-number">3</span>]);  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">orig_syscall</span>(number, arg[<span class="hljs-number">0</span>], arg[<span class="hljs-number">1</span>], arg[<span class="hljs-number">2</span>], arg[<span class="hljs-number">3</span>], arg[<span class="hljs-number">4</span>], arg[<span class="hljs-number">5</span>], arg[<span class="hljs-number">6</span>]);  <br><br>&#125;  <br><br><span class="hljs-comment">//函数的功能是获取当前应用的包名、APK 文件路径以及库文件路径，并将这些信息保存在全局变量中  </span><br><span class="hljs-comment">//函数调用 GetObjectClass 和 GetMethodID 函数来获取 context 对象的类型以及 getPackageName 方法的 ID。然后，函数调用 CallObjectMethod 函数来调用 getPackageName 方法，获取当前应用的包名。最后，函数使用 GetStringUTFChars 函数将包名转换为 C 字符串，并将包名保存在 packname 全局变量中  </span><br><span class="hljs-comment">//接着，函数使用 fakepath 全局变量保存了 /data/user/0/&lt;packname&gt;/files/base.apk 这样的路径，其中 &lt;packname&gt; 是当前应用的包名。  </span><br><span class="hljs-comment">//然后，函数再次调用 GetObjectClass 和 GetMethodID 函数来获取 context 对象的类型以及 getApplicationInfo 方法的 ID。然后，函数调用 CallObjectMethod 函数来调用 getApplicationInfo 方法，获取当前应用的 ApplicationInfo 对象。  </span><br><span class="hljs-comment">//它先调用 GetObjectClass 函数获取 ApplicationInfo 对象的类型，然后调用 GetFieldID 函数获取 sourceDir 字段的 ID。接着，函数使用 GetObjectField 函数获取 sourceDir 字段的值，并使用 GetStringUTFChars 函数将其转换为 C 字符串。最后，函数将 C 字符串保存在 origpath 全局变量中，表示当前应用的 APK 文件路径。  </span><br><span class="hljs-comment">//最后，函数使用 GetFieldID 和 GetObjectField 函数获取 nativeLibraryDir 字段的值，并使用 GetStringUTFChars 函数将其转换为 C 字符串。函数最后调用 LOGI 函数打印库文件路径，但是并没有将其保存在全局变量中。  </span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function">JNIEXPORT <span class="hljs-type">void</span> JNICALL  </span><br><span class="hljs-function"><span class="hljs-title">Java_com_zj_wuaipojie_util_SecurityUtil_hook</span><span class="hljs-params">(JNIEnv *env, jclass clazz, jobject context)</span> </span>&#123;  <br>    jclass conext_class = env-&gt;<span class="hljs-built_in">GetObjectClass</span>(context);  <br>    jmethodID methodId_pack = env-&gt;<span class="hljs-built_in">GetMethodID</span>(conext_class, <span class="hljs-string">&quot;getPackageName&quot;</span>,  <br>                                               <span class="hljs-string">&quot;()Ljava/lang/String;&quot;</span>);  <br>    <span class="hljs-keyword">auto</span> packname_js = <span class="hljs-built_in">reinterpret_cast</span>&lt;jstring&gt;(env-&gt;<span class="hljs-built_in">CallObjectMethod</span>(context, methodId_pack));  <br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *pn = env-&gt;<span class="hljs-built_in">GetStringUTFChars</span>(packname_js, <span class="hljs-number">0</span>);  <br>    packname = <span class="hljs-built_in">string</span>(pn);  <br><br>    env-&gt;<span class="hljs-built_in">ReleaseStringUTFChars</span>(packname_js, pn);  <br>    <span class="hljs-comment">//LOGI(&quot;packname: %s&quot;, packname.data());  </span><br>    fakepath= <span class="hljs-string">&quot;/data/user/0/&quot;</span>+ packname +<span class="hljs-string">&quot;/files/base.apk&quot;</span>;  <br><br>    jclass conext_class2 = env-&gt;<span class="hljs-built_in">GetObjectClass</span>(context);  <br>    jmethodID methodId_pack2 = env-&gt;<span class="hljs-built_in">GetMethodID</span>(conext_class2,<span class="hljs-string">&quot;getApplicationInfo&quot;</span>,<span class="hljs-string">&quot;()Landroid/content/pm/ApplicationInfo;&quot;</span>);  <br>    jobject application_info = env-&gt;<span class="hljs-built_in">CallObjectMethod</span>(context,methodId_pack2);  <br>    jclass pm_clazz = env-&gt;<span class="hljs-built_in">GetObjectClass</span>(application_info);  <br><br>    jfieldID package_info_id = env-&gt;<span class="hljs-built_in">GetFieldID</span>(pm_clazz,<span class="hljs-string">&quot;sourceDir&quot;</span>,<span class="hljs-string">&quot;Ljava/lang/String;&quot;</span>);  <br>    <span class="hljs-keyword">auto</span> sourceDir_js = <span class="hljs-built_in">reinterpret_cast</span>&lt;jstring&gt;(env-&gt;<span class="hljs-built_in">GetObjectField</span>(application_info,package_info_id));  <br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *sourceDir = env-&gt;<span class="hljs-built_in">GetStringUTFChars</span>(sourceDir_js, <span class="hljs-number">0</span>);  <br>    origpath = <span class="hljs-built_in">string</span>(sourceDir);  <br>    <span class="hljs-built_in">LOGI</span>(<span class="hljs-string">&quot;sourceDir: %s&quot;</span>, sourceDir);  <br><br>    jfieldID package_info_id2 = env-&gt;<span class="hljs-built_in">GetFieldID</span>(pm_clazz,<span class="hljs-string">&quot;nativeLibraryDir&quot;</span>,<span class="hljs-string">&quot;Ljava/lang/String;&quot;</span>);  <br>    <span class="hljs-keyword">auto</span> nativeLibraryDir_js = <span class="hljs-built_in">reinterpret_cast</span>&lt;jstring&gt;(env-&gt;<span class="hljs-built_in">GetObjectField</span>(application_info,package_info_id2));  <br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *nativeLibraryDir = env-&gt;<span class="hljs-built_in">GetStringUTFChars</span>(nativeLibraryDir_js, <span class="hljs-number">0</span>);  <br>    <span class="hljs-built_in">LOGI</span>(<span class="hljs-string">&quot;nativeLibraryDir: %s&quot;</span>, nativeLibraryDir);  <br>    <span class="hljs-comment">//LOGI(&quot;%s&quot;, &quot;Start Hook&quot;);  </span><br><br>    <span class="hljs-comment">//启动hook  </span><br>    <span class="hljs-type">void</span> *handle = <span class="hljs-built_in">dlopen</span>(<span class="hljs-string">&quot;libc.so&quot;</span>,RTLD_NOW);  <br>    <span class="hljs-keyword">auto</span> pagesize = <span class="hljs-built_in">sysconf</span>(_SC_PAGE_SIZE);  <br>    <span class="hljs-keyword">auto</span> addr = ((<span class="hljs-type">uintptr_t</span>)<span class="hljs-built_in">dlsym</span>(handle,<span class="hljs-string">&quot;open&quot;</span>) &amp; (-pagesize));  <br>    <span class="hljs-keyword">auto</span> addr2 = ((<span class="hljs-type">uintptr_t</span>)<span class="hljs-built_in">dlsym</span>(handle,<span class="hljs-string">&quot;openat&quot;</span>) &amp; (-pagesize));  <br>    <span class="hljs-keyword">auto</span> addr3 = ((<span class="hljs-type">uintptr_t</span>)fopen) &amp; (-pagesize);  <br>    <span class="hljs-keyword">auto</span> addr4 = ((<span class="hljs-type">uintptr_t</span>)syscall) &amp; (-pagesize);  <br><br>    <span class="hljs-comment">//解除部分机型open被保护  </span><br>    <span class="hljs-built_in">mprotect</span>((<span class="hljs-type">void</span>*)addr, pagesize, PROT_READ | PROT_WRITE | PROT_EXEC);  <br>    <span class="hljs-built_in">mprotect</span>((<span class="hljs-type">void</span>*)addr2, pagesize, PROT_READ | PROT_WRITE | PROT_EXEC);  <br>    <span class="hljs-built_in">mprotect</span>((<span class="hljs-type">void</span>*)addr3, pagesize, PROT_READ | PROT_WRITE | PROT_EXEC);  <br>    <span class="hljs-built_in">mprotect</span>((<span class="hljs-type">void</span>*)addr4, pagesize, PROT_READ | PROT_WRITE | PROT_EXEC);  <br><br>    <span class="hljs-built_in">DobbyHook</span>((<span class="hljs-type">void</span> *)<span class="hljs-built_in">dlsym</span>(handle,<span class="hljs-string">&quot;open&quot;</span>), (<span class="hljs-type">void</span> *)fake_open, (<span class="hljs-type">void</span> **)&amp;orig_open);  <br>    <span class="hljs-built_in">DobbyHook</span>((<span class="hljs-type">void</span> *)<span class="hljs-built_in">dlsym</span>(handle,<span class="hljs-string">&quot;openat&quot;</span>), (<span class="hljs-type">void</span> *)fake_openat, (<span class="hljs-type">void</span> **)&amp;orig_openat);  <br>    <span class="hljs-built_in">DobbyHook</span>((<span class="hljs-type">void</span> *)fopen, (<span class="hljs-type">void</span> *)fake_fopen, (<span class="hljs-type">void</span>**)&amp;orig_fopen);  <br>    <span class="hljs-built_in">DobbyHook</span>((<span class="hljs-type">void</span> *)syscall, (<span class="hljs-type">void</span> *)fake_syscall, (<span class="hljs-type">void</span> **)&amp;orig_syscall);  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="其他常见校验"><a href="#其他常见校验" class="headerlink" title="其他常见校验"></a>其他常见校验</h3><h4 id="root检测"><a href="#root检测" class="headerlink" title="root检测"></a>root检测</h4><p>反制手段</p><p>1.算法助手、对话框取消等插件一键hook</p><p>2.分析具体的检测代码</p><p>3.利用IO重定向使文件不可读</p><p>4.修改Android源码，去除常见指纹</p><p>常见Root检测三种方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">fun <span class="hljs-title function_">isDeviceRooted</span><span class="hljs-params">()</span>: Boolean &#123;<br>    <span class="hljs-keyword">return</span> checkRootMethod1() || checkRootMethod2() || checkRootMethod3()<br>&#125;<br><br>fun <span class="hljs-title function_">checkRootMethod1</span><span class="hljs-params">()</span>: Boolean &#123;<br>    <span class="hljs-type">val</span> <span class="hljs-variable">buildTags</span> <span class="hljs-operator">=</span> android.os.Build.TAGS<br>    <span class="hljs-keyword">return</span> buildTags != <span class="hljs-literal">null</span> &amp;&amp; buildTags.contains(<span class="hljs-string">&quot;test-keys&quot;</span>)<br>&#125;<br><br>fun <span class="hljs-title function_">checkRootMethod2</span><span class="hljs-params">()</span>: Boolean &#123;<br>    <span class="hljs-type">val</span> <span class="hljs-variable">paths</span> <span class="hljs-operator">=</span> arrayOf(<span class="hljs-string">&quot;/system/app/Superuser.apk&quot;</span>, <span class="hljs-string">&quot;/sbin/su&quot;</span>, <span class="hljs-string">&quot;/system/bin/su&quot;</span>, <span class="hljs-string">&quot;/system/xbin/su&quot;</span>, <span class="hljs-string">&quot;/data/local/xbin/su&quot;</span>, <span class="hljs-string">&quot;/data/local/bin/su&quot;</span>, <span class="hljs-string">&quot;/system/sd/xbin/su&quot;</span>,<br>            <span class="hljs-string">&quot;/system/bin/failsafe/su&quot;</span>, <span class="hljs-string">&quot;/data/local/su&quot;</span>, <span class="hljs-string">&quot;/su/bin/su&quot;</span>)<br>    <span class="hljs-keyword">for</span> (path in paths) &#123;<br>        <span class="hljs-keyword">if</span> (File(path).exists()) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br>fun <span class="hljs-title function_">checkRootMethod3</span><span class="hljs-params">()</span>: Boolean &#123;<br>    <span class="hljs-keyword">var</span> process: Process? = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">try</span> &#123;<br>        process = Runtime.getRuntime().exec(arrayOf(<span class="hljs-string">&quot;/system/xbin/which&quot;</span>, <span class="hljs-string">&quot;su&quot;</span>))<br>        <span class="hljs-type">val</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> BufferedReader(InputStreamReader(process.inputStream))<br>        bufferedReader.readLine() != <span class="hljs-literal">null</span><br>    &#125; <span class="hljs-keyword">catch</span> (t: Throwable) &#123;<br>        <span class="hljs-literal">false</span><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        process?.destroy()<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>定义了一个 <code>isDeviceRooted()</code> 函数，该函数调用了三个检测 root 的方法：<code>checkRootMethod1()</code>、<code>checkRootMethod2()</code> 和 <code>checkRootMethod3()</code>。</p><p><code>checkRootMethod1()</code> 方法检查设备的 <code>build tags</code> 是否包含 <code>test-keys</code>。这通常是用于测试的设备，因此如果检测到这个标记，则可以认为设备已被 root。</p><p><code>checkRootMethod2()</code> 方法检查设备是否存在一些特定的文件，这些文件通常被用于执行 root 操作。如果检测到这些文件，则可以认为设备已被 root。</p><p><code>checkRootMethod3()</code> 方法使用 <code>Runtime.exec()</code> 方法来执行 <code>which su</code> 命令，然后检查命令的输出是否不为空。如果输出不为空，则可以认为设备已被 root。</p><h4 id="模拟器检测（很少遇见）"><a href="#模拟器检测（很少遇见）" class="headerlink" title="模拟器检测（很少遇见）"></a>模拟器检测（很少遇见）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">fun <span class="hljs-title function_">isEmulator</span><span class="hljs-params">()</span>: Boolean &#123; <br>        <span class="hljs-keyword">return</span> Build.FINGERPRINT.startsWith(<span class="hljs-string">&quot;generic&quot;</span>) || Build.FINGERPRINT.startsWith(<span class="hljs-string">&quot;unknown&quot;</span>) || Build.MODEL.contains(<span class="hljs-string">&quot;google_sdk&quot;</span>) Build.MODEL.contains(<span class="hljs-string">&quot;Emulator&quot;</span>) || Build.MODEL.contains(<span class="hljs-string">&quot;Android SDK built for x86&quot;</span>) || Build.MANUFACTURER.contains(<span class="hljs-string">&quot;Genymotion&quot;</span>) || Build.HOST.startsWith(<span class="hljs-string">&quot;Build&quot;</span>) || Build.PRODUCT == <span class="hljs-string">&quot;google_sdk&quot;</span> <br>        &#125;<br><br></code></pre></td></tr></table></figure><p>通过检测系统的 <code>Build</code> 对象来判断当前设备是否为模拟器。具体方法是检测 <code>Build.FINGERPRINT</code> 属性是否包含字符串 <code>&quot;generic&quot;</code>。</p><h4 id="反调试检测"><a href="#反调试检测" class="headerlink" title="反调试检测"></a>反调试检测</h4><p>安卓系统自带调试检测函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">fun <span class="hljs-title function_">checkForDebugger</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">if</span> (Debug.isDebuggerConnected()) &#123;  <br>        <span class="hljs-comment">// 如果调试器已连接，则终止应用程序  </span><br>        System.exit(<span class="hljs-number">0</span>)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>debuggable属性</p><p>检测xml文件中的debuggable属性是否为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getAppCanDebug</span><span class="hljs-params">(Context context)</span><span class="hljs-comment">//上下文对象为xxActivity.this</span><br>&#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isDebug</span> <span class="hljs-operator">=</span> context.getApplicationInfo() != <span class="hljs-literal">null</span> &amp;&amp;<br>            (context.getApplicationInfo().flags &amp; ApplicationInfo.FLAG_DEBUGGABLE) != <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> isDebug;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>ptrace检测</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">ptrace_protect</span><span class="hljs-params">()</span><span class="hljs-comment">//ptrace附加自身线程 会导致此进程TracerPid 变为父进程的TracerPid 即zygote</span><br>&#123;<br>    <span class="hljs-keyword">return</span> ptrace(PTRACE_TRACEME,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);;<span class="hljs-comment">//返回-1即为已经被调试</span><br>&#125;<br></code></pre></td></tr></table></figure><p>每个进程同时刻只能被1个调试进程ptrace ，主动ptrace本进程可以使得其他调试器无法调试</p><p>调试进程名检测</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">SearchObjProcess</span><span class="hljs-params">()</span><br>&#123;<br>    FILE* pfile=NULL;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x1000</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><br>    pfile=popen(<span class="hljs-string">&quot;ps&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(NULL==pfile)<br>    &#123;<br>        <span class="hljs-comment">//LOGA(&quot;SearchObjProcess popen打开命令失败!\n&quot;);</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 获取结果</span><br>    <span class="hljs-comment">//LOGA(&quot;popen方案:\n&quot;);</span><br>    <span class="hljs-keyword">while</span>(fgets(buf,sizeof(buf),pfile))<br>    &#123;<br><br>        <span class="hljs-type">char</span>* strA=NULL;<br>        <span class="hljs-type">char</span>* strB=NULL;<br>        <span class="hljs-type">char</span>* strC=NULL;<br>        <span class="hljs-type">char</span>* strD=NULL;<br>        strA=strstr(buf,<span class="hljs-string">&quot;android_server&quot;</span>);<span class="hljs-comment">//通过查找匹配子串判断</span><br>        strB=strstr(buf,<span class="hljs-string">&quot;gdbserver&quot;</span>);<br>        strC=strstr(buf,<span class="hljs-string">&quot;gdb&quot;</span>);<br>        strD=strstr(buf,<span class="hljs-string">&quot;fuwu&quot;</span>);<br>        <span class="hljs-keyword">if</span>(strA || strB ||strC || strD)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 执行到这里，判定为调试状态</span><br><br>        &#125;<br>    &#125;<br>    pclose(pfile);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="frida检测"><a href="#frida检测" class="headerlink" title="frida检测"></a>frida检测</h4><h2 id="smali语法之赋值"><a href="#smali语法之赋值" class="headerlink" title="smali语法之赋值"></a>smali语法之赋值</h2><h4 id="Int型赋值"><a href="#Int型赋值" class="headerlink" title="Int型赋值"></a>Int型赋值</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-keyword">.method</span><span class="hljs-keyword"> private</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span> onCreate$lambda-0(<span class="hljs-class">Lcom/zj/wuaipojie/ui/SmaliLearn;</span><span class="hljs-class">Landroid/widget/TextView;</span><span class="hljs-class">Landroid/widget/TextView;</span><span class="hljs-class">Landroid/widget/TextView;</span><span class="hljs-class">Landroid/view/View;</span>)V  <br><span class="hljs-keyword">    .registers</span> 9  <br><br><span class="hljs-keyword">    .line</span> 21  <br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p0&#125;, <span class="hljs-class">Lcom/zj/wuaipojie/ui/SmaliLearn;</span>-&gt;isVip()I  <br><br>   <span class="hljs-built_in"> move-result </span>p4  <br>        //判断vip的值分别对应不用的会员的等级<br>   <span class="hljs-built_in"> if-eqz </span>p4,<span class="hljs-keyword"> :cond_35</span>  <br><br>   <span class="hljs-built_in"> const/4 </span>v0, 0x1  <br><br>   <span class="hljs-built_in"> if-eq </span>p4, v0,<span class="hljs-keyword"> :cond_2d</span>  <br><br>   <span class="hljs-built_in"> const/4 </span>v0, 0x4  <br><br>   <span class="hljs-built_in"> if-eq </span>p4, v0,<span class="hljs-keyword"> :cond_25</span>  <br><br>   <span class="hljs-built_in"> const/16 </span>v0, 0x10  <br><br>   <span class="hljs-built_in"> if-eq </span>p4, v0,<span class="hljs-keyword"> :cond_1d</span>  <br><br>   <span class="hljs-built_in"> const/16 </span>v0, 0x63  <br><br>   <span class="hljs-built_in"> if-eq </span>p4, v0,<span class="hljs-keyword"> :cond_15</span>  <br><br>   <span class="hljs-built_in"> goto </span>:goto_3c  <br><br>   <span class="hljs-keyword"> :cond_15</span>  <br>   <span class="hljs-built_in"> const-string </span>p4, <span class="hljs-string">&quot;至尊会员&quot;</span>  <br><br><span class="hljs-keyword">    .line</span> 26  <br>   <span class="hljs-built_in"> check-cast </span>p4, <span class="hljs-class">Ljava/lang/CharSequence;</span>  <br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p1, p4&#125;, <span class="hljs-class">Landroid/widget/TextView;</span>-&gt;setText(<span class="hljs-class">Ljava/lang/CharSequence;</span>)V  <br><br>   <span class="hljs-built_in"> goto </span>:goto_3c  <br><br>   <span class="hljs-keyword"> :cond_1d</span>  <br>   <span class="hljs-built_in"> const-string </span>p4, <span class="hljs-string">&quot;超级会员&quot;</span>  <br><br><span class="hljs-keyword">    .line</span> 25  <br>   <span class="hljs-built_in"> check-cast </span>p4, <span class="hljs-class">Ljava/lang/CharSequence;</span>  <br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p1, p4&#125;, <span class="hljs-class">Landroid/widget/TextView;</span>-&gt;setText(<span class="hljs-class">Ljava/lang/CharSequence;</span>)V  <br><br>   <span class="hljs-built_in"> goto </span>:goto_3c  <br><br>   <span class="hljs-keyword"> :cond_25</span>  <br>   <span class="hljs-built_in"> const-string </span>p4, <span class="hljs-string">&quot;大会员&quot;</span>  <br><br><span class="hljs-keyword">    .line</span> 24  <br>   <span class="hljs-built_in"> check-cast </span>p4, <span class="hljs-class">Ljava/lang/CharSequence;</span>  <br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p1, p4&#125;, <span class="hljs-class">Landroid/widget/TextView;</span>-&gt;setText(<span class="hljs-class">Ljava/lang/CharSequence;</span>)V  <br><br>   <span class="hljs-built_in"> goto </span>:goto_3c  <br><br>   <span class="hljs-keyword"> :cond_2d</span>  <br>   <span class="hljs-built_in"> const-string </span>p4, <span class="hljs-string">&quot;会员&quot;</span>  <br><br><span class="hljs-keyword">    .line</span> 23  <br>   <span class="hljs-built_in"> check-cast </span>p4, <span class="hljs-class">Ljava/lang/CharSequence;</span>  <br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p1, p4&#125;, <span class="hljs-class">Landroid/widget/TextView;</span>-&gt;setText(<span class="hljs-class">Ljava/lang/CharSequence;</span>)V  <br><br>   <span class="hljs-built_in"> goto </span>:goto_3c  <br><br>   <span class="hljs-keyword"> :cond_35</span>  <br>   <span class="hljs-built_in"> const-string </span>p4, <span class="hljs-string">&quot;非会员&quot;</span>  <br><br><span class="hljs-keyword">    .line</span> 22  <br>   <span class="hljs-built_in"> check-cast </span>p4, <span class="hljs-class">Ljava/lang/CharSequence;</span>  <br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p1, p4&#125;, <span class="hljs-class">Landroid/widget/TextView;</span>-&gt;setText(<span class="hljs-class">Ljava/lang/CharSequence;</span>)V<br><br><span class="hljs-keyword">        .line</span> 28  <br>        //判断vipEndTime的时间戳是否小于系统时间<br>   <span class="hljs-keyword"> :goto_3c</span>  <br>   <span class="hljs-built_in"> new-instance </span>p1, <span class="hljs-class">Ljava/util/Date;</span>  <br><br>   <span class="hljs-built_in"> invoke-direct </span>&#123;p1&#125;, <span class="hljs-class">Ljava/util/Date;</span>-&gt;&lt;init&gt;()V  <br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p1&#125;, <span class="hljs-class">Ljava/util/Date;</span>-&gt;getTime()J  <br><br>   <span class="hljs-built_in"> move-result-wide </span>v0  <br><br><span class="hljs-keyword">    .line</span> 29  <br>   <span class="hljs-built_in"> new-instance </span>p1, <span class="hljs-class">Ljava/text/SimpleDateFormat;</span>  <br><br>   <span class="hljs-built_in"> const-string </span>p4, <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>  <br><br>   <span class="hljs-built_in"> invoke-direct </span>&#123;p1, p4&#125;, <span class="hljs-class">Ljava/text/SimpleDateFormat;</span>-&gt;&lt;init&gt;(<span class="hljs-class">Ljava/lang/String;</span>)V  <br><br><span class="hljs-keyword">    .line</span> 30  <br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p0&#125;, <span class="hljs-class">Lcom/zj/wuaipojie/ui/SmaliLearn;</span>-&gt;vipEndTime()J  <br><br>   <span class="hljs-built_in"> move-result-wide </span>v2  <br><br>   <span class="hljs-built_in"> cmp-long </span>p4, v2, v0  <br><br>   <span class="hljs-built_in"> if-gez </span>p4,<span class="hljs-keyword"> :cond_5c</span>  <br><br>   <span class="hljs-built_in"> const-string </span>p1, <span class="hljs-string">&quot;已过期&quot;</span>  <br><br><span class="hljs-keyword">    .line</span> 31  <br>   <span class="hljs-built_in"> check-cast </span>p1, <span class="hljs-class">Ljava/lang/CharSequence;</span>  <br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p2, p1&#125;, <span class="hljs-class">Landroid/widget/TextView;</span>-&gt;setText(<span class="hljs-class">Ljava/lang/CharSequence;</span>)V  <br><br>   <span class="hljs-built_in"> goto </span>:goto_6d  <br><br><span class="hljs-keyword">    .line</span> 33  <br>   <span class="hljs-keyword"> :cond_5c</span>  <br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p0&#125;, <span class="hljs-class">Lcom/zj/wuaipojie/ui/SmaliLearn;</span>-&gt;vipEndTime()J  <br><br>   <span class="hljs-built_in"> move-result-wide </span>v0  <br><br>   <span class="hljs-built_in"> invoke-static </span>&#123;v0, v1&#125;, <span class="hljs-class">Ljava/lang/Long;</span>-&gt;valueOf(J)<span class="hljs-class">Ljava/lang/Long;</span>  <br><br>   <span class="hljs-built_in"> move-result-object </span>p4  <br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p1, p4&#125;, <span class="hljs-class">Ljava/text/SimpleDateFormat;</span>-&gt;format(<span class="hljs-class">Ljava/lang/Object;</span>)<span class="hljs-class">Ljava/lang/String;</span>  <br><br>   <span class="hljs-built_in"> move-result-object </span>p1  <br><br>   <span class="hljs-built_in"> check-cast </span>p1, <span class="hljs-class">Ljava/lang/CharSequence;</span>  <br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p2, p1&#125;, <span class="hljs-class">Landroid/widget/TextView;</span>-&gt;setText(<span class="hljs-class">Ljava/lang/CharSequence;</span>)V  <br><br><span class="hljs-keyword">    .line</span> 35  <br>   <span class="hljs-keyword"> :goto_6d</span>  <br>   <span class="hljs-built_in"> iget </span>p0, p0, <span class="hljs-class">Lcom/zj/wuaipojie/ui/SmaliLearn;</span>-&gt;vip_coin:I  <br><br>   <span class="hljs-built_in"> if-eqz </span>p0,<span class="hljs-keyword"> :cond_74</span>  <br><br><span class="hljs-keyword">    .line</span> 36  <br>   <span class="hljs-built_in"> invoke-static </span>&#123;p0&#125;, <span class="hljs-class">Ljava/lang/String;</span>-&gt;valueOf(I)<span class="hljs-class">Ljava/lang/String;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>p0<br><br>   <span class="hljs-built_in"> check-cast </span>p0, <span class="hljs-class">Ljava/lang/CharSequence;</span><br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p3, p0&#125;, <span class="hljs-class">Landroid/widget/TextView;</span>-&gt;setText(<span class="hljs-class">Ljava/lang/CharSequence;</span>)V<br><br>   <span class="hljs-keyword"> :cond_74</span>  <br>   <span class="hljs-built_in"> return-void </span><span class="hljs-keyword"> </span><br><span class="hljs-keyword">.end method</span><br></code></pre></td></tr></table></figure><p>const&#x2F;4最大只允许存放4bit</p><p>const&#x2F;16最大值允许存放16bit，第一位（即最高位）默认为符号位</p><p>例： </p><table><thead><tr><th align="left">smali语法</th><th>寄存器赋值</th><th>解读</th></tr></thead><tbody><tr><td align="left">const&#x2F;4</td><td>v0,0x2</td><td>最大只允许存放半个字节数据，取值范围为-8~7</td></tr><tr><td align="left">const&#x2F;16</td><td>0xABCD</td><td>定义一个寄存器变量最大只允许存放16位数据，比如short类型数据 取值范围为-32768~32767</td></tr><tr><td align="left">const</td><td>v0,0xA</td><td>定义一个寄存器 ，最大只允许存放32位数据，比如int类型数据，将数字10赋值给v0 取值范围为-2147483647~2147483647</td></tr><tr><td align="left">const&#x2F;high 16</td><td></td><td>定义一个寄存器，最大只允许存放高16位数值，比如0xFFFF0000末四位补0存入高四位0xFFFF</td></tr></tbody></table><h4 id="Long型赋值"><a href="#Long型赋值" class="headerlink" title="Long型赋值"></a>Long型赋值</h4><table><thead><tr><th>smali语法</th><th>寄存器赋值</th><th></th></tr></thead><tbody><tr><td>const-wide</td><td>vx,lit32</td><td>表示将一个32位的常量储存到vx与vx+1两个寄存器中——即一个long类型数据</td></tr></tbody></table><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-keyword">.method</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> final</span> vipEndTime()J  <br><span class="hljs-keyword">    .registers</span> 3  <br><br>   <span class="hljs-built_in"> const-wide </span>v0, 0x1854460ef29L  <br><br>   <span class="hljs-built_in"> return-wide </span>v0<span class="hljs-keyword">  </span><br><span class="hljs-keyword">.end method</span><br><br></code></pre></td></tr></table></figure><p>会员到期时间就是2022年12月24日。那么1854460ef29L 怎么来的呢？也就是（2022年12月24日-1970年1月1日）×365天×24小时×60分钟×60秒×1000毫秒，转换成16进制就大概是那个数了</p><h4 id="变量赋值（正则）"><a href="#变量赋值（正则）" class="headerlink" title="变量赋值（正则）"></a>变量赋值（正则）</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs smali">   <span class="hljs-built_in"> iget </span>p0, p0, <span class="hljs-class">Lcom/zj/wuaipojie/ui/SmaliLearn;</span>-&gt;vip_coin:I  <br><span class="hljs-built_in"></span><br><span class="hljs-built_in">if-eqz </span>p0,<span class="hljs-keyword"> :cond_74</span>  <br><br><span class="hljs-keyword">.line</span> 36  <span class="hljs-built_in"></span><br><span class="hljs-built_in">invoke-static </span>&#123;p0&#125;, <span class="hljs-class">Ljava/lang/String;</span>-&gt;valueOf(I)<span class="hljs-class">Ljava/lang/String;</span><br><span class="hljs-built_in"></span><br><span class="hljs-built_in">move-result-object </span>p0<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">check-cast </span>p0, <span class="hljs-class">Ljava/lang/CharSequence;</span><br><span class="hljs-built_in"></span><br><span class="hljs-built_in">invoke-virtual </span>&#123;p3, p0&#125;, <span class="hljs-class">Landroid/widget/TextView;</span>-&gt;setText(<span class="hljs-class">Ljava/lang/CharSequence;</span>)V<br></code></pre></td></tr></table></figure><p>.*</p><p>这个表示任意寄存器，什么寄存器都能匹配，所以在正则查找的时候只需把寄存器替换为这个即可。</p><p>(.*)</p><p>多了个英文小括号，框哪个就是对哪个寄存器赋值。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">(.*) .*<span class="hljs-built_in"></span><br><span class="hljs-built_in">const/4 </span>$1 0x1<br></code></pre></td></tr></table></figure><p>$1 与上方(.*)一样，就是对其进行赋值</p><p>步骤：</p><p>找到相应正则表达式，点击右上角三个点，点击搜索，勾选正则表达式，然后将代码复制到外面进行发起新搜索，搜索类型选择代码，勾选下方正则表达式。</p><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><p>签名在不断地更新，要善用工具，拥抱开源！</p><p>通过系统自带地api去获取签名很容易被伪造，可以试试通过SVC地方式去获取（参考MT开源地方法）</p><p>隐式签名校验</p><p>有一些签名校验比较隐晦，在发现apk签名被修改后，会偷偷修改apk地部分功能，例如在某些多开定位软件中，会暗改ip的经纬网等，跟实际产生一定的偏差。</p><h2 id="Xposed"><a href="#Xposed" class="headerlink" title="Xposed"></a>Xposed</h2><h3 id="什么是Xposed"><a href="#什么是Xposed" class="headerlink" title="什么是Xposed"></a>什么是Xposed</h3><p>Xposed是一款可以在不修改APK的情况下影响程序运行的框架，基于它可以制作出许多功能强大的模块，且在功能不冲突的情况下同时运作。在这个框架下，我们可以编写并加载自己编写的插件APP，实现对目标apk的注入拦截等。</p><h3 id="Xposed原理"><a href="#Xposed原理" class="headerlink" title="Xposed原理"></a>Xposed原理</h3><p>用自己实现的<strong>app_process</strong>替换掉了系统原本提供的<strong>app_process</strong>，加载一个额外的jar包，入口从原来的： **com.android.internal.osZygoteInit.main()被替换成了： de.robv.android.xposed.XposedBridge.main()**，<br>创建的Zygote进程就变成Hook的Zygote进程了，从而完成对zygote进程及其创建的Dalvik&#x2F;ART虚拟机的劫持(zytoge注入)</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202307111255343.png" alt="133104isaigb22k2zv62sr"></p><h3 id="Xposed的发展及免root框架"><a href="#Xposed的发展及免root框架" class="headerlink" title="Xposed的发展及免root框架"></a>Xposed的发展及免root框架</h3><table><thead><tr><th align="left">名称</th><th align="left">地址</th><th align="left">支持版本</th><th align="left">是否免root</th></tr></thead><tbody><tr><td align="left">xposed</td><td align="left"><a href="https://github.com/rovo89/Xposed">https://github.com/rovo89/Xposed</a></td><td align="left">2.3-8.1</td><td align="left">否</td></tr><tr><td align="left">EDXposed</td><td align="left"><a href="https://github.com/ElderDrivers/EdXposed">https://github.com/ElderDrivers/EdXposed</a></td><td align="left">8.0-10</td><td align="left">否</td></tr><tr><td align="left">LSPosed</td><td align="left"><a href="https://github.com/LSPosed/LSPosed">https://github.com/LSPosed/LSPosed</a></td><td align="left">8.1-13</td><td align="left">否</td></tr><tr><td align="left">VirtualXposed</td><td align="left"><a href="https://github.com/android-hacker/VirtualXposed">https://github.com/android-hacker/VirtualXposed</a></td><td align="left">5.0-10.0</td><td align="left">是</td></tr><tr><td align="left">太极</td><td align="left"><a href="https://www.coolapk.com/apk/me.weishu.exp">https://www.coolapk.com/apk/me.weishu.exp</a></td><td align="left">5.0-13</td><td align="left">是</td></tr><tr><td align="left">两仪</td><td align="left"><a href="https://www.coolapk.com/apk/io.twoyi">https://www.coolapk.com/apk/io.twoyi</a></td><td align="left">8.1-13</td><td align="left">是</td></tr><tr><td align="left">天鉴</td><td align="left"><a href="https://github.com/Katana-Official/SPatch-Update">https://github.com/Katana-Official/SPatch-Update</a></td><td align="left">6-10</td><td align="left">是</td></tr></tbody></table><h3 id="Xposed的作用"><a href="#Xposed的作用" class="headerlink" title="Xposed的作用"></a>Xposed的作用</h3><p>1.修改app布局；<a href="https://github.com/kaisar945/Xposed-GodMode">上帝模式</a></p><p>2.劫持数据，修改参数值、返回值、主动调用等。例:微信防撤回、步数修改、一键新机</p><p><a href="https://github.com/kingsollyu/AppEnv">应用变量</a></p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202307111255327.png" alt="133113oae3sa35yvz3ewhc"></p><p>3.自动化操作，例：微信抢红包</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202307111255297.png" alt="133106lanoho2aazajhtjm"></p><p>学习项目：</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202307111255293.png" alt="133108uuea5dqd3dtdaqpp"></p><p><a href="https://www.xda-developers.com/best-xposed-modules/">2022 最好的Xposed模块: GravityBox, Pixelify, XPrivacyLua</a></p><p><a href="https://github.com/svengong/xcubebase">基于xposed的frida持久化方案</a></p><p><a href="https://github.com/Lstaynight/xposed-dy">基于Xposed的抖音爬虫，抖音风控后自动一键新机，模拟一个全新的运行环境</a></p><p><a href="https://github.com/monkeylord/XServer">A Xposed Module for Android Penetration Test, with NanoHttpd.</a></p><p><a href="https://github.com/GravityBox/GravityBox">GravityBox</a></p><p><a href="https://github.com/Xposed-Modules-Repo">Xposed-Modules-Repo</a></p><p><a href="https://github.com/ferredoxin/QNotified">一个旨在使QQ变得更好用的开源Xposed模块</a></p><p><a href="https://github.com/nining377/dolby_beta">杜比大喇叭</a></p><p><a href="https://github.com/shatyuka/Zhiliao">知乎去广告Xposed模块</a></p><p><a href="https://github.com/yujincheng08/BiliRoaming">哔哩漫游</a></p><p><a href="https://github.com/Mocha-L/QuJing">曲境</a></p><p><a href="https://github.com/monkeylord/XposedTemplateForAS">自动化创建Xposed模块及钩子，让Xposed模块编写时只需关注钩子实现</a></p><h3 id="Xposed环境配置"><a href="#Xposed环境配置" class="headerlink" title="Xposed环境配置"></a>Xposed环境配置</h3><h4 id="ubuntu命令"><a href="#ubuntu命令" class="headerlink" title="ubuntu命令"></a>ubuntu命令</h4><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202307111255330.png" alt="144630re0c0n2snefklflf"></p><h4 id="ubuntu连接雷电模拟器"><a href="#ubuntu连接雷电模拟器" class="headerlink" title="ubuntu连接雷电模拟器"></a>ubuntu连接雷电模拟器</h4><p><a href="https://www.cnblogs.com/voyage1969/p/14876449.html">https://www.cnblogs.com/voyage1969/p/14876449.html</a></p><h4 id="Xposed框架配置"><a href="#Xposed框架配置" class="headerlink" title="Xposed框架配置"></a>Xposed框架配置</h4><p>1.Android Studio创建新项目，选择No Activity，语言选择java，然后Finish<br>2.将下载的xposedBridgeApi.jar包拖进app文件夹下的libs文件夹中<br>3.右击jar包，选择add as library<br>4.修改app文件夹下的src文件夹下的main文件夹下的AndroidManifest.xml文件配置,先删除&lt;application 代码末端的&#x2F;&gt;符号，然后添加以个&gt;符号（注意符号都是英文状态下的）</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202307111255045.png" alt="QQ截图20230423150012"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 是否是xposed模块，xposed根据这个来判断是否是模块 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;xposedmodule&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 模块描述，显示在xposed模块列表那里第二行 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;xposeddescription&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;这是一个Xposed模块&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 最低xposed版本号(lib文件名可知) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;xposedminversion&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;89&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>5.修改build.gradle,将此处修改为compileOnly 默认的是implementation</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">implementation 使用该方式依赖的库将会参与编译和打包<br>compileOnly 只在编译时有效，不会参与打包<br></code></pre></td></tr></table></figure><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202307111255126.png" alt="QQ截图20230423172352"></p><p>6.app目录下新建–&gt;Folder–&gt;Assets Folder，创建xposed_init(不要后缀名):只有一行代码，就是说明入口类（需要填写模块的入口，先建Hook类），入口声明方式是Hook类的包名加类名<br>7.在app文件夹下的src文件夹下的main文件夹下的java文件夹下的包中右键新建Hook类，实现IXposedHookLoadPackage接口，然后在handleLoadPackage函数内编写Hook逻辑（复制下列代码到Hook类中，实现接口）将原来的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hook</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>覆盖掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage; <br><span class="hljs-keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hook</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IXposedHookLoadPackage</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleLoadPackage</span><span class="hljs-params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>继承了IXposedHookLoadPackag便拥有了hook的能力</p><h3 id="Xposed常用API"><a href="#Xposed常用API" class="headerlink" title="Xposed常用API"></a>Xposed常用API</h3><p><a href="https://github.com/fankes/YukiHookAPI">An efficient Hook API and Xposed Module solution built in Kotlin</a></p><h4 id="Hook普通方法步骤"><a href="#Hook普通方法步骤" class="headerlink" title="Hook普通方法步骤"></a>Hook普通方法步骤</h4><p>先对要Hook的包名进行一个判断，只对我们想Hook的包进行Hook。</p><h5 id="包名判断（第一步）"><a href="#包名判断（第一步）" class="headerlink" title="包名判断（第一步）"></a>包名判断（第一步）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(!loadPackageParam.packageName.equals(<span class="hljs-string">&quot;包名&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><h5 id="复制为xposed片段"><a href="#复制为xposed片段" class="headerlink" title="复制为xposed片段"></a>复制为xposed片段</h5><p>找到要Hook的普通方法，右键“复制为xposed片段”，直接粘贴即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>, loadPackageParam.classLoader, <span class="hljs-string">&quot;a&quot;</span>, java.lang.String.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>            &#125;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><p>其中a为方法名，com.zj.wuaipojie.Demo为包名，其值根据实际情况填写。</p><p>传入的第三个参数java.lang.String.class是方法中参数的类型，去除掉java.lang只保留后面即可</p><h5 id="输出日志"><a href="#输出日志" class="headerlink" title="输出日志"></a>输出日志</h5><p>方法一：</p><p>使用xposedBridge进行日志输出</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedBridge.log(param.args[<span class="hljs-number">0</span>].toString());<br></code></pre></td></tr></table></figure><p>使用该方法，对日志进行输出</p><p>方法二：</p><p>使用Android自带的日志输出函数 Log.d或者Log.e 传入的第一个参数为日志的标签，第二个传入参数param.args[0].toString()</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Log.e(<span class="hljs-string">&quot;zj2595&quot;</span>,param.args[<span class="hljs-number">0</span>].toString());<br></code></pre></td></tr></table></figure><h5 id="修改参数"><a href="#修改参数" class="headerlink" title="修改参数"></a>修改参数</h5><p>先新建一个字符串作为要修改的参数然后对param进行赋值</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String a=<span class="hljs-string">&quot;ptffffff&quot;</span>;<br>param.args[<span class="hljs-number">0</span>]=a;<br></code></pre></td></tr></table></figure><h4 id="打印Hook后的日志"><a href="#打印Hook后的日志" class="headerlink" title="打印Hook后的日志"></a>打印Hook后的日志</h4><p>使用上述的输出日志的方法对Hook后的日志进行输出</p><h5 id="打开Lsp，找到相应模块并打开，勾选应用"><a href="#打开Lsp，找到相应模块并打开，勾选应用" class="headerlink" title="打开Lsp，找到相应模块并打开，勾选应用"></a>打开Lsp，找到相应模块并打开，勾选应用</h5><h4 id="Hook普通方法"><a href="#Hook普通方法" class="headerlink" title="Hook普通方法"></a>Hook普通方法</h4><h6 id="修改返回值"><a href="#修改返回值" class="headerlink" title="修改返回值"></a>修改返回值</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>, loadPackageParam.classLoader, <span class="hljs-string">&quot;a&quot;</span>, String.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>        param.setResult(<span class="hljs-string">&quot;999&quot;</span>);<br>    &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><h6 id="修改参数-1"><a href="#修改参数-1" class="headerlink" title="修改参数"></a>修改参数</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<span class="hljs-string">&quot;类名&quot;</span>, loadPackageParam.classLoader, <span class="hljs-string">&quot;a&quot;</span>, String.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;pt&quot;</span>;<br>        param.args[<span class="hljs-number">0</span>] = a;    &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><h4 id="Hook复杂-amp-自定义参数"><a href="#Hook复杂-amp-自定义参数" class="headerlink" title="Hook复杂&amp;自定义参数"></a>Hook复杂&amp;自定义参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> loadPackageParam.classLoader.loadClass(<span class="hljs-string">&quot;类名&quot;</span>);<br>XposedBridge.hookAllMethods(a, <span class="hljs-string">&quot;方法名&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;pt&quot;</span>;<br>        param.args[<span class="hljs-number">0</span>] = a;<br>        &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><h4 id="Hook替换参数"><a href="#Hook替换参数" class="headerlink" title="Hook替换参数"></a>Hook替换参数</h4><p>该方法适用于某些函数会弹窗，可以用这个方法给置空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> loadPackageParam.classLoader.loadClass(<span class="hljs-string">&quot;类名&quot;</span>)；<br>XposedBridge.hookAllMethods(a,<span class="hljs-string">&quot;函数名&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodReplacement</span>() &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">replaceHookedMethod</span><span class="hljs-params">(MethodHookParam methodHookParam)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;  <br>    &#125;  <br>&#125;);<br><br></code></pre></td></tr></table></figure><h4 id="Hook加固通杀"><a href="#Hook加固通杀" class="headerlink" title="Hook加固通杀"></a>Hook加固通杀</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(Application.class, <span class="hljs-string">&quot;attach&quot;</span>, Context.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (Context) param.args[<span class="hljs-number">0</span>];  <br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> context.getClassLoader();<br>        <span class="hljs-comment">//hook逻辑在这里面写  </span><br>    &#125;  <br>&#125;);<br><br></code></pre></td></tr></table></figure><p>先拿到程序的classload，然后再进行正常的Hook</p><h4 id="Hook变量"><a href="#Hook变量" class="headerlink" title="Hook变量"></a>Hook变量</h4><p>静态变量与实例变量：</p><ul><li>静态变量（static）：类被初始化，同步进行初始化</li><li>非静态变量：类被实例化（产生一个对象时），进行初始化</li></ul><p>实例变量与静态变量的区别在于变量有无static修饰，如果有那就是静态变量，如若没有那就是实例变量</p><h5 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">&quot;类名&quot;</span>, loadPackageParam.classLoader);<br>        XposedHelpers.setStaticIntField(clazz, <span class="hljs-string">&quot;变量名&quot;</span>, <span class="hljs-number">999</span>);<br></code></pre></td></tr></table></figure><p>先传入classloader，然后再传入变量的字节码</p><p>如果要hook的变量时string型的使用setStaticObjectField方法，因为一切都是对象。</p><h5 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">&quot;类名&quot;</span>, classLoader);  <br>XposedBridge.hookAllConstructors(clazz, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;  <br>     <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-built_in">super</span>.afterHookedMethod(param);  <br>        <span class="hljs-comment">//param.thisObject获取当前所属的对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">ob</span> <span class="hljs-operator">=</span> param.thisObject;  <br>        XposedHelpers.setIntField(ob,<span class="hljs-string">&quot;变量名&quot;</span>,<span class="hljs-number">9999</span>);  <br>    &#125;  <br>&#125;);<br></code></pre></td></tr></table></figure><p>不论是实例变量还是静态变量都要先获得变量的字节码，传入类名变量所在类类名。</p><h4 id="Hook构造函数"><a href="#Hook构造函数" class="headerlink" title="Hook构造函数"></a>Hook构造函数</h4><p>在jadx中右键构造函数名，复制为xposed片段</p><h5 id="无参数构造函数"><a href="#无参数构造函数" class="headerlink" title="无参数构造函数"></a>无参数构造函数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookConstructor(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>, classLoader, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="有参数构造函数"><a href="#有参数构造函数" class="headerlink" title="有参数构造函数"></a>有参数构造函数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookConstructor(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>, classLoader, String.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>    &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><h3 id="Hook-multiDex方法"><a href="#Hook-multiDex方法" class="headerlink" title="Hook multiDex方法"></a>Hook multiDex方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(Application.class, <span class="hljs-string">&quot;attach&quot;</span>, Context.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        ClassLoader cl= ((Context)param.args[<span class="hljs-number">0</span>]).getClassLoader();  <br>        Class&lt;?&gt; hookclass=<span class="hljs-literal">null</span>;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            hookclass=cl.loadClass(<span class="hljs-string">&quot;类名&quot;</span>);  <br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;  <br>            Log.e(<span class="hljs-string">&quot;zj2595&quot;</span>,<span class="hljs-string">&quot;未找到类&quot;</span>,e);  <br>            <span class="hljs-keyword">return</span>;        <br>        &#125;  <br>        XposedHelpers.findAndHookMethod(hookclass, <span class="hljs-string">&quot;方法名&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;  <br>            <span class="hljs-meta">@Override</span>  <br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>            &#125;        <br>        &#125;);  <br>    &#125;  <br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="主动调用"><a href="#主动调用" class="headerlink" title="主动调用"></a>主动调用</h4><p>就是去主动调用一个方法使其输出内容。就是该方法在程序的代码中是没有被调用的，我们通过主动调用的方式去调用该函数</p><h5 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">&quot;类名&quot;</span>,lpparam.classLoader);<br>XposedHelpers.callStaticMethod(clazz,<span class="hljs-string">&quot;方法名&quot;</span>,参数(非必须));<br></code></pre></td></tr></table></figure><p>主要看程序代码中有无参数</p><h5 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">&quot;类名&quot;</span>,lpparam.classLoader);<br>XposedHelpers.callMethod(clazz.newInstance(),<span class="hljs-string">&quot;方法名&quot;</span>,参数(非必须));<br></code></pre></td></tr></table></figure><p>还是一样的，先获得方法的字节码，然后对方法进行一个实例化</p><h4 id="Hook内部类"><a href="#Hook内部类" class="headerlink" title="Hook内部类"></a>Hook内部类</h4><p>内部类:类里还有一个类class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<span class="hljs-string">&quot;原包名$内部类类名&quot;</span>, loadPackageParam.classLoader, <span class="hljs-string">&quot;内部类方法名&quot;</span>,String.class,  <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-built_in">super</span>.beforeHookedMethod(param);  <br>    &#125;  <br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="反射大法"><a href="#反射大法" class="headerlink" title="反射大法"></a>反射大法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">&quot;类名&quot;</span>, lpparam.classLoader);<br>XposedHelpers.findAndHookMethod(<span class="hljs-string">&quot;类名$内部类类名&quot;</span>, lpparam.classLoader, <span class="hljs-string">&quot;内部类方法名&quot;</span>,String.class,  <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-built_in">super</span>.beforeHookedMethod(param);  <br>        <span class="hljs-comment">//第一步找到类</span><br>        <span class="hljs-comment">//找到方法，如果是私有方法就要setAccessible设置访问权限</span><br>        <span class="hljs-comment">//invoke主动调用或者set修改值(变量) </span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">democlass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;类名&quot;</span>,<span class="hljs-literal">false</span>,lpparam.classLoader);  <br>        <span class="hljs-type">Method</span> <span class="hljs-variable">demomethod</span> <span class="hljs-operator">=</span> democlass.getDeclaredMethod(<span class="hljs-string">&quot;方法名&quot;</span>);  <br>        demomethod.setAccessible(<span class="hljs-literal">true</span>);  <br>        demomethod.invoke(clazz.newInstance());  <br>    &#125;  <br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="遍历所有类下的所有方法"><a href="#遍历所有类下的所有方法" class="headerlink" title="遍历所有类下的所有方法"></a>遍历所有类下的所有方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(ClassLoader.class, <span class="hljs-string">&quot;loadClass&quot;</span>, String.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-built_in">super</span>.afterHookedMethod(param);  <br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> (Class) param.getResult();  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">clazzName</span> <span class="hljs-operator">=</span> clazz.getName();  <br>        <span class="hljs-comment">//排除非包名的类  </span><br>        <span class="hljs-keyword">if</span>(clazzName.contains(<span class="hljs-string">&quot;com.zj.wuaipojie&quot;</span>))&#123;  <br>            Method[] mds = clazz.getDeclaredMethods();  <br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i&lt;mds.length;i++)&#123;  <br>                <span class="hljs-keyword">final</span> <span class="hljs-type">Method</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> mds[i];  <br>                <span class="hljs-type">int</span> <span class="hljs-variable">mod</span> <span class="hljs-operator">=</span> mds[i].getModifiers();  <br>                <span class="hljs-comment">//去除抽象、native、接口方法  </span><br>                <span class="hljs-keyword">if</span>(!Modifier.isAbstract(mod)  <br>                    &amp;&amp; !Modifier.isNative(mod)  <br>                    &amp;&amp;!Modifier.isAbstract(mod))&#123;  <br>                    XposedBridge.hookMethod(mds[i], <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;  <br>                        <span class="hljs-meta">@Override</span>  <br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>                            <span class="hljs-built_in">super</span>.beforeHookedMethod(param);  <br>                            Log.d(<span class="hljs-string">&quot;zj2595&quot;</span>,md.toString());  <br>                        &#125;  <br>                    &#125;);  <br>                &#125;  <br><br>           &#125;  <br>        &#125;  <br><br>    &#125;  <br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="Xposed妙用"><a href="#Xposed妙用" class="headerlink" title="Xposed妙用"></a>Xposed妙用</h4><h5 id="字符串赋值定位"><a href="#字符串赋值定位" class="headerlink" title="字符串赋值定位"></a>字符串赋值定位</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<span class="hljs-string">&quot;android.widget.TextView&quot;</span>, lpparam.classLoader, <span class="hljs-string">&quot;setText&quot;</span>, CharSequence.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-built_in">super</span>.beforeHookedMethod(param);  <br>        Log.d(<span class="hljs-string">&quot;zj2595&quot;</span>,param.args[<span class="hljs-number">0</span>].toString());  <br>                <span class="hljs-keyword">if</span>(param.args[<span class="hljs-number">0</span>].equals(<span class="hljs-string">&quot;已过期&quot;</span>))&#123;  <br>                    printStackTrace();  <br>                &#125;<br>    &#125;  <br>&#125;);<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printStackTrace</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-type">Throwable</span> <span class="hljs-variable">ex</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>();  <br>    StackTraceElement[] stackElements = ex.getStackTrace();  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; stackElements.length; i++) &#123;  <br>        <span class="hljs-type">StackTraceElement</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> stackElements[i];  <br>        Log.d(<span class="hljs-string">&quot;zj2595&quot;</span>,<span class="hljs-string">&quot;at &quot;</span> + element.getClassName() + <span class="hljs-string">&quot;.&quot;</span> + element.getMethodName() + <span class="hljs-string">&quot;(&quot;</span> + element.getFileName() + <span class="hljs-string">&quot;:&quot;</span> + element.getLineNumber() + <span class="hljs-string">&quot;)&quot;</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="点击事件监听"><a href="#点击事件监听" class="headerlink" title="点击事件监听"></a>点击事件监听</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">&quot;android.view.View&quot;</span>, lpparam.classLoader);<br>XposedBridge.hookAllMethods(clazz, <span class="hljs-string">&quot;performClick&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-built_in">super</span>.afterHookedMethod(param);  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">listenerInfoObject</span> <span class="hljs-operator">=</span> XposedHelpers.getObjectField(param.thisObject, <span class="hljs-string">&quot;mListenerInfo&quot;</span>);  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">mOnClickListenerObject</span> <span class="hljs-operator">=</span> XposedHelpers.getObjectField(listenerInfoObject, <span class="hljs-string">&quot;mOnClickListener&quot;</span>);  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">callbackType</span> <span class="hljs-operator">=</span> mOnClickListenerObject.getClass().getName();  <br>        Log.d(<span class="hljs-string">&quot;zj2595&quot;</span>,callbackType);  <br>    &#125;  <br>&#125;);<br></code></pre></td></tr></table></figure><p>应用场景：程序的某个功能点击后会触发某个场景，就可以通过点击事件的监听定位校验的堆栈</p><h5 id="改写布局"><a href="#改写布局" class="headerlink" title="改写布局"></a>改写布局</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<span class="hljs-string">&quot;类名&quot;</span>, lpparam.classLoader,  <br>        <span class="hljs-string">&quot;方法名&quot;</span>, Bundle.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-built_in">super</span>.afterHookedMethod(param);  <br>        <span class="hljs-type">View</span> <span class="hljs-variable">img</span> <span class="hljs-operator">=</span> (View)XposedHelpers.callMethod(param.thisObject,  <br>                <span class="hljs-string">&quot;控件方法名&quot;</span>, 控件ID（十六进制值）);  <br>        img.setVisibility(View.GONE);  <br><br>    &#125;  <br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="Xposed模块patch"><a href="#Xposed模块patch" class="headerlink" title="Xposed模块patch"></a>Xposed模块patch</h4><p><a href="https://github.com/LSPosed/LSPatch">LSPatch</a></p><p>![204745jum97hejm7n23ukd](<a href="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202307111255002.png">https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202307111255002.png</a></p><p>PS:最低支持安卓9</p><h4 id="Xposed快速Hook"><a href="#Xposed快速Hook" class="headerlink" title="Xposed快速Hook"></a>Xposed快速Hook</h4><p><a href="https://github.com/littleWhiteDuck/SimpleHook">SimpleHook</a></p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202307111255084.png" alt="204748eo1yog0fg030f503"></p><p><a href="https://github.com/Xposed-Modules-Repo/me.jsonet.jshook">jshook</a></p><h4 id="Xpsoed源码"><a href="#Xpsoed源码" class="headerlink" title="Xpsoed源码"></a>Xpsoed源码</h4><p><a href="https://www.52pojie.cn/thread-1149210-1-1.html">XPOSED魔改一：获取特征</a></p><p><a href="https://www.52pojie.cn/thread-1694093-1-1.html">Lsposed 技术原理探讨 &amp;&amp; 基本安装使用</a></p><p>[<a href="https://bbs.kanxue.com/thread-269616.htm#msg_header_h2_0">原创]源码编译（2）——Xopsed源码编译详解</a></p><h4 id="xposed的应用教程"><a href="#xposed的应用教程" class="headerlink" title="xposed的应用教程"></a>xposed的应用教程</h4><p>首先我们需要将我们写的项目编译成app，点击菜单栏中的Build中的Generate Signed Bundle or APK ，选择APK然后下一步，如果是首次先创建一个签名信息文件，生成一个jks文件，点击下一步，然后选择release，在app文件夹下会生成一个release文件夹，在该文件夹下会生成一个apk文件，然后安装到模拟器中，安装完成后在模拟器中的LSPosed中启动该模块。</p><p>打开LSPatch，选择下方的管理模块，点击加号，找到要进行Hook的apk包，然后点击</p><p>已安装的应用，然后选择便携模式（该模式可以将模块内置到原APP中），然后点击嵌入模块，选择要嵌入的模块，下面的几个选项都可以进行选择（视情况而定），然后点击开始修补，然后进行手动安装应用，选择带有lspacth字样的apk包进行安装</p>]]></content>
    
    
    <categories>
      
      <category>Android逆向知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android 逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Smali</title>
    <link href="/2023/07/11/Smali/"/>
    <url>/2023/07/11/Smali/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Smali语法深入"><a href="#Android-Smali语法深入" class="headerlink" title="Android Smali语法深入"></a>Android Smali语法深入</h1><h2 id="smali文件结构"><a href="#smali文件结构" class="headerlink" title="smali文件结构"></a>smali文件结构</h2><p>下面的代码是通过apktool反编译.apk文件获取的，在这里先对smli语法格式进行介绍</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-keyword">.class</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> abstract</span> <span class="hljs-class">Lcom/happy/learnsmali/BaseActivity;</span><br><span class="hljs-keyword">.super</span> <span class="hljs-class">Landroidx/appcompat/app/AppCompatActivity;</span><br><span class="hljs-keyword">.source</span> <span class="hljs-string">&quot;BaseActivity.kt&quot;</span><br> <br><span class="hljs-comment"># interfaces</span><br><span class="hljs-keyword">.implements</span> <span class="hljs-class">Lcom/happy/learnsmali/action/ActivityAction;</span><br><span class="hljs-keyword">.implements</span> <span class="hljs-class">Lcom/happy/learnsmali/action/ClickAction;</span><br><span class="hljs-keyword">.implements</span> <span class="hljs-class">Lcom/happy/learnsmali/action/HandlerAction;</span><br><span class="hljs-keyword">.implements</span> <span class="hljs-class">Lcom/happy/learnsmali/action/BundleAction;</span><br><span class="hljs-keyword">.implements</span> <span class="hljs-class">Lcom/happy/learnsmali/action/KeyboardAction;</span><br> <br> <br><span class="hljs-comment"># annotations</span><br><span class="hljs-keyword">.annotation</span><span class="hljs-keyword"> system</span> <span class="hljs-class">Ldalvik/annotation/MemberClasses;</span><br>    value = &#123;<br>        <span class="hljs-class">Lcom/happy/learnsmali/BaseActivity$Companion;</span>,<br>        <span class="hljs-class">Lcom/happy/learnsmali/BaseActivity$OnActivityCallback;</span><br>    &#125;<span class="hljs-keyword"></span><br><span class="hljs-keyword">.end annotation</span><br> <br><span class="hljs-keyword">.annotation</span><span class="hljs-keyword"> system</span> <span class="hljs-class">Ldalvik/annotation/SourceDebugExtension;</span><br>    value = <span class="hljs-string">&quot;SMAP\nBaseActivity.kt\nKotlin\n*S Kotlin\n*F\n+ 1 BaseActivity.kt\ncom/happy/learnsmali/BaseActivity\n+ 2 fake.kt\nkotlin/jvm/internal/FakeKt\n*L\n1#1,179:1\n1#2:180\n*E\n&quot;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">.end annotation</span><br> <br><span class="hljs-comment"># static fields</span><br><span class="hljs-keyword">.field</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span> Companion:<span class="hljs-class">Lcom/happy/learnsmali/BaseActivity$Companion;</span><br> <br><span class="hljs-keyword">.field</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span> RESULT_ERROR:I = -0x2<br> <br> <br><span class="hljs-comment"># instance fields</span><br><span class="hljs-keyword">.field</span><span class="hljs-keyword"> private</span><span class="hljs-keyword"> final</span> activityCallbacks$delegate:<span class="hljs-class">Lkotlin/Lazy;</span><br> <br> <br><span class="hljs-comment"># direct methods</span><br><span class="hljs-keyword">.method</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> synthetic</span> $r8$lambda$mAxgPA6JBXhjuhBfNvUeqmKUmlk(<span class="hljs-class">Lcom/happy/learnsmali/BaseActivity;</span><span class="hljs-class">Landroid/view/View;</span>)V<br><span class="hljs-keyword">    .locals</span> 0<br> <br>   <span class="hljs-built_in"> invoke-static </span>&#123;p0, p1&#125;, <span class="hljs-class">Lcom/happy/learnsmali/BaseActivity;</span>-&gt;initSoftKeyboard$lambda-0(<span class="hljs-class">Lcom/happy/learnsmali/BaseActivity;</span><span class="hljs-class">Landroid/view/View;</span>)V<br> <br>   <span class="hljs-built_in"> return-void</span><br><span class="hljs-built_in"></span><span class="hljs-keyword">.end method</span><br> <br><span class="hljs-keyword">.method</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> constructor</span> &lt;clinit&gt;()V<br><span class="hljs-keyword">    .locals</span> 2<br> <br>   <span class="hljs-built_in"> new-instance </span>v0, <span class="hljs-class">Lcom/happy/learnsmali/BaseActivity$Companion;</span><br> <br>   <span class="hljs-built_in"> const/4 </span>v1, 0x0<br> <br>   <span class="hljs-built_in"> invoke-direct </span>&#123;v0, v1&#125;, <span class="hljs-class">Lcom/happy/learnsmali/BaseActivity$Companion;</span>-&gt;&lt;init&gt;(<span class="hljs-class">Lkotlin/jvm/internal/DefaultConstructorMarker;</span>)V<br> <br>   <span class="hljs-built_in"> sput-object </span>v0, <span class="hljs-class">Lcom/happy/learnsmali/BaseActivity;</span>-&gt;Companion:<span class="hljs-class">Lcom/happy/learnsmali/BaseActivity$Companion;</span><br> <br>   <span class="hljs-built_in"> return-void</span><br><span class="hljs-built_in"></span><span class="hljs-keyword">.end method</span><br> <br><span class="hljs-keyword">.method</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> constructor</span> &lt;init&gt;()V<br>    // ...<span class="hljs-keyword"></span><br><span class="hljs-keyword">.end method</span><br></code></pre></td></tr></table></figure><p>用以上代码作为演示</p><h2 id="smali中的继承、接口、包信息"><a href="#smali中的继承、接口、包信息" class="headerlink" title="smali中的继承、接口、包信息"></a>smali中的继承、接口、包信息</h2><p>先分析前几行代码：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-keyword">.class</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> abstract</span> <span class="hljs-class">Lcom/happy/learnsmali/BaseActivity;</span> // .class 表示类路径 包名+类名<br><span class="hljs-keyword">.super</span> <span class="hljs-class">Landroidx/appcompat/app/AppCompatActivity;</span>           // .super 表示父类的路径<br><span class="hljs-keyword">.source</span> <span class="hljs-string">&quot;BaseActivity.kt&quot;</span>                                   // 表示源码文件名<br> <br><span class="hljs-comment"># interfaces</span><br><span class="hljs-keyword">.implements</span> <span class="hljs-class">Lcom/happy/learnsmali/action/ActivityAction;</span><br><span class="hljs-keyword">.implements</span> <span class="hljs-class">Lcom/happy/learnsmali/action/ClickAction;</span><br><span class="hljs-keyword">.implements</span> <span class="hljs-class">Lcom/happy/learnsmali/action/HandlerAction;</span><br><span class="hljs-keyword">.implements</span> <span class="hljs-class">Lcom/happy/learnsmali/action/BundleAction;</span><br><span class="hljs-keyword">.implements</span> <span class="hljs-class">Lcom/happy/learnsmali/action/KeyboardAction;</span><br> <br> <br><span class="hljs-comment"># annotations</span><br><span class="hljs-keyword">.annotation</span><span class="hljs-keyword"> system</span> <span class="hljs-class">Ldalvik/annotation/MemberClasses;</span><br>    value = &#123;<br>        <span class="hljs-class">Lcom/happy/learnsmali/BaseActivity$Companion;</span>,<br>        <span class="hljs-class">Lcom/happy/learnsmali/BaseActivity$OnActivityCallback;</span><br>    &#125;<span class="hljs-keyword"></span><br><span class="hljs-keyword">.end annotation</span><br></code></pre></td></tr></table></figure><p>1-3行定义基本信息：</p><p>表示由源文件BaseActivity.kt反编译得到的smali文件（第三行），文件路径位于 com&#x2F;happy&#x2F;learnsmali&#x2F;（第二行），继承于 androidx&#x2F;appcompat&#x2F;app&#x2F;AppCompatActivity（第三行）。</p><p>5-9行定义接口信息：表示 BaseActivity 类实现的接口类有：</p><ul><li>com&#x2F;happy&#x2F;learnsmali&#x2F;action&#x2F;ActivityAction</li><li>com&#x2F;happy&#x2F;learnsmali&#x2F;action&#x2F;ClickAction</li><li>com&#x2F;happy&#x2F;learnsmali&#x2F;action&#x2F;HandlerAction</li><li>com&#x2F;happy&#x2F;learnsmali&#x2F;action&#x2F;BundleAction</li><li>com&#x2F;happy&#x2F;learnsmali&#x2F;action&#x2F;KeyboardAction</li></ul><p>11-16行定义内部类：表示 BaseActivity 类有两个内部类 – Companion 和 OnActivityCallback。</p><p>构造出java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span><br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ActivityAction</span>, ClickAction, HandlerAction, BundleAction, KeyboardAction &#123;<br> <br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Companion</span> &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br> <br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">OnActivityCallback</span> &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其他方法</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-comment"># virtual methods   //Representation is a virtual method</span><br><span class="hljs-keyword">.method</span><span class="hljs-keyword"> protected</span> onCreate(<span class="hljs-class">Landroid/os/Bundle;</span>)V<br><span class="hljs-keyword">    .locals</span> 1<br><span class="hljs-keyword">    .param</span> p1, <span class="hljs-string">&quot;savedInstanceState&quot;</span>    <span class="hljs-comment"># Landroid/os/Bundle;</span><br> <br><span class="hljs-keyword">    .line</span> 10<br>   <span class="hljs-built_in"> invoke-super </span>&#123;p0, p1&#125;, <span class="hljs-class">Landroid/app/Activity;</span>-&gt;onCreate(<span class="hljs-class">Landroid/os/Bundle;</span>)V<br> <br><span class="hljs-keyword">    .line</span> 11<br>   <span class="hljs-built_in"> const/high16 </span>v0, 0x7f050000<br> <br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p0, v0&#125;, <span class="hljs-class">Lcom/justart/samlidemo/MainActivity;</span>-&gt;setContentView(I)V<br> <br><span class="hljs-keyword">    .line</span> 12<br>   <span class="hljs-built_in"> return-void</span><br><span class="hljs-built_in"></span><span class="hljs-keyword">.end method</span><br></code></pre></td></tr></table></figure><ul><li>方法以 .method 开始，以 .end method 结束；</li><li>位于第一行的最后 V 表示返回类型为 void；</li><li>方法参数 Landroid&#x2F;os&#x2F;Bundle; 表示方法 onCreate() 的参数为 Bundle 类型；</li><li>. param 表示方法的参数名称为 savedInstanceState;</li><li>最后 return-void 表示返回的值类型为 void；</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>byte：B</li><li>char：C</li><li>double：D</li><li>float：F</li><li>int：I</li><li>long：J</li><li>short：S</li><li>void：V</li><li>boolean：Z</li><li>array：[XXX</li><li>Object：Lxxx&#x2F;yyy</li></ul><p>相信有 JNI 基础会对上面的数据类型好明白，这里解析上面的最后两项：</p><p>array：[XXX</p><p>在基础类型前加 [ 表示数组类型，例如 int 数组和 byte 数组为 [I、[B。</p><p>Object：Lxxx&#x2F;yyy</p><p>以 L 开头的类型表示为对象，如 String 对象对应表示为 Ljava&#x2F;lang&#x2F;String; (对象类型需要后面跟分号)，其中 java&#x2F;lang 表示 java.lang 包，String 表示该包路径下的一个对象。</p><p>这里可能会有童鞋有疑惑，如果类是使用 Ljava&#x2F;lang&#x2F;String; 来表示，那么内部类又应该在 smali 中如何定义呢？可能使用过 Java 反射的童鞋脑海里面闪过 $ 符号。是的，在 smali 语法中同样是使用 Ljava&#x2F;lang&#x2F;String$xxx; 来表示 xxx 是 String 类的内部类。</p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>Dalvik VM与JVM最大的区别之一就是Dalvik VM是基于寄存器的。基于寄存器有点类似于汇编语言，通过寄存器来存储数据、传递数据。在smali中本地寄存器用v开头的字母+数字来表示，如v0、v1、v2……，而参数寄存器则使用p开头+数字来表示，如p1、p2、p3……需要注意的是，p0参数寄存器不一定是表示第一个参数，在非static函数中，p0表示this，p1则表示第一个参数，p2表示函数中的第二个参数。而在static函数中p0则对应第一个参数（因为Java的static方法没有对象的概念）。本地寄存器没有限制，理论上是可以任意使用的。</p><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-comment"># static field</span><br><span class="hljs-keyword">.field</span><span class="hljs-keyword"> private</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span> PREFS_INSTALLATION_ID:<span class="hljs-class">Ljava/lang/String;</span> = <span class="hljs-string">&quot;installationId&quot;</span><br>//...<br> <br><span class="hljs-comment"># instance field</span><br><span class="hljs-keyword">.field</span><span class="hljs-keyword"> private</span> _activityPackageName:<span class="hljs-class">Ljava/lang/String;</span><br></code></pre></td></tr></table></figure><p>上面所定义的static field和instance field 均为成员变量，格式是：</p><p>.field pubilc&#x2F;private [static] [final] varName:&lt;类型&gt;</p><p>static field和instance field 虽然均为成员变量，但它们还是存在区别。最明显的区别就是是否与对象相关，static field 是类层面的概念，而instance field 是对象层面的概念。</p><p>出现成员变量就意味着有变量的赋值与取值。在smali语法中，取值指令有：iget、sget、iget-boolean、sget-boolean、iget-object、sget-object等，而赋值指令有：iput、sput、iput-boolean、sput-boolean、iput-object、sput-object等。</p><ul><li>iget &#x2F; iput 分别表示instance field成员变量的取值和赋值；</li><li>sget &#x2F; sput 分别表示static field 成员变量的取值和赋值；</li><li>是否为instance field 还是static field 成员的取值和赋值指令，根据指令前缀判断即可。</li><li>带 -object 后缀表示操作的是成员变量是对象类型，而不带后缀则表示操作是基本数据类型。特别地，boolean基本数据类型使用-boolean后缀。</li></ul><p>实例：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">const/4 v0, 0x0 <span class="hljs-built_in"></span><br><span class="hljs-built_in">iput-boolean </span>v0, p0, <span class="hljs-class">Lcom/disney/xx/XxActivity;</span>-&gt;isRunning:Z<br></code></pre></td></tr></table></figure><p>上述例子中使用了v0本地寄存器，并且把0x0传递到v0本地寄存器，第二局使用iput-boolean指令把v0寄存器中的值传递到com.disney.xx.XxActivity的成员变量isRunning。即相当于：this.isRunning &#x3D; false;（上面提到，在非static函数中p0表示为this，在这里则表示为com.disney.xx.XxActivity的对象实例）。</p><h3 id="static-field-成员变量"><a href="#static-field-成员变量" class="headerlink" title="static field 成员变量"></a>static field 成员变量</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">sget-objectv0,<span class="hljs-class">Lcom/disney/xx/XxActivity;</span>&gt;PREFS_INSTALLATION_ID:<span class="hljs-class">Ljava/lang/String;</span><br></code></pre></td></tr></table></figure><p>操作指令sget-object是用来获取静态成员变量并保存在紧接的本地参数列表中。在这里，把位于com.disney.xx.XxActivity类中的静态成员 PREFS_INSTALLATION_ID的值传递给本地寄存器v0。</p><h3 id="instance-field-成员变量"><a href="#instance-field-成员变量" class="headerlink" title="instance field 成员变量"></a>instance field 成员变量</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">iget-object v0, p0, <span class="hljs-class">Lcom/disney/xx/XxActivity;</span>-&gt;_view:<span class="hljs-class">Lcom/disney/common/WMWView;</span><br></code></pre></td></tr></table></figure><p>操作指令iget-object也是用来获取类成员变量并保存在紧接的本地参数列表中。在这里把com.disney.xx.XxActivity类中的对象成员_view赋值给本地寄存器v0中。</p><p>通过观察上面的static field 静态成员变量和instance field 类成员变量，可以总结以下格式：</p><p><opcode> &lt;本地寄存器&gt; , [&lt;参数寄存器&gt;] , &lt;变量所属的类变量&gt; -&gt; varName:&lt;变量类型&gt;</p><p>put指令和上面提到的get指令是类似的，直接看下面的例子：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">const/4 v3, 0x0 <span class="hljs-built_in"></span><br><span class="hljs-built_in">sput-object </span>v3, p0, <span class="hljs-class">Lcom/disney/xx/XxActivity;</span>&gt;globalIapHandler:<span class="hljs-class">Lcom/disney/config/GlobalPurchaseHandler;</span><br></code></pre></td></tr></table></figure><p>Java 代码表示： this.globalIapHandler &#x3D; null; (null &#x3D; 0x0)</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-keyword">.local</span> v0, wait:<span class="hljs-class">Landroid/os/Message;</span> <span class="hljs-built_in"></span><br><span class="hljs-built_in">const/4 </span>v1, 0x2 <span class="hljs-built_in"></span><br><span class="hljs-built_in">iput </span>v1, v0, <span class="hljs-class">Landroid/os/Message;</span>-&gt;what:I<br></code></pre></td></tr></table></figure><p>Java代码表示 ：wait.what&#x3D;0x2;(wait 是Message的实例)</p><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><h3 id="函数定义格式"><a href="#函数定义格式" class="headerlink" title="函数定义格式"></a>函数定义格式</h3><p>function (type1type2type3…)RetVaule</p><p>需要注意的是函数的参数类型需要定义为smali语法中的类型，同时参数之间不可以有其他分隔符，例子如下：</p><p>helloSmali()V</p><p>表示Void helloSmali()</p><p>helloSmali([BI])Z</p><p>表示 boolean helloSmali(byte[],int)</p><p>helloSmali(ZLjava&#x2F;lang&#x2F;String;[I[I)V</p><p>表示void helloSmali(boolean, String ,int[],int[])</p><p>在smali中函数和成员变量一样也分为两种类型，但不同于成员变量中的static field 静态成员变量和instance field 类成员变量，函数中的是direct method和virtual method。这两个有何区别呢？简单来说，direct method 就是private函数，而virtual method 则是public 和protect函数。</p><p>所以在调用函数的时候，有invoke-direct、invoke-virtual，另外还有invoke-static、invoke-super以及invoke-interface 等几种不同的指令。同时还存在着invoke-XXX&#x2F;range指令，这是参数传参个数大于4的时候调用的指令。</p><h4 id="invoke-static"><a href="#invoke-static" class="headerlink" title="invoke-static"></a>invoke-static</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">invoke-static &#123;&#125;, <span class="hljs-class">Lcom/disney/xx/UnlockHelper;</span>-&gt;unlockCrankypack()Z<br></code></pre></td></tr></table></figure><p>invoke-static 表示调用的是类静态函数。Java代码表示为：UnlockHelper.unlockCrankypack()，这里注意到invoke-static后面紧接着{}，表示的是调用该方法的实例+参数列表，由于这个方法不需要参数，也是类静态方法所以{}内为空，再看一例子：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">const-string v0, <span class="hljs-string">&quot;fmodex&quot;</span> <span class="hljs-built_in"></span><br><span class="hljs-built_in">invoke-static </span>&#123;v0&#125;, <span class="hljs-class">Ljava/lang/System;</span>-&gt;loadLibrary(<span class="hljs-class">Ljava/lang/String;</span>)V<br></code></pre></td></tr></table></figure><p>这里调用的是static void System.loadLibrary(String)来加载so库，而v0则表示参数fmodex。</p><h4 id="invoke-super"><a href="#invoke-super" class="headerlink" title="invoke-super"></a>invoke-super</h4><p>表示调用父类方法用的指令，在重载的方法都可以看到。</p><h4 id="invoke-direct"><a href="#invoke-direct" class="headerlink" title="invoke-direct"></a>invoke-direct</h4><p>表示调用private函数的方法，如：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">invoke-direct &#123;p0&#125;, <span class="hljs-class">Lcom/disney/xx/XxActivity;</span>-&gt;getGlobalIapHandler()<span class="hljs-class">Lcom/disney/config/GlobalPurchaseHandler;</span><br><br></code></pre></td></tr></table></figure><p>这里的GlobalPurchaseHandler getGloballapHandler()表示getGloballapHandler()是定义在XxActivity类中，权限为private的方法。</p><h4 id="invoke-virtual"><a href="#invoke-virtual" class="headerlink" title="invoke-virtual"></a>invoke-virtual</h4><p>表示调用的是protected或public函数</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">sget-object v0, <span class="hljs-class">Lcom/disney/xx/XxActivity;</span>-&gt;shareHandler:<span class="hljs-class">Landroid/os/Handler;</span> <span class="hljs-built_in"></span><br><span class="hljs-built_in">invoke-virtual </span>&#123;v0, v3&#125;, <span class="hljs-class">Landroid/os/Handler;</span>-&gt;removeCallbacksAndMessages(<span class="hljs-class">Ljava/lang/Object;</span>)V<br></code></pre></td></tr></table></figure><p>这里的v0可以表示shareHandler:Landroid&#x2F;os&#x2F;Handler,v3则表示为removeCallbacksAndMessages方法的Ljava&#x2F;lang&#x2F;Object;类型的传参。</p><h4 id="invoke-xxxxx-x2F-range"><a href="#invoke-xxxxx-x2F-range" class="headerlink" title="invoke-xxxxx&#x2F;range"></a>invoke-xxxxx&#x2F;range</h4><p>表示当方法参数&gt;&#x3D;5时，需要在后面加上&#x2F;range。</p><h4 id="取函数返回值操作"><a href="#取函数返回值操作" class="headerlink" title="取函数返回值操作"></a>取函数返回值操作</h4><p>在smali代码中，如果调用的函数返回非void，那么还需要用到move-result（返回基本数据类型）和move-result-object（返回对象）：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">const/4 v2, 0x0 <span class="hljs-built_in"></span><br><span class="hljs-built_in">invoke-virtual </span>&#123;p0, v2&#125;, <span class="hljs-class">Lcom/disney/xx/XxActivity;</span>-&gt;getPreferences(I)<span class="hljs-class">Landroid/content/SharedPreferences;</span> <span class="hljs-built_in"></span><br><span class="hljs-built_in">move-result-object </span>v1<br></code></pre></td></tr></table></figure><p>v1表示调用this.getPreferences(0)方法返回的SharedPreferences类型的对象。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">invoke-virtual &#123;v2&#125;, <span class="hljs-class">Ljava/lang/String;</span>-&gt;length()I <span class="hljs-built_in"></span><br><span class="hljs-built_in">move-result </span>v2<br></code></pre></td></tr></table></figure><p>v2 表示 String.length() 返回的 int 基本类型。</p><h2 id="举例分析"><a href="#举例分析" class="headerlink" title="举例分析"></a>举例分析</h2><p>通过举例进一步对smali语法进行分析：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-keyword">.method</span><span class="hljs-keyword"> protected</span> onDestroy()V<br><span class="hljs-keyword">    .locals</span> 0<br> <br><span class="hljs-keyword">    .line</span> 79<br>   <span class="hljs-built_in"> invoke-super </span>&#123;p0&#125;, <span class="hljs-class">Landroidx/appcompat/app/AppCompatActivity;</span>-&gt;onDestroy()V<br> <br><span class="hljs-keyword">    .line</span> 80<br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p0&#125;, <span class="hljs-class">Lcom/happy/learnsmali/BaseActivity;</span>-&gt;removeCallbacks()V<br> <br><span class="hljs-keyword">    .line</span> 81<br>   <span class="hljs-built_in"> return-void</span><br><span class="hljs-built_in"></span><span class="hljs-keyword">.end method</span><br></code></pre></td></tr></table></figure><p>熟悉的onDextroy()函数。首先看到函数内第一句： .locals 0，表示在这个函数中用到的本地寄存器的个数，这里因为调用的方法没有使用到本地寄存器，因而本地寄存器个数为0.如果在该方法中添加：this.isExited &#x3D; true，那么上述方法应该为：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-keyword">.method</span><span class="hljs-keyword"> protected</span> onDestroy()V<br><span class="hljs-keyword">    .locals</span> 1<br> <br><span class="hljs-keyword">    .line</span> 79<br>   <span class="hljs-built_in"> invoke-super </span>&#123;p0&#125;, <span class="hljs-class">Landroidx/appcompat/app/AppCompatActivity;</span>-&gt;onDestroy()V<br> <br><span class="hljs-keyword">    .line</span> 80<br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p0&#125;, <span class="hljs-class">Lcom/happy/learnsmali/BaseActivity;</span>-&gt;removeCallbacks()V<br> <br><span class="hljs-keyword">    .line</span> 81<br>   <span class="hljs-built_in"> const/4 </span>v0, 0x1<br>   <span class="hljs-built_in"> iput-boolean </span>v0, p0, <span class="hljs-class">Lcom/happy/learnsmali/BaseActivity;</span>-&gt;exited:Z<br> <br><span class="hljs-keyword">    .line</span> 82<br>   <span class="hljs-built_in"> return-void</span><br><span class="hljs-built_in"></span><span class="hljs-keyword">.end method</span><br></code></pre></td></tr></table></figure><p>因为修改后的onDestroy()函数使用到了一个本地寄存器，所以把 .locals 0修改为 .locals 1。另外可能注意到了 .line这个标识符，他表示smali这一行代码在Java中对应代码的行号。平常我们在Android Studio上调试程序发生崩溃的时候，logcat 中提示发生崩溃所在的代码行号也是该值。当然，该标识符不是必须的，但是为了方便调试还是建议保留。</p>]]></content>
    
    
    <categories>
      
      <category>Android逆向知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android 逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java修饰符</title>
    <link href="/2023/07/11/java%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <url>/2023/07/11/java%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="java修饰符"><a href="#java修饰符" class="headerlink" title="java修饰符"></a>java修饰符</h1><h2 id="java修饰符的分类"><a href="#java修饰符的分类" class="headerlink" title="java修饰符的分类"></a>java修饰符的分类</h2><h3 id="访问权限修饰符"><a href="#访问权限修饰符" class="headerlink" title="访问权限修饰符"></a>访问权限修饰符</h3><ul><li>default（即默认，什么都不写）：在同一包内可见，不用任何修饰符。使用对象：类、接口、变量、方法。</li><li>private：在同一类内可见。使用对象：变量、方法。注意：不能修饰类（外部类）</li><li>public：对所有类可见。使用对象：类、接口、变量、方法。</li><li>protected：对同一包内的类和所有子类可见。使用对象：变量、方法。注意：不能修饰类（外部类）。</li></ul><p>public &gt; protected &gt; default &gt; private</p><p>我们可以通过以下表来说明访问权限：</p><table><thead><tr><th align="left">修饰符</th><th align="left">当前类</th><th align="left">同一包内</th><th align="left">子孙类(同一包)</th><th align="left">子孙类(不同包)</th><th align="left">其他包</th></tr></thead><tbody><tr><td align="left"><code>public</code></td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td></tr><tr><td align="left"><code>protected</code></td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y&#x2F;N（<a href="https://www.runoob.com/java/java-modifier-types.html#protected-desc">说明</a>）</td><td align="left">N</td></tr><tr><td align="left"><code>default</code></td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">N</td><td align="left">N</td></tr><tr><td align="left"><code>private</code></td><td align="left">Y</td><td align="left">N</td><td align="left">N</td><td align="left">N</td><td align="left">N</td></tr></tbody></table><h3 id="非访问权限修饰符"><a href="#非访问权限修饰符" class="headerlink" title="非访问权限修饰符"></a>非访问权限修饰符</h3><ol><li>static修饰符：用来创建类方法和类变量。</li><li>final修饰符：用来修饰类、方法和变量，final修饰的类不能被继承，修饰的方法不能被继承重新定义，修饰的变量为常量，是不可修改的。</li><li>abstract修饰符：用来创建抽象类和抽象方法。</li><li>synchronizaed：用于多线程的同步</li><li>volatile：修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且当成员变量发生变化时，会强制线程将变化值写回到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</li><li>transient：序列化的对象包含被transient修饰的实例变量时，java虚拟机（JVM）跳过特定的变量。</li></ol><h2 id="修饰符的使用"><a href="#修饰符的使用" class="headerlink" title="修饰符的使用"></a>修饰符的使用</h2><h3 id="类修饰符"><a href="#类修饰符" class="headerlink" title="类修饰符"></a>类修饰符</h3><h4 id="外部类修饰符"><a href="#外部类修饰符" class="headerlink" title="外部类修饰符"></a>外部类修饰符</h4><ol><li>public（访问控制符）：将一个类声明为公共类，他可以被任何对象访问，一个程序的主类必须时公开类。</li><li>default（访问控制符）：类只对包内可见，包外不可见。</li><li>abstract（非访问控制符）：将一个类声明为抽象类，抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充，抽象类可以包含抽象方法和非抽方法。</li><li>final（非访问控制符）：将一个类声明为最终（即非继承类），表示它不能被其他类继承。</li></ol><p>注意：</p><ol><li>protected 个private 不能修饰外部类，是因为外部类放在包中，只有两种可能，包可见和包不可见。</li><li>final 和abstract 不能同时修饰外部类，是因为该类要么被继承要么不被继承，二者只能选其一。</li><li>不能用static修饰，因为类加载后才会加载静态成员变量。所以不能用static修饰类和接口，因为类还没加载，无法使用static关键字。</li></ol><h4 id="内部修饰符"><a href="#内部修饰符" class="headerlink" title="内部修饰符"></a>内部修饰符</h4><p>内部类与成员变量地位一直一样，所以可以public、protected、default和private，同时还可以用static修饰，表示嵌套内部类，不用实例化外部类，即可调用。</p><h3 id="方法修饰符"><a href="#方法修饰符" class="headerlink" title="方法修饰符"></a>方法修饰符</h3><ol><li>public类（公共控制符）：包内包外都可以调用该方法。</li><li>protected（保护访问控制符）：指定该方法可以被他的类和子类访问。</li><li>default（默认权限）：指定此方法只对同包可见，对不同包（含不同包的子类）不可加。</li><li>private（私有控制符）：指定此方法只能自己类等方法访问，其他的类不能访问（包括子类），控制的非常严格。</li><li>final：指定方法已完备，不能再进行继承扩充。</li><li>static：指定不需要实例化就可以激活的一个方法，即在内存中只有一份，通过类名即可调用。</li><li>synchronize：同步修饰符，在多个线程中，该修饰符用于运行前，对它所属的方法加锁，以防止其他线程的访问，运行结束后解锁。</li><li>native：本机修饰符。指定此方法的方法体是用其他语言在程序外部编写的。</li><li>abstract：抽象方法是一种没有实现的方法，该方法的具体实现由子类提供。抽象方法不能被声明为final和static。任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。抽象方法的声明以分号结尾，例如：<code>public abstract sample();</code> 。</li></ol><h3 id="变量修饰符"><a href="#变量修饰符" class="headerlink" title="变量修饰符"></a>变量修饰符</h3><h4 id="成员变量修饰符"><a href="#成员变量修饰符" class="headerlink" title="成员变量修饰符"></a>成员变量修饰符</h4><ol><li>public （公共访问控制符）：指定该变量为公共的，它可以被任何抽象对象的方法访问。</li><li>protected（保护访问控制符）：指定该变量可以被自己的类和子类访问，在子类中方可以覆盖此变量。</li><li>default（默认权限）：指定该变量只对同包可见，对不同包（包含不同包的子类）不可见。</li><li>private（私有访问控制符）：指定该变量只允许自己的类的方法访问，其他任何类（包括子类）中的方法均不能访问。</li><li>final：最终修饰符，指定此变量的值不能变。</li><li>static（静态修饰符）：指定变量被所有对象共享，即所有实例都可以使用变量。变量属于这个类。</li><li>transient（过渡修饰符）：指定该变量是系统保留，暂无特别作用的临时性变量。不持久化。</li><li>volatile（易失修饰符）：指定该变量可以同时被几个线程控制和修改，保证两个不同的线程总是看到某个成员变量的同一个值。</li></ol><p>final和static经常一起使用来创建变量</p><h4 id="局部变量修饰符"><a href="#局部变量修饰符" class="headerlink" title="局部变量修饰符"></a>局部变量修饰符</h4><p>只能使用final修饰局部变量</p><ol><li>为什么不能赋予权限修饰符？</li></ol><p>因为局部变量的生命周期为一个方法的调用期间，所以没必要为其设置权限访问字段，既然可以访问到这个方法，所以也就没有必要再为其方法被变量赋予访问权限，因为该变量在方法调用期间已经被加载进了虚拟栈，换句话说就是肯定能被当前线程访问到，所以设置没意义。</p><p> 2.为什么不能用static修饰</p><p>我们都知道静态变量在方法之前先加载，所以如果在方法内设置静态变量，可想而知，方法都还没加载，没法加载成功方法内的静态变量。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="接口修饰符"><a href="#接口修饰符" class="headerlink" title="接口修饰符"></a>接口修饰符</h4><ol><li>接口修饰符只能用public、default和abstract，不能用final、static修饰。</li><li>接口默认修饰为abstract。</li></ol><h4 id="接口中方法修饰符"><a href="#接口中方法修饰符" class="headerlink" title="接口中方法修饰符"></a>接口中方法修饰符</h4><p>只能用public abstract修饰，当然如果什么都不写，默认就是public abstract。</p><p>注意：在Java1.8之后，接口允许定义static静态方法了！也就是说可以用static来修饰。</p>]]></content>
    
    
    <categories>
      
      <category>Android逆向知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android 逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器汇编语言</title>
    <link href="/2023/04/07/%E6%9C%BA%E5%99%A8%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    <url>/2023/04/07/%E6%9C%BA%E5%99%A8%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="机器汇编语言知识点"><a href="#机器汇编语言知识点" class="headerlink" title="机器汇编语言知识点"></a>机器汇编语言知识点</h1><p>机器汇编语言是一种可以被计算机硬件直接识别和执行的低级编程语言。它使用类似英语的助记符来表示不同的指令和操作码，使程序员能够更容易地编写底层系统软件和设备驱动程序。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>指令：机器汇编语言的最基本单位，用于告诉计算机执行什么样的操作。</li><li>操作码（Opcode）：指令的第一个字段，用于表示执行的操作类型。</li><li>操作数（Operand）：指令的其他字段，用于表示操作的操作数和地址。</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>机器汇编语言的数据类型包括：</p><ul><li>字节（Byte）：8位数据类型。</li><li>字（Word）：16位数据类型。</li><li>双字（Double word）：32位数据类型。</li><li>四字（Quad word）：64位数据类型。</li></ul><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>机器汇编语言使用寄存器来暂存数据和地址，常见的寄存器包括：</p><ul><li>通用寄存器（General purpose register）：用于存储临时数据和变量。</li><li>程序计数器（Program counter）：用于存储下一条指令的地址。</li><li>栈指针寄存器（Stack pointer register）：用于存储栈顶指针。</li><li>基址指针寄存器（Base pointer register）：用于存储堆栈基地址。</li><li>标志寄存器（Flags register）：用于存储操作结果的状态标志。</li></ul><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>机器汇编语言的指令包括：</p><ul><li>数据传送指令：用于将数据从一个位置传送到另一个位置。</li><li>算术运算指令：用于执行加减乘除等算术运算。</li><li>逻辑运算指令：用于执行逻辑运算，如与、或、非等。</li><li>控制指令：用于控制程序的执行流程，如跳转、循环等。</li><li>输入输出指令：用于从外部设备读取数据或将数据输出到外部设备。</li><li>特权指令：用于访问系统资源和执行特权操作。</li></ul><h2 id="常见的机器汇编语言"><a href="#常见的机器汇编语言" class="headerlink" title="常见的机器汇编语言"></a>常见的机器汇编语言</h2><p>常见的机器汇编语言包括：</p><ul><li>x86汇编语言：用于PC和Intel兼容计算机。</li><li>ARM汇编语言：用于移动设备和嵌入式系统。</li><li>MIPS汇编语言：用于嵌入式系统和路由器等网络设备。</li><li>PowerPC汇编语言：用于IBM PowerPC架构的计算机。</li></ul><h2 id="编写机器汇编语言程序的步骤"><a href="#编写机器汇编语言程序的步骤" class="headerlink" title="编写机器汇编语言程序的步骤"></a>编写机器汇编语言程序的步骤</h2><p>编写机器汇编语言程序的基本步骤包括：</p><ol><li>确定程序的功能和需求。</li><li>选择合适的指令序列，根据需求选择合适的寄存器和操作数。</li><li>编写指令序列，使用助记符和操作数编写汇编代码。</li><li>使用汇编器将汇编代码转换为机器码。</li><li>链接目标文件，将多个目标文件组合成一个可执行文件。</li><li>在目标计算机上运行可执行文件。</li></ol><h2 id="机器汇编语言的应用领域"><a href="#机器汇编语言的应用领域" class="headerlink" title="机器汇编语言的应用领域"></a>机器汇编语言的应用领域</h2><p>机器汇编语言通常用于编写系统软件和设备驱动程序，以及需要极高性能和优化的应用程序。一些应用领域包括：</p><ul><li>操作系统：操作系统内核通常使用机器汇编语言编写，以实现更高的性能和更好的控制。</li><li>设备驱动程序：一些硬件设备需要使用特定的机器汇编语言来访问和控制。</li><li>嵌入式系统：嵌入式系统通常需要使用机器汇编语言来最大限度地优化性能和减小体积。</li><li>加密和解密程序：一些安全领域的应用需要使用机器汇编语言来实现高效的加密和解密算法。</li><li>游戏和图形程序：游戏和图形程序通常需要使用机器汇编语言来实现高效的图形渲染和物理模拟。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>机器汇编语言虽然比高级语言更难学习和编写，但是在某些应用领域具有非常重要的作用。了解机器汇编语言的基本概念、数据类型、寄存器和指令，以及编写机器汇编语言程序的基本步骤，可以帮助程序员更好地理解计算机系统的底层实现，提高程序的性能和效率。</p>]]></content>
    
    
    <categories>
      
      <category>汇编语言知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编知识点汇总</title>
    <link href="/2023/04/07/%E6%B1%87%E7%BC%96%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <url>/2023/04/07/%E6%B1%87%E7%BC%96%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="汇编语言概述"><a href="#汇编语言概述" class="headerlink" title="汇编语言概述"></a>汇编语言概述</h2><p>汇编语言是一种低级计算机语言，它将机器语言的指令用易于理解和书写的文本形式表示。在计算机执行程序时，汇编语言需要被汇编器转换为机器语言才能被计算机识别和执行。</p><p>汇编语言通常包含一系列指令，这些指令直接对应着计算机硬件中的操作，如加法、乘法、移位等。汇编语言还包含各种寄存器和内存操作，用于管理和控制程序运行时的数据和状态。</p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>在汇编语言中，寄存器是用于存储数据和控制程序流程的重要组成部分。常见的寄存器包括：</p><ul><li><p><code>AX</code>、<code>BX</code>、<code>CX</code>、<code>DX</code>：通用寄存器，用于存储任意数据。</p></li><li><p><code>SP</code>：栈指针寄存器，用于管理程序栈。</p></li><li><p><code>BP</code>：基址指针寄存器，用于存储变量的基址。</p></li><li><p><code>SI</code>、<code>DI</code>：源变址寄存器和目的变址寄存器，用于内存数据传输。</p></li><li><p><code>IP</code>：指令指针寄存器，用于存储下一条指令的地址。</p></li><li><p><code>FLAGS</code>：标志寄存器，用于存储程序状态的各种标志位。</p></li></ul><h2 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h2><p>为了方便对内存的管理和保护，x86架构引入了段寄存器的概念。每个段寄存器都对应着一个内存段，其中存储着程序或数据的一部分。</p><p>常见的段寄存器包括：</p><ul><li><code>CS</code>：代码段寄存器，存储着程序代码。</li><li><code>DS</code>：数据段寄存器，存储着程序数据。</li><li><code>ES</code>：附加段寄存器，通常用于存储一些额外的数据。</li><li><code>SS</code>：栈段寄存器，存储着程序栈。</li></ul><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>汇编语言中的指令是直接对应着计算机硬件的操作，它们通常包含一个操作码和一个或多个操作数。常见的指令包括：</p><ul><li><code>MOV</code>：将一个值从一个位置复制到另一个位置。</li><li><code>ADD</code>、<code>SUB</code>、<code>MUL</code>、<code>DIV</code>：加法、减法、乘法、除法操作。</li><li><code>INC</code>、<code>DEC</code>：递增、递减操作。</li><li><code>AND</code>、<code>OR</code>、<code>XOR</code>：逻辑与、逻辑或、逻辑异或操作。</li><li><code>CMP</code>：比较两个值的大小关系。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>以下是一个简单的汇编程序，它将两个数相加并输出结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">SECTION .data ; 数据段<br>    num1 DW <span class="hljs-number">10</span> ; 定义一个<span class="hljs-number">16</span>位整型变量，值为<span class="hljs-number">10</span><br>    num2 DW <span class="hljs-number">20</span> ; 定义一个<span class="hljs-number">16</span>位整型变量，值为<span class="hljs-number">20</span><br>    <span class="hljs-keyword">result</span> DW ? ; 定义一个<span class="hljs-number">16</span>位整型变量，用于存储结果<br><br>SECTION .text ; 代码段<br>    <span class="hljs-keyword">global</span> _start ; 程序入口<br><br>_start:<br>    mov ax, [num1] ; 将num1的值加载到ax寄存器中<br>    <span class="hljs-keyword">add</span> ax, [num2] ; 将num2的值加到ax寄存器中<br>    mov [<span class="hljs-keyword">result</span>], ax ; 将结果保存到<span class="hljs-keyword">result</span>变量中<br><br>    ; 输出结果<br>    mov ah, <span class="hljs-number">0x09</span> ; 设置打印字符串的功能码<br>    mov dx, <span class="hljs-keyword">result</span> ; 将<span class="hljs-keyword">result</span>的地址加载到dx寄存器中<br>    <span class="hljs-type">int</span> <span class="hljs-number">0x21</span> ; 调用BIOS中断，输出结果<br><br>    mov ah, <span class="hljs-number">0x4c</span> ; 设置程序结束的功能码<br>    <span class="hljs-type">int</span> <span class="hljs-number">0x21</span> ; 调用BIOS中断，结束程序<br><br></code></pre></td></tr></table></figure><p>以上程序中，<code>SECTION .data</code> 定义了程序的数据段，<code>SECTION .text</code> 定义了程序的代码段。程序首先将 <code>num1</code> 和 <code>num2</code> 两个变量的值相加，并将结果保存到 <code>result</code> 变量中。接着，程序调用BIOS中断0x21，使用功能码0x09打印输出 <code>result</code>变量的值，然后调用BIOS中断0x21，使用功能码0x4c结束程序。</p><h2 id="编译和运行汇编程序"><a href="#编译和运行汇编程序" class="headerlink" title="编译和运行汇编程序"></a>编译和运行汇编程序</h2><p>在 Windows 平台上，常用的汇编器是 MASM 和 NASM。在 Linux 平台上，常用的汇编器是 GAS（GNU Assembler）。</p><p>以下是使用 NASM 编译和运行上述示例代码的步骤：</p><ol><li>安装 NASM。<ul><li>在 Windows 上，可以从官方网站 <a href="https://www.nasm.us/">https://www.nasm.us/</a> 下载安装包，并按照提示安装即可。</li><li>在 Linux 上，可以使用包管理器安装 NASM，例如在 Ubuntu 上可以使用以下命令安装：<code>sudo apt-get install nasm</code></li></ul></li><li>创建一个名为 <code>example.asm</code> 的文件，并将示例代码复制进去。</li><li>执行以下命令编译代码：<code>nasm -f elf64 example.asm</code>。该命令将汇编代码转换为 ELF 格式的目标文件。</li><li>执行以下命令链接目标文件并生成可执行文件：<code>ld -s -o example example.o</code>。该命令将目标文件链接为可执行文件，并将生成的可执行文件命名为 <code>example</code>。</li><li>执行以下命令运行可执行文件：<code>./example</code>。该命令将执行汇编程序，并输出结果。</li></ol><p>注意：以上步骤是在 Linux 环境下进行的，如果在 Windows 环境下进行，需要将第3步和第4步中的 <code>elf64</code> 替换为相应的目标平台格式，例如 <code>win32</code> 或 <code>win64</code>。</p><h2 id="汇编语言的应用"><a href="#汇编语言的应用" class="headerlink" title="汇编语言的应用"></a>汇编语言的应用</h2><p>汇编语言是一种低级语言，与高级语言相比，它更加接近计算机硬件的底层。因此，使用汇编语言编写的程序可以更加高效地利用计算机的硬件资源，具有更快的执行速度和更小的程序体积。</p><p>汇编语言广泛应用于以下领域：</p><h3 id="操作系统开发"><a href="#操作系统开发" class="headerlink" title="操作系统开发"></a>操作系统开发</h3><p>操作系统是计算机系统的核心软件，负责管理计算机的硬件和软件资源，并为其他应用程序提供服务。操作系统通常需要直接访问计算机的硬件资源，因此需要使用汇编语言编写底层驱动程序和操作系统内核。</p><p>例如，Windows 操作系统中的许多底层驱动程序和操作系统内核都是使用汇编语言编写的。</p><h3 id="嵌入式系统开发"><a href="#嵌入式系统开发" class="headerlink" title="嵌入式系统开发"></a>嵌入式系统开发</h3><p>嵌入式系统是一种专用计算机系统，通常集成在其他设备中，如家用电器、汽车、医疗设备等。由于嵌入式系统的计算资源和存储资源通常较为有限，因此需要使用汇编语言编写程序，以获得更高的执行效率和更小的程序体积。</p><h3 id="游戏开发"><a href="#游戏开发" class="headerlink" title="游戏开发"></a>游戏开发</h3><p>游戏是计算机应用程序的一种重要类型，游戏开发者通常需要使用汇编语言编写一些底层代码，以实现游戏引擎和特效等功能。使用汇编语言编写的游戏程序通常具有更高的性能和更好的游戏体验。</p><h3 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h3><p>逆向工程是一种分析和理解已有程序的技术，通常用于破解软件、恶意软件分析等领域。逆向工程师需要使用汇编语言来分析和理解程序的底层实现原理，以便于破解和修改程序。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>汇编语言是计算机科学领域中一门重要的编程语言，虽然已经被高级语言所取代，但它仍然具有重要的意义。学习汇编语言可以帮助我们更好地理解计算机底层的工作原理，并提高编程技能和程序效率。</p><p>如果您对汇编语言感兴趣，可以深入学习，掌握汇编语言的更多知识和技能，以便于在逆向工程、系统开发、嵌入式系统开发等领域发挥更大的作用。</p>]]></content>
    
    
    <categories>
      
      <category>汇编语言知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c/c++语言基础</title>
    <link href="/2023/04/07/c-c-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/04/07/c-c-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="C-x2F-C-语言基础"><a href="#C-x2F-C-语言基础" class="headerlink" title="C&#x2F;C++语言基础"></a>C&#x2F;C++语言基础</h1><h2 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h2><p>1字&#x3D;2字节(1 word &#x3D; 2 byte)<br>1字节&#x3D;8位(1 byte &#x3D; 8bit)</p><h3 id="各数据类型大小"><a href="#各数据类型大小" class="headerlink" title="各数据类型大小"></a>各数据类型大小</h3><p>int的内存大小是4 个byte；</p><p>long 的内存大小是4 个byte；</p><p>float 的内存大小是4 个byte；</p><p>double 的内存大小是8 个byte；</p><p>char 的内存大小是1 个byte。</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="有符号指令"><a href="#有符号指令" class="headerlink" title="有符号指令"></a>有符号指令</h3><p>IDIV：带符号除法指令</p><p>IMUL：带符号乘法指令</p><p>SAL：算术左移指令（保留符号）</p><p>SAR：算数右移指令（保留符号）</p><p>MOVSX：带符号扩展传送指令</p><p>JL：当小于时跳转指令</p><p>JIE：当小于或者等于时跳转指令</p><p>JG：当大于时跳转指令</p><h3 id="无符号指令"><a href="#无符号指令" class="headerlink" title="无符号指令"></a>无符号指令</h3><p>DIV：除法指令</p><p>MUL：乘法指令</p><p>SHL：逻辑左移指令</p><p>SHR：逻辑右移指令</p><p>MOVZX：无符号扩展传送指令</p><p>JB：当小于时跳转指令</p><p>JBE：当小于或等于时跳转指令</p><p>JA：当大于时跳转指令</p><p>JAE：当大于或等于时跳转指令</p><h3 id="32位整数数据类型"><a href="#32位整数数据类型" class="headerlink" title="32位整数数据类型"></a>32位整数数据类型</h3><p>int [# of bits]_t</p><p>. int8_t,int16_t,int32_t</p><p>uint [# of bits]_t</p><p>.uint8_t,uint16_t,uint32_t</p><h2 id="格式化输出函数"><a href="#格式化输出函数" class="headerlink" title="格式化输出函数"></a>格式化输出函数</h2><p>fprintf（） 按照格式字符串的内容将输出写入流中·三个参数为流、格式字<br>符串和变参列表。<br>printf(） 等同于 fprintf（），但是它假定输出流为 stdout<br>sprintf（） 等同于 fprintf（），但是输出不是写入流而是写入数组·在写<br>入的字符串末尾必须添加一个空字符。<br>snprintf（）等同于sprintf（），但是它指定了可写入字符的最大值size·<br>当size大于零时，输出字符超过第size-1的部分会被舍奔而不会写入数组中，在写入数组的字符串末尾会添加一个空字符。<br>dprintf（）等同于fprintf（），但是它输出不是流而是一个文件描述符fd。<br>vfprintf(） 丶 vprintf(）  vsprintfC） 、vsnprintf(） vdprintf<br>（）分别与上面的函数对应，只是它们将变参列表换成了 va_list 类型的参<br>数。</p>]]></content>
    
    
    <categories>
      
      <category>c/c++语言基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c/c++语言基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编</title>
    <link href="/2023/04/07/%E6%B1%87%E7%BC%96/"/>
    <url>/2023/04/07/%E6%B1%87%E7%BC%96/</url>
    
    <content type="html"><![CDATA[<h1 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h1><h2 id="字节-bit"><a href="#字节-bit" class="headerlink" title="字节(bit)"></a>字节(bit)</h2><p>1 byte&#x3D;8bit</p><p>1word&#x3D;2byte&#x3D;16bit</p><p>1char&#x3D; 1byte&#x3D;8bit</p><p>1short&#x3D;2byte&#x3D;16bit</p><p>1int&#x3D;4byte&#x3D;32bit</p><p>1float&#x3D;4byte&#x3D;32bit</p><p>1double&#x3D;8byte&#x3D;64bit</p><p>1long&#x3D;8byte&#x3D;64bit</p><h2 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h2><p>没有总线，cpu，内存，输入输出设备之间就无法沟通</p><p>简言之，总线是用来通信的</p><p>总线分为地址总线，数据总线和控制总线</p><p><em><strong>串行和并行</strong></em></p><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>预编译-&gt;编译-&gt;汇编-&gt;链接</p><p>gcc -E xxx.c -o xxx.i</p><p>gcc -s xxx.i -o xxx.s</p><p>gcc -c xxx.s -o xxx.o</p><p>gcc -static xxx.o -o xxx</p><h2 id="X86寄存器"><a href="#X86寄存器" class="headerlink" title="X86寄存器"></a>X86寄存器</h2><h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><p>八个通用寄存器用于储存操作数、运算结果和指针</p><p>al（低八位） ah（高八位） ax（高低八位的组合十六位） eax（三十二位） rax（六十四位） 用处比较多，比如存储返回值</p><p>bx                       常在寻址是存储基地址</p><p>dx                        被用来存放整数除法产生的余数</p><p>cx                        常用于控制循环次数</p><p>di si                         在变址寻址时会使用</p><p>bp                           指向当前栈的底部</p><p>sp                            指向当前栈的顶部、</p><p>EAX：操作数和结果数据的累加器</p><p>EBX：指向DS段中数据的指针</p><p>ECX：用于字符串和循环操作的计数器</p><p>EDX：I&#x2F;O指针</p><p>ESI：指向由DS寄存器指向的段中的数据的指针；字符串操作的源指针</p><p>EDI：指向由ES寄存器指向的段中的数据（或目标地址）的指针；字符串操作的目标指针</p><p>ESP：栈指针（位于SS段）</p><p>EBP：指向栈上数据的指针（位于SS段）</p><h3 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h3><p>段寄存器用于保存16位的段寄存器。是一种特殊的指针，用于确定内存中某个段的位置。</p><p>代码段    cs:ip</p><p>数据段   ds</p><p>栈段   ss</p><p>额外段   es</p><p>64位下的：FS、GS</p><p>不同系统用处不同，在windows下，GS用于管理线程特定的内存</p><p>linux中，GS用于访问cpu特定的内存</p><p>FS和GS的另一个用处 canary的保护</p><h3 id="寄存器——标志寄存器"><a href="#寄存器——标志寄存器" class="headerlink" title="寄存器——标志寄存器"></a>寄存器——标志寄存器</h3><h4 id="eflags寄存器"><a href="#eflags寄存器" class="headerlink" title="eflags寄存器"></a>eflags寄存器</h4><p>OF    overflow flag    溢出标志    溢出标志OF用于反映有符号数加减运算所得结果是否溢出。<br>DF    direction flag    方向标志    控制串指令(MOVS,CMPS).DF&#x3D;1,ESl,EDI自动递减（从高地址向低地址方向处理字符串），DF&#x3D;O,ESL,EDI自动递增<br>IF interrupt enable flag     屏蔽中断标志<br>TF      trap flag      单步调试标志设置后执行一条指令就会被中断<br>SF    signal flag      符号标志正负标志位，它记录相关指令执行后，结果是否为负<br>ZF     zero flag     零标志     它记录相关指令执行后，结果是否为0；如果结为0,zf&#x3D;1，如果结果不为0,zf&#x3D;0<br>AF     auxiliary carry flag    辅助进位标志     运算过程中看最后四位，不论长度为多少。最后四位向前有进位或者借位，AF&#x3D;1,否则AF&#x3D;0;<br>PF     parity flag      奇偶标志        运算结果中“1”的个数的奇偶性，偶数个1,PF&#x3D;1,反之为0.<br>CF     carry f1ag进位标志      如果运算结果的最高位产生了一个进位或借位，其值为1，否则为0。</p><h4 id="EIP寄存器"><a href="#EIP寄存器" class="headerlink" title="EIP寄存器"></a>EIP寄存器</h4><p>包含一个32位的指针，指向下一条被执行的指令</p><h2 id="指令——运算指令"><a href="#指令——运算指令" class="headerlink" title="指令——运算指令"></a>指令——运算指令</h2><p>加 add    add ax,bx</p><p>减 sub    sub ax,bx</p><p>乘 mul    mul ax,bx</p><p>除 div    div ax,bx 商存在ax，余存在bx</p><p>与 and and ax,bx </p><p>或 or    or ax,bx</p><p>非 not  not ecx</p><p>异或 xor xor eax,eax</p><p>左移 shl 逻辑左移</p><p>右移 shr 逻辑右移</p><p>逻辑左移时，最高位丢失，最低位补0；</p><p>逻辑右移时，最高位补0，最低位丢失；</p><p>算术左移时，依次左移一位，尾部补0，最高的符号位保持不变。</p><p>算术右移时，依次右移一位，尾部丢失，符号位右移后，原位置上复制一个符号位；</p><p>循环左移时，将最高位重新放置最低位</p><p>循环右移时，将最低位重新放置最高位</p><p>lea eax,[ebx+8]就是将ebx+8这个值直接赋给eax，而不是把ebx+8处的内存地址里的数据赋给eax。</p><p>而mov指令则恰恰相反，例如：</p><p>mov eax,[ebx+8]则是把内存地址为ebx+8处的数据赋给eax。</p><h2 id="指令——赋值指令"><a href="#指令——赋值指令" class="headerlink" title="指令——赋值指令"></a>指令——赋值指令</h2><p>寄存器寻址           立即数寻址           基址变址寻址</p><p>mov ax,0x10        mov ax,ox18       mov [bx+di],ax</p><p>mov dx,ox9                                        add [bx+si],ax</p><p>mul dx</p><h2 id="指令——栈相关指令"><a href="#指令——栈相关指令" class="headerlink" title="指令——栈相关指令"></a>指令——栈相关指令</h2><p>push 压栈</p><p>pop 弹栈</p><p>Pushfd 把eflags寄存器的内容压入栈</p><p>Popfd 把栈上的内容弹出赋值给eflags寄存器</p><p>Pusha 按照AX、CX、DX、BX、SP（执行PUSHA之前的值）、BP、SI和DI的顺序，将所有16位通用寄存器压入堆栈。</p><p>Popa 按照相反顺序将同样的寄存器弹出栈</p><h2 id="指令——跳转指令"><a href="#指令——跳转指令" class="headerlink" title="指令——跳转指令"></a>指令——跳转指令</h2><p>cmp 指令 cmp 目的操作数，源操作数   目的操作数-源操作数</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202304071447999.png" alt="image-20220921201731155"></p><h2 id="指令——调用函数"><a href="#指令——调用函数" class="headerlink" title="指令——调用函数"></a>指令——调用函数</h2><p>call</p><p>ret</p><p>ip&#x3D;ss*16+sp</p><p>sp&#x3D;sp+2</p><p>ip&#x3D;ss*16+sp</p><p>sp&#x3D;sp+2</p><p>cs&#x3D;ss*16+sp</p><p>sp&#x3D;sp+2</p>]]></content>
    
    
    <categories>
      
      <category>汇编语言知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>exe文件反编译为py文件</title>
    <link href="/2023/04/07/exe%E6%96%87%E4%BB%B6%E5%8F%8D%E7%BC%96%E8%AF%91%E4%B8%BApy%E6%96%87%E4%BB%B6/"/>
    <url>/2023/04/07/exe%E6%96%87%E4%BB%B6%E5%8F%8D%E7%BC%96%E8%AF%91%E4%B8%BApy%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="典型exe文件反编译为py文件"><a href="#典型exe文件反编译为py文件" class="headerlink" title="典型exe文件反编译为py文件"></a>典型exe文件反编译为py文件</h1><p>拿到附件发现是一个exe文件但是根据题目提示这应该是一个py文件，所以我们需要将该exe文件反编译为py文件进行解题。</p><h2 id="解题步骤为：exe文件-gt-pyc文件-gt-py文件"><a href="#解题步骤为：exe文件-gt-pyc文件-gt-py文件" class="headerlink" title="解题步骤为：exe文件-&gt;pyc文件-&gt;py文件"></a>解题步骤为：exe文件-&gt;pyc文件-&gt;py文件</h2><h3 id="exe文件-gt-pyc文件"><a href="#exe文件-gt-pyc文件" class="headerlink" title="exe文件-&gt;pyc文件"></a>exe文件-&gt;pyc文件</h3><p>首先将exe文件复制到python-exe-unpacker-master的文件目录中，然后在该目录中打开命令提示符，</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202304071446918.png" alt="image-20221020142451980">输入命令pyinstxtractor.py ＋文件名，接着会输出一个文件夹（ 文件名称_extracted），进入该文件夹下拉找到与文件名称相同的文件和一个名为struct的文件，放入010editor中分析。</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202304071446930.png" alt="image-20221020142822575"></p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202304071446937.png" alt="image-20221020142836181"></p><p>发现两个文件文件头不同的是struct文件在E3前多了一些十六进制数字，然后新建十六进制文件，先将多出来的十六进制数复制过去再将原文件全部复制过去，重命名为pyc文件</p><h3 id="pyc文件-gt-py文件"><a href="#pyc文件-gt-py文件" class="headerlink" title="pyc文件-&gt;py文件"></a>pyc文件-&gt;py文件</h3><p>使用反编译工具uncompyle6 </p><p>在命令提示符中使用命令 uncompyle6 -o 文件名.py 文件名.pyc</p>]]></content>
    
    
    <categories>
      
      <category>CTF逆向知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加密算法</title>
    <link href="/2023/04/07/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <url>/2023/04/07/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h1><h2 id="shi1加密"><a href="#shi1加密" class="headerlink" title="shi1加密"></a>shi1加密</h2><p>【密码学】SHA-1加密原理及其Java实现_remo0x的博客-CSDN博客_sha1加密算法原理](<a href="https://blog.csdn.net/White_Idiot/article/details/70136461">https://blog.csdn.net/White_Idiot/article/details/70136461</a>)</p><h2 id="TEA算法"><a href="#TEA算法" class="headerlink" title="TEA算法"></a>TEA算法</h2><p>#define DELTA 0x9e3779b9</p><p>void tea_encrypt(unsigned int* v, unsigned int* key) {<br>  unsigned int l &#x3D; v[0], r &#x3D; v[1], sum &#x3D; 0;<br>  for (size_t i &#x3D; 0; i &lt; 32; i++) { &#x2F;&#x2F;进行32次迭代加密，Tea算法作者的建议迭代次数<br>    l +&#x3D; (((r &lt;&lt; 4) ^ (r &gt;&gt; 5)) + r) ^ (sum + key[sum &amp; 3]);<br>    sum +&#x3D; DELTA; &#x2F;&#x2F;累加Delta的值<br>    r +&#x3D; (((l &lt;&lt; 4) ^ (l &gt;&gt; 5)) + l) ^ (sum + key[(sum &gt;&gt; 11) &amp; 3]); &#x2F;&#x2F;利用多次双位移和异或将明文与密钥扩散混乱，并将两个明文互相加密<br>  }<br>  v[0] &#x3D; l;<br>  v[1] &#x3D; r;<br>}</p><p>&#x2F;&#x2F;利用可逆性将加密过程逆转<br>void tea_decrypt(unsigned int* v, unsigned int* key) {<br>  unsigned int l &#x3D; v[0], r &#x3D; v[1], sum &#x3D; 0;<br>  sum &#x3D; DELTA * 32; &#x2F;&#x2F;32次迭代累加后delta的值<br>  for (size_t i &#x3D; 0; i &lt; 32; i++) {<br>    r -&#x3D; (((l &lt;&lt; 4) ^ (l &gt;&gt; 5)) + l) ^ (sum + key[(sum &gt;&gt; 11) &amp; 3]);<br>    sum -&#x3D; DELTA;<br>    l -&#x3D; (((r &lt;&lt; 4) ^ (r &gt;&gt; 5)) + r) ^ (sum + key[sum &amp; 3]);<br>  }<br>  v[0] &#x3D; l;<br>  v[1] &#x3D; r;<br>}</p><p>测试：</p><p>int main(int argc, char const *argv[])<br>{<br>    unsigned int v[2]&#x3D;{123,456},key[4]&#x3D;{0x11,0x22,0x33,0x44};<br>    printf(“%u,%u\n”,v[0],v[1]);<br>    tea_encrypt(v,key);<br>    printf(“%u,%u\n”,v[0],v[1]);<br>    tea_decrypt(v,key);<br>    printf(“%u,%u\n”,v[0],v[1]);<br>    return 0;<br>}</p><p><a href="https://www.cnblogs.com/iBinary/p/13844861.html">TEA算法解析 - iBinary - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF逆向算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python常见文件格式</title>
    <link href="/2023/04/07/python%E5%B8%B8%E8%A7%81%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/"/>
    <url>/2023/04/07/python%E5%B8%B8%E8%A7%81%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-常见文件格式-py-pyc-pyw-pyo-pyd-之间的主要区别"><a href="#Python-常见文件格式-py-pyc-pyw-pyo-pyd-之间的主要区别" class="headerlink" title="Python 常见文件格式 .py .pyc .pyw .pyo .pyd 之间的主要区别"></a><strong>Python 常见文件格式 .py .pyc .pyw .pyo .pyd 之间的主要区别</strong></h1><p>Python是一种面向对象、解释型计算机程序设计语言。Python 语法简洁、清晰，具有丰富和强大的类库。</p><p>Python 提供了一种中间编译结果保存机制，即 byte code，或更准确地说，保存 PyCodeObject。事实上，Python 确实提供了这样一种机制 —— .pyc 文件。在执行一个 .py 文件的源代码之后，Python 并不会自动生成与该 .py 文件对应的 .pyc 文件。Python 会根据需要自动触发、创建 .pyc 文件，原理很简单，就是利用 Python 的 import 机制。</p><p>在 Python 运行过程中如碰到 import abc 这样的语句，Python 将会在设定好的 path 中寻找 abc.pyc 或 abc.dll 文件。若没有这样的文件，而只是发现了 abc.py 文件，那么，Python 会首先将 abc.py 编译成相应的 PyCodeObject 中间结果，然后再创建 abc.pyc 文件，并将中间结果写入该文件。接下来，Python 才会对 abc.pyc 文件进行一个 import 动作，实际上也就是将 abc.pyc 文件中的 PyCodeObject 重新在内存中复制出来，加以运行。</p><p>由于 Python .pyc 文件的此种运行机制，所以，可随时删除所有中间过程 .pyc 文件，当 Python 再次运行时，还会重生成这些 .pyc 文件，对您所编辑程序的运行并无任何影响。当然，得有源代码才行。</p><p>视窗用 python.exe 运行 .py ，用 pythonw.exe 运行 .pyw。因为安装视窗版 Python 时，扩展名 .py 自动被登记为用 python.exe 运行， 而 .pyw 则被登记为用 pythonw.exe 运行。</p><p>智能编辑重构 批处理式 <strong>数字 Python IDE</strong> 集成开发环境 (集成高效 Cython PyInstaller 批处理小程序)</p><p><a href="http://dt.digitser.cn/zh-CN/ide/idepy/index.html">http://dt.digitser.cn/zh-CN/ide/idepy/index.html</a></p><h2 id="py-文件"><a href="#py-文件" class="headerlink" title=".py 文件"></a><strong>.py 文件</strong></h2><p>以 .py 作扩展名的文件是 Python 源代码文件，由 python.exe 解释，可在控制台下运行。</p><p>当然，也可用文本编辑器或其它专用 Python IDE (集成开发环境) 工具进行修改。</p><h2 id="pyc-文件"><a href="#pyc-文件" class="headerlink" title=".pyc 文件"></a><strong>.pyc 文件</strong></h2><p>以 .pyc 作扩展名的文件是 python 编译文件。.pyc 文件是不能直接用文本编辑器进行编辑，其优点是 .pyc 文件的执行速度要远快于 .py 文件。</p><p>至于为什么要有 .pyc 文件，因为 .py 文件是可直接看到源码的。若是软件开发商，不可能把源码泄漏出去？所以，就需编译成 .pyc 后再发布。</p><p>但 .pyc 文件只是经简单编译，并未加密，因此，有些工具还能反编译它得出源代码。</p><h2 id="pyw-文件"><a href="#pyw-文件" class="headerlink" title=".pyw 文件"></a><strong>.pyw 文件</strong></h2><p>.pyc 文件执行时，桌面会出现类似 CMD 命令的黑色 shell 窗口，十分难看，于是 .pyw 文件就应运而生了。.pyw 文件与 .pyc 文件的执行，本质上并没什么区别，只是 .pyw 文件执行的时候不会出现类似 CMD 命令的黑色 shell 窗口。</p><p>.pyw 文件格式主要是设计用来运行 Python 纯 GUI (图形用户界面) 程序的。纯 GUI (图形用户界面) 程序的用户不需要看到类似 CMD 命令的黑色 shell 控制台窗口。当 .pyw 文件运行时，所有 stdout、stderr 输出无效，所有原 stdin 的读取只会得到 EOF。</p><p>值得一提的是，开发纯 GUI (图形用户界面) 程序时，可暂时把 .pyw 改成 .py，以便运行时调出控制台窗口，看到所有错误信息，方便修改、调试。</p><p>注意：采用 PyQt、PySide 等 GUI (图形用户界面) 开发框架开发的程序，源文件仍可采用 .py，无需单独使用 .pyw。</p><h2 id="pyo-文件"><a href="#pyo-文件" class="headerlink" title=".pyo 文件"></a><strong>.pyo 文件</strong></h2><p>“python -O 源文件” 即可将 Python 源程序编译成 .pyo 文件，但有时仍得采用 .pyc 作后缀，才能正常运行。</p><p>.pyo 文件是相对 .pyc 而言的，优化编译后的 Python 文件。 同样，.pyo 文件也不能直接用文本编辑器进行编辑。</p><p>通过数字 IDE 控制台选项卡集成的 python -O -m compileall -l .&#x2F; 命令能把当前目录下的所有 .py 编译成 .pyo 文件，不带 -l 参数可递归进子目录。</p><h2 id="pyd-文件"><a href="#pyd-文件" class="headerlink" title="pyd 文件"></a><strong>pyd 文件</strong></h2><p>.pyd 文件是由非 Python，其它编程语言编写 (或直接把 .py 文件转换成 .c 中间文件) 编译生成的 Python 扩展模块，是类似 .so .dll 动态链接库的一种 Python 文件。</p><p>每个 .pyd 文件实际上都封装了一个 Python module 模块。使用时，采用 import 路径名.modulename 或 from 路径名.modulename import ** 语言，路径名为 .pyd 文件所在的路径。</p><p>基于 Qt&#x2F;C++ 的 PyQt PySide GUI (图形用户界面) 开发框架绑定，会为每个二次开发胶水代码所对应的 Qt&#x2F;C++ 库 .dll 文件生成一个中间 .pyd 文件。PyWin32 项目分发包中，也存在很多 MicroSoft Windows OS 相应 .dll 文件的中间 .pyd 文件。</p><p>Cython 可将个人基于 Python 语言编写的 Python 模块编译成具有 C 语言特性的 .pyd 文件。</p>]]></content>
    
    
    <categories>
      
      <category>CTF逆向知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓逆向技术详解</title>
    <link href="/2023/04/06/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/04/06/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="安卓逆向技术详解"><a href="#安卓逆向技术详解" class="headerlink" title="安卓逆向技术详解"></a>安卓逆向技术详解</h1><p>安卓逆向技术是一种通过分析和破解应用程序，了解其内部结构和实现方式的技术。它可以用于安全研究、漏洞挖掘、反制侵权行为等多个方面。本文将介绍安卓逆向技术的具体技术和常用工具。</p><h2 id="1-反编译"><a href="#1-反编译" class="headerlink" title="1. 反编译"></a>1. 反编译</h2><p>反编译是安卓逆向技术的基础，它是将编译后的二进制代码重新转换为高级语言的过程。对于安卓应用程序，我们可以使用一些工具将其反编译成Java源代码，然后进行分析和修改。</p><p>常用的反编译工具有apktool、dex2jar、jadx等。这些工具可以将应用程序的.dex文件反编译成Java源代码，方便我们进行分析和修改。</p><h2 id="2-动态调试"><a href="#2-动态调试" class="headerlink" title="2. 动态调试"></a>2. 动态调试</h2><p>动态调试是指在程序运行时，通过监视和修改进程的行为，来理解程序的执行过程和内部结构。在安卓逆向中，我们可以使用动态调试技术来分析应用程序的代码逻辑、变量值、函数调用等信息。</p><p>常用的动态调试工具有Frida、Xposed等。这些工具可以在安卓系统中注入自己的代码，从而拦截应用程序的函数调用，并可以在运行时对其进行修改或添加新的行为。</p><h2 id="3-静态分析"><a href="#3-静态分析" class="headerlink" title="3. 静态分析"></a>3. 静态分析</h2><p>静态分析是指在不运行程序的情况下，通过分析应用程序的源代码或二进制代码，来获取程序的内部结构和执行逻辑。在安卓逆向中，静态分析可以帮助我们深入了解应用程序的代码结构和逻辑，发现潜在的漏洞和安全隐患。</p><p>常用的静态分析工具有IDA Pro、Radare2等。这些工具可以反汇编应用程序的二进制代码，分析应用程序的内部结构和执行逻辑，并提供交互式的反汇编和分析功能。</p><h2 id="4-Hook"><a href="#4-Hook" class="headerlink" title="4. Hook"></a>4. Hook</h2><p>Hook技术是一种在运行时修改应用程序行为的技术，它可以用于对应用程序的函数进行拦截、劫持和重定向。在安卓逆向中，我们可以使用Hook技术来拦截应用程序的函数调用，并改变其返回值或修改其参数值，从而影响应用程序的执行行为。</p><p>常用的Hook工具有Xposed、Substrate等。这些工具可以在运行时对应用程序进行Hook，拦截函数调用并修改其返回值或参数值，从而达到修改应用程序行为的目的。</p><h2 id="5-密码破解"><a href="#5-密码破解" class="headerlink" title="5. 密码破解"></a>5. 密码破解</h2><p>密码破解是指通过一些手段，尝试猜解或破解应用程序中保存的密码，以获取更高的权限或敏感信息。在安卓逆向中，我们可以使用密码破解技术来猜解应用程序中保存的加密密钥或密码，从而获取更多的信息和权限。</p><p>常用的密码破解工具有John the Ripper、Hashcat等。这些工具可以使用字典攻击、暴力破解、彩虹表等方法，尝试猜解应用程序中保存的加密密钥或密码，从而获取更多的信息和权限。</p><h2 id="6-模拟器检测"><a href="#6-模拟器检测" class="headerlink" title="6. 模拟器检测"></a>6. 模拟器检测</h2><p>模拟器检测是指应用程序中使用一些技术手段，判断当前运行环境是否为模拟器环境。在安卓逆向中，我们可以使用模拟器检测技术来绕过应用程序的模拟器检测，使其在模拟器环境下也能正常运行。</p><p>常用的模拟器检测工具有Genymotion、BlueStacks等。这些工具可以模拟安卓系统环境，使我们可以在模拟器环境下运行应用程序，并绕过应用程序的模拟器检测。</p><h2 id="7-反调试"><a href="#7-反调试" class="headerlink" title="7. 反调试"></a>7. 反调试</h2><p>反调试是指应用程序中使用一些技术手段，防止被逆向分析或调试。在安卓逆向中，我们可以使用反调试技术来绕过应用程序的反调试机制，使其在被逆向分析或调试时仍然能够正常运行。</p><p>常用的反调试工具有Frida、Xposed等。这些工具可以在运行时对应用程序进行Hook，绕过其反调试机制，使其在被逆向分析或调试时仍然能够正常运行。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>安卓逆向技术是一项强大的技能，可以帮助我们更深入地了解应用程序的内部结构和执行逻辑。然而，在进行逆向分析时需要遵守法律法规和道德规范，以及保护用户隐私和知识产权。同时，也需要注意应用程序可能使用的加密和混淆技术，选择适当的工具进行破解。</p>]]></content>
    
    
    <categories>
      
      <category>Android逆向知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android 逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓逆向技术</title>
    <link href="/2023/04/06/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/"/>
    <url>/2023/04/06/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="安卓逆向技术"><a href="#安卓逆向技术" class="headerlink" title="安卓逆向技术"></a>安卓逆向技术</h1><p>安卓逆向技术是指通过对安卓应用程序进行分析和反编译，了解其内部结构和实现方式的技术。安卓逆向技术可以帮助安全研究人员发现安全漏洞，也可以帮助开发人员理解其他应用程序的实现方式。在本文中，我们将介绍安卓逆向技术的基本原理和常用工具。</p><h2 id="1-基本原理"><a href="#1-基本原理" class="headerlink" title="1. 基本原理"></a>1. 基本原理</h2><p>安卓应用程序是使用Java编写的，最终被编译为.dex文件。.dex文件是Dalvik虚拟机的可执行文件格式，Dalvik虚拟机是安卓系统中的一个虚拟机，用于运行安卓应用程序。因此，如果要进行安卓逆向，就需要先将.dex文件反编译为Java源代码。反编译后的Java源代码可以很容易地被阅读和理解。</p><h2 id="2-常用工具"><a href="#2-常用工具" class="headerlink" title="2. 常用工具"></a>2. 常用工具</h2><h3 id="a-apktool"><a href="#a-apktool" class="headerlink" title="a. apktool"></a>a. apktool</h3><p>apktool是一款反编译安卓应用程序的工具。它可以将安卓应用程序的.apk文件解包为.dex文件、资源文件和其他文件，然后将.dex文件反编译为Java源代码。使用apktool，可以查看应用程序的源代码、资源文件和配置文件等。</p><h3 id="b-jadx"><a href="#b-jadx" class="headerlink" title="b. jadx"></a>b. jadx</h3><p>jadx是一款开源的Java反编译器，可以将.dex文件反编译为Java源代码。jadx可以在Windows、Linux和macOS上运行，可以查看应用程序的源代码、类、方法等信息。jadx还提供了搜索、导出和调试等功能，方便进行更深入的逆向分析。</p><h3 id="c-IDA-Pro"><a href="#c-IDA-Pro" class="headerlink" title="c. IDA Pro"></a>c. IDA Pro</h3><p>IDA Pro是一款强大的反汇编工具，可以用于分析和修改二进制文件。IDA Pro可以将.dex文件反汇编为汇编代码，还可以反编译为C语言代码。使用IDA Pro，可以分析应用程序的内存分配、函数调用、程序流程等信息。</p><h2 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3. 注意事项"></a>3. 注意事项</h2><p>在进行安卓逆向时，需要注意以下事项：</p><ul><li>尊重知识产权：反编译他人应用程序可能会侵犯知识产权，因此在进行逆向分析时需要遵守法律法规，尊重知识产权。</li><li>保护隐私：安卓应用程序中可能包含用户隐私信息，因此在进行逆向分析时需要注意保护用户隐私。</li><li>可能会遇到加密和混淆：开发人员可能会使用加密和混淆技术来保护应用程序，因此在进行逆向分析时需要了解这些技术，并使用相应的工具进行破解。</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>安卓逆向技术是一项强大的技能，可以帮助安全研究人员识别和修复应用程序中的安全漏洞，也可以帮助开发人员理解其他应用程序的实现方式。然而，需要注意的是，在进行逆向分析时，需要遵守法律法规，尊重知识产权和保护用户隐私。</p><p>此外，需要了解开发人员可能使用的加密和混淆技术，并使用相应的工具进行破解。常用的安卓逆向工具包括apktool、jadx和IDA Pro等。</p><p>总之，安卓逆向技术是一项强大的技能，可以帮助我们更好地理解和掌握安卓应用程序的内部实现方式。但是，在进行逆向分析时需要注意法律法规和道德规范，以及保护用户隐私和知识产权。</p>]]></content>
    
    
    <categories>
      
      <category>Android逆向知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android 逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Art题解</title>
    <link href="/2023/04/04/Art%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/04/04/Art%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="moectf-Art-writeup"><a href="#moectf-Art-writeup" class="headerlink" title="moectf Art writeup"></a>moectf Art writeup</h1><p>首先将题目所给的exe文件拖入EXEInofope中查看发现有一个UPX壳，</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202304041235736.png" alt="image-20220829210908121"></p><p>然后使用UPXshell工具对其进行脱壳，接着将脱壳完成的文件拖入IDAx64中查看找到main函数，按F5进行伪代码分析</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202304041235745.png" alt="image-20220829211102041"></p><p>分析得到主要加密为for ( i &#x3D; 1; i &lt;&#x3D; 27; ++i )<br>    Str1[i - 1] ^&#x3D; (Str1[i - 1] % 17 + Str1[i]) ^ 0x19;</p><p>Str1即为我们要输入的flag</p><p>往下接着看找到Str2，发现将Str1与Str2进行了比较，然后跟进Str2使用shift+e提取十六进制字符得到</p><p>02 18 0F F8 19 04 27 D8 EB 00 35 48 4D 2A 45 6B 59 2E 43 01 18 5C 09 09 09 09 B5 7D</p><p>这船十六进制数为flag经过加密得到的</p><p>下面进行解密：<br>分析flag的开头是moectf</p><p>m的ascll码值为109所以将其设置为第一个数那么第一个数是由下面一个数进行计算得来的，所以后面那一个数为未知数，我们使用循环的方式将其爆破出来我们只需要将式子照抄然后将Str1[i]换为一个循环数字进行爆破代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> Str1[<span class="hljs-number">28</span>]=&#123;<span class="hljs-number">0x02</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x00</span>, <br>  <span class="hljs-number">0x35</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x01</span>, <br>  <span class="hljs-number">0x18</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x7D</span>&#125;;<br>  <span class="hljs-type">int</span> flag[<span class="hljs-number">28</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>  flag[<span class="hljs-number">27</span>]=Str1[<span class="hljs-number">27</span>];<br>  flag[<span class="hljs-number">0</span>]=<span class="hljs-number">109</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">27</span>;i++)<br>  &#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">128</span>;j++)<br>  &#123;<br>  <span class="hljs-type">int</span> a=flag[i<span class="hljs-number">-1</span>]^(flag[i<span class="hljs-number">-1</span>]% <span class="hljs-number">17</span> + j) ^ <span class="hljs-number">25</span>;<br>  <span class="hljs-keyword">if</span>(Str1[i<span class="hljs-number">-1</span>]==a)<br>  &#123;<br>  flag[i]=j;<br>  <span class="hljs-keyword">break</span>;<br>  &#125;<br>&#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">27</span>;i++)<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,flag[i]);<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF逆向题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ezbase题解</title>
    <link href="/2023/04/03/ezbase%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/04/03/ezbase%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="ISCTF-ezbase题解"><a href="#ISCTF-ezbase题解" class="headerlink" title="ISCTF ezbase题解"></a>ISCTF ezbase题解</h1><p>将附件放入exeinfo中，</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202304030909578.png" alt="tmp393F"></p><p>发现是个64位没壳的exe文件</p><p>拖入ida64查看</p><p>找到main函数，F5进行编译，看主逻辑发现是对str2和v7进行异或操作，但是进行了56次操作，看前面所给的str2只有7个数，说明少东西了。</p><p>查看汇编，发现有56个数给str2赋值</p><p>编写脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br><br>&#123;<br><br>  <span class="hljs-type">char</span> v7[<span class="hljs-number">10</span>]=<span class="hljs-string">&quot;bbbbase64&quot;</span>;<br><br>  <span class="hljs-type">int</span> v710[<span class="hljs-number">963</span>]=&#123;<span class="hljs-number">0x37</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xEB</span>, <br><br> <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x62</span>, <br><br> <span class="hljs-number">0x62</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xE9</span>, <br><br> <span class="hljs-number">0x27</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x63</span>, <br><br> <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x2C</span>, <br><br> <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x99</span>, <br><br> <span class="hljs-number">0xEC</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xEC</span>, <br><br> <span class="hljs-number">0x73</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x63</span>, <br><br> <span class="hljs-number">0xBD</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x1D</span>, <br><br> <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xEB</span>, <br><br> <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x26</span>, <br><br> <span class="hljs-number">0x27</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xDA</span>, <br><br> <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEB</span>, <br><br> <span class="hljs-number">0x24</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x37</span>, <br><br> <span class="hljs-number">0x24</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x29</span>, <br><br> <span class="hljs-number">0x04</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xDD</span>, <br><br> <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x58</span>, <br><br> <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x46</span>, <br><br> <span class="hljs-number">0x11</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xDA</span>, <br><br> <span class="hljs-number">0x15</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEB</span>, <br><br> <span class="hljs-number">0x27</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x5B</span>, <br><br> <span class="hljs-number">0x49</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x62</span>, <br><br> <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x95</span>, <br><br> <span class="hljs-number">0x73</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xF8</span>, <br><br> <span class="hljs-number">0x20</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x64</span>, <br><br> <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xF6</span>, <br><br> <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xAC</span>, <br><br> <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xA3</span>, <br><br> <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x9A</span>, <br><br> <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x6D</span>, <br><br> <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x82</span>, <br><br> <span class="hljs-number">0x51</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEC</span>, <br><br> <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x7C</span>, <br><br> <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x85</span>, <br><br> <span class="hljs-number">0x39</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xAE</span>, <br><br> <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x35</span>, <br><br> <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xEA</span>, <br><br> <span class="hljs-number">0x60</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x63</span>, <br><br> <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x62</span>, <br><br> <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xEB</span>, <br><br> <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x63</span>, <br><br> <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x73</span>, <br><br> <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0xEC</span>, <br><br> <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xBB</span>, <br><br> <span class="hljs-number">0x64</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x7C</span>, <br><br> <span class="hljs-number">0x01</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xE9</span>, <br><br> <span class="hljs-number">0x27</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <br><br> <span class="hljs-number">0x27</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xDC</span>, <br><br> <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x2A</span>, <br><br> <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x29</span>, <br><br> <span class="hljs-number">0x72</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xD3</span>, <br><br> <span class="hljs-number">0xED</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x61</span>, <br><br> <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x0F</span>, <br><br> <span class="hljs-number">0x71</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <br><br> <span class="hljs-number">0x92</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x92</span>, <br><br> <span class="hljs-number">0x63</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x7A</span>, <br><br> <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x8B</span>, <br><br> <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x62</span>, <br><br> <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x29</span>, <br><br> <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xB3</span>, <br><br> <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xA4</span>, <br><br> <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x7E</span>, <br><br> <span class="hljs-number">0x35</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x94</span>, <br><br> <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x32</span>, <br><br> <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD4</span>, <br><br> <span class="hljs-number">0x62</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x52</span>, <br><br> <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x32</span>, <br><br> <span class="hljs-number">0x60</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x02</span>, <br><br> <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x36</span>, <br><br> <span class="hljs-number">0x95</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x20</span>, <br><br> <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xC6</span>, <br><br> <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x2C</span>, <br><br> <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x62</span>, <br><br> <span class="hljs-number">0x62</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x62</span>, <br><br> <span class="hljs-number">0x62</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x9C</span>, <br><br> <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x62</span>, <br><br> <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xE8</span>, <br><br> <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x6B</span>, <br><br> <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x60</span>, <br><br> <span class="hljs-number">0x96</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xBB</span>, <br><br> <span class="hljs-number">0x64</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x3B</span>, <br><br> <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x82</span>, <br><br> <span class="hljs-number">0x52</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEF</span>, <br><br> <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x6D</span>, <br><br> <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x82</span>, <br><br> <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xF9</span>, <br><br> <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x72</span>, <br><br> <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xED</span>, <br><br> <span class="hljs-number">0x34</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xC9</span>, <br><br> <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x34</span>, <br><br> <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xEB</span>, <br><br> <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x60</span>, <br><br> <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xA3</span>, <br><br> <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x92</span>, <br><br> <span class="hljs-number">0x29</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x79</span>, <br><br> <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xB7</span>, <br><br> <span class="hljs-number">0x05</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xF7</span>&#125;;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>  i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">962</span>; ++i )<br><br>  v710[i] ^= v7[i % <span class="hljs-number">9</span>];<br><br>  <span class="hljs-type">int</span> Str2[<span class="hljs-number">56</span>]=&#123;<span class="hljs-number">56</span>,<span class="hljs-number">15</span>,<span class="hljs-number">26</span>,<span class="hljs-number">10</span>,<span class="hljs-number">59</span>,<span class="hljs-number">64</span>,<span class="hljs-number">22</span>,<span class="hljs-number">76</span>,<span class="hljs-number">122</span>,<span class="hljs-number">42</span>,<span class="hljs-number">32</span>,<span class="hljs-number">86</span>,<span class="hljs-number">0</span>,<span class="hljs-number">27</span>,<span class="hljs-number">31</span>,<span class="hljs-number">51</span>,<span class="hljs-number">85</span>,<span class="hljs-number">5</span>,<span class="hljs-number">56</span>,<span class="hljs-number">16</span>,<span class="hljs-number">48</span>,<span class="hljs-number">36</span>,<span class="hljs-number">5</span>,<span class="hljs-number">32</span>,<span class="hljs-number">49</span>,<span class="hljs-number">88</span>,<span class="hljs-number">97</span>,<span class="hljs-number">83</span>,<span class="hljs-number">53</span>,<span class="hljs-number">36</span>,<span class="hljs-number">48</span>,<span class="hljs-number">37</span>,<span class="hljs-number">36</span>,<span class="hljs-number">35</span>,<span class="hljs-number">82</span>,<span class="hljs-number">5</span>,<span class="hljs-number">54</span>,<span class="hljs-number">42</span>,<span class="hljs-number">39</span>,<span class="hljs-number">24</span>,<span class="hljs-number">48</span>,<span class="hljs-number">31</span>,<span class="hljs-number">35</span>,<span class="hljs-number">112</span>,<span class="hljs-number">86</span>,<span class="hljs-number">54</span>,<span class="hljs-number">36</span>,<span class="hljs-number">16</span>,<span class="hljs-number">6</span>,<span class="hljs-number">82</span>,<span class="hljs-number">3</span>,<span class="hljs-number">19</span>,<span class="hljs-number">80</span>,<span class="hljs-number">101</span>,<span class="hljs-number">95</span>,<span class="hljs-number">95</span>&#125;;<br><br>  <span class="hljs-type">char</span> v5[<span class="hljs-number">45</span>]=<span class="hljs-string">&quot;Lz* V&quot;</span>;<br><br> v5[<span class="hljs-number">6</span>] = <span class="hljs-number">27</span>;<br><br> v5[<span class="hljs-number">7</span>] = <span class="hljs-number">31</span>;<br><br> v5[<span class="hljs-number">8</span>] = <span class="hljs-number">51</span>;<br><br> v5[<span class="hljs-number">9</span>] = <span class="hljs-number">85</span>;<br><br> v5[<span class="hljs-number">10</span>] = <span class="hljs-number">5</span>;<br><br> v5[<span class="hljs-number">11</span>] = <span class="hljs-number">56</span>;<br><br> v5[<span class="hljs-number">12</span>] = <span class="hljs-number">16</span>;<br><br> v5[<span class="hljs-number">13</span>] = <span class="hljs-number">48</span>;<br><br> v5[<span class="hljs-number">14</span>] = <span class="hljs-number">36</span>;<br><br> v5[<span class="hljs-number">15</span>] = <span class="hljs-number">5</span>;<br><br> v5[<span class="hljs-number">16</span>] = <span class="hljs-number">32</span>;<br><br> v5[<span class="hljs-number">17</span>] = <span class="hljs-number">49</span>;<br><br> v5[<span class="hljs-number">18</span>] = <span class="hljs-number">88</span>;<br><br> v5[<span class="hljs-number">19</span>] = <span class="hljs-number">97</span>;<br><br> v5[<span class="hljs-number">20</span>] = <span class="hljs-number">83</span>;<br><br> v5[<span class="hljs-number">21</span>] = <span class="hljs-number">53</span>;<br><br> v5[<span class="hljs-number">22</span>] = <span class="hljs-number">36</span>;<br><br> v5[<span class="hljs-number">23</span>] = <span class="hljs-number">48</span>;<br><br> v5[<span class="hljs-number">24</span>] = <span class="hljs-number">37</span>;<br><br> v5[<span class="hljs-number">25</span>] = <span class="hljs-number">36</span>;<br><br> v5[<span class="hljs-number">26</span>] = <span class="hljs-number">35</span>;<br><br> v5[<span class="hljs-number">27</span>] = <span class="hljs-number">82</span>;<br><br> v5[<span class="hljs-number">28</span>] = <span class="hljs-number">5</span>;<br><br> v5[<span class="hljs-number">29</span>] = <span class="hljs-number">54</span>;<br><br> v5[<span class="hljs-number">30</span>] = <span class="hljs-number">42</span>;<br><br> v5[<span class="hljs-number">31</span>] = <span class="hljs-number">39</span>;<br><br> v5[<span class="hljs-number">32</span>] = <span class="hljs-number">24</span>;<br><br> v5[<span class="hljs-number">33</span>] = <span class="hljs-number">48</span>;<br><br> v5[<span class="hljs-number">34</span>] = <span class="hljs-number">31</span>;<br><br> v5[<span class="hljs-number">35</span>] = <span class="hljs-number">35</span>;<br><br> v5[<span class="hljs-number">36</span>] = <span class="hljs-number">112</span>;<br><br> v5[<span class="hljs-number">37</span>] = <span class="hljs-number">86</span>;<br><br> v5[<span class="hljs-number">38</span>] = <span class="hljs-number">54</span>;<br><br> v5[<span class="hljs-number">39</span>] = <span class="hljs-number">36</span>;<br><br> v5[<span class="hljs-number">40</span>] = <span class="hljs-number">16</span>;<br><br> v5[<span class="hljs-number">41</span>] = <span class="hljs-number">6</span>;<br><br> v5[<span class="hljs-number">42</span>] = <span class="hljs-number">82</span>;<br><br> v5[<span class="hljs-number">43</span>] = <span class="hljs-number">3</span>;<br><br> v5[<span class="hljs-number">44</span>] = <span class="hljs-number">19</span>;<br><br> <span class="hljs-type">char</span> v6[<span class="hljs-number">5</span>]=<span class="hljs-string">&quot;Pe__&quot;</span>;<br><br> <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">55</span>; ++j )<br><br> &#123;<br><br>  Str2[j] ^= v7[j % <span class="hljs-number">9</span>];<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,Str2[j]);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF逆向题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDA代码段</title>
    <link href="/2023/04/02/IDA%E4%BB%A3%E7%A0%81%E6%AE%B5/"/>
    <url>/2023/04/02/IDA%E4%BB%A3%E7%A0%81%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="IDA代码段"><a href="#IDA代码段" class="headerlink" title="IDA代码段"></a>IDA代码段</h1><h2 id="text段"><a href="#text段" class="headerlink" title="text段"></a>text段</h2><p>该段位程序代码，在该段一开始就可以看到</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202304022146679.png" alt="image-20220923192707143"></p><p>这里的段类型和权限说的很清楚：分别分为代码段和可读可执行。需要注意的是，borland这里叫做code而不是text</p><h2 id="idata、rdata、data段"><a href="#idata、rdata、data段" class="headerlink" title="idata、rdata、data段"></a>idata、rdata、data段</h2><p>三个段全为存放特殊数据的段，但IDA根据PE文件的格式将数据段中不同的数据分。</p><h3 id="1-idata段"><a href="#1-idata段" class="headerlink" title="1.idata段"></a>1.idata段</h3><p>该段在一开始一般有类似下面说明：</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202304022146682.png" alt="image-20220923194413503"></p><p>明显是一个imports函数的代码段，这里集中所有外部函数地址，代码中会先跳到该地址后再执行，PE文件加载器在开始会获取真实的函数地址来修idata中的函数地址。</p><p>与之对应的exports是edata，表面上看PE文件对该段的定位是特殊数据段。</p><h3 id="2-rdata段"><a href="#2-rdata段" class="headerlink" title="2.rdata段"></a>2.rdata段</h3><p>名字上看是源数据段，程序用到什么资源都在这里，资源包括自己封包的，也包括开发工具自动封包的。</p><h3 id="3-data段"><a href="#3-data段" class="headerlink" title="3.data段"></a>3.data段</h3><p>这个段存放程序的全局数据、全局变量等</p>]]></content>
    
    
    <categories>
      
      <category>CTF逆向知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sp分析异常</title>
    <link href="/2023/04/02/sp%E5%88%86%E6%9E%90%E5%BC%82%E5%B8%B8/"/>
    <url>/2023/04/02/sp%E5%88%86%E6%9E%90%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="IDA-sp-分析异常"><a href="#IDA-sp-分析异常" class="headerlink" title="IDA sp 分析异常"></a>IDA sp 分析异常</h1><p>有些时候使用ida静态分析，函数结尾或者开头出现 endp ; sp-analysis failed会导致F5调不出伪代码</p><p>出现sp分析异常的原因为堆栈不平衡</p><p>一般是程序代码有一些干扰代码，让IDA的反汇编分析出现错误。比如用push + n条指令 + retn来实际跳转，而IDA会以为retn是函数要结束，结果它分析后发现调用栈不平衡，因此就提示sp analysis failed.</p><p>其中return one_function(a,b)这条语句，在某些新的编译器，可能会编译成这样的指令序列：</p><p>mov esp, ebp<br>pop ebp<br>jmp one_funcion</p><p>而IDA是通过retn指令来识别函数的结束的，因为它不知道这里的意思，会把它当成一个函数内部 的跳转，最后就会出现sp analysis failed了。</p><p>问：有没有什么办法可以让IDA正确分析,因为函数非常长,需要伪代码来减少分析时间？<br>答：用alt-k调整sp来解决。</p><p>问：如何用ALT+K 调整SP 要输入什么值呢?<br>答：并没有一个固定值,针对每一条指令执行完后,看看栈是否正常,如果不对,则通过ALT + K来修改.重点检查虚函数的调用, 如call [esi + n] , 这里不一定非得是esi,以及跳转前后的栈是否一致.另外还需要通过ALT + P 来确认下变量起始地址,清除个数与保存个数是否正常.</p><p>1）用Option-&gt;General-&gt;Disassembly, 将选项Stack pointer打勾；<br>2）仔细观察每条call sub_xxxxxx前后的堆栈指针是否平衡；<br>3）有时还要看被调用的sub_xxxxxx内部的堆栈情况，主要是看入栈的参数与ret xx是否匹配；<br>4）注意观察jmp指令前后的堆栈是否有变化；<br>5）有时用Edit-&gt;Functions-&gt;Edit function…,然后点击OK，(按D再按C键)刷一下函数定义。</p>]]></content>
    
    
    <categories>
      
      <category>CTF逆向知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
