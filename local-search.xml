<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>java修饰符</title>
    <link href="/2023/07/11/java%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <url>/2023/07/11/java%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="java修饰符"><a href="#java修饰符" class="headerlink" title="java修饰符"></a>java修饰符</h1><h2 id="java修饰符的分类"><a href="#java修饰符的分类" class="headerlink" title="java修饰符的分类"></a>java修饰符的分类</h2><h3 id="访问权限修饰符"><a href="#访问权限修饰符" class="headerlink" title="访问权限修饰符"></a>访问权限修饰符</h3><ul><li>default（即默认，什么都不写）：在同一包内可见，不用任何修饰符。使用对象：类、接口、变量、方法。</li><li>private：在同一类内可见。使用对象：变量、方法。注意：不能修饰类（外部类）</li><li>public：对所有类可见。使用对象：类、接口、变量、方法。</li><li>protected：对同一包内的类和所有子类可见。使用对象：变量、方法。注意：不能修饰类（外部类）。</li></ul><p>public &gt; protected &gt; default &gt; private</p><p>我们可以通过以下表来说明访问权限：</p><table><thead><tr><th align="left">修饰符</th><th align="left">当前类</th><th align="left">同一包内</th><th align="left">子孙类(同一包)</th><th align="left">子孙类(不同包)</th><th align="left">其他包</th></tr></thead><tbody><tr><td align="left"><code>public</code></td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td></tr><tr><td align="left"><code>protected</code></td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y&#x2F;N（<a href="https://www.runoob.com/java/java-modifier-types.html#protected-desc">说明</a>）</td><td align="left">N</td></tr><tr><td align="left"><code>default</code></td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">N</td><td align="left">N</td></tr><tr><td align="left"><code>private</code></td><td align="left">Y</td><td align="left">N</td><td align="left">N</td><td align="left">N</td><td align="left">N</td></tr></tbody></table><h3 id="非访问权限修饰符"><a href="#非访问权限修饰符" class="headerlink" title="非访问权限修饰符"></a>非访问权限修饰符</h3><ol><li>static修饰符：用来创建类方法和类变量。</li><li>final修饰符：用来修饰类、方法和变量，final修饰的类不能被继承，修饰的方法不能被继承重新定义，修饰的变量为常量，是不可修改的。</li><li>abstract修饰符：用来创建抽象类和抽象方法。</li><li>synchronizaed：用于多线程的同步</li><li>volatile：修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且当成员变量发生变化时，会强制线程将变化值写回到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</li><li>transient：序列化的对象包含被transient修饰的实例变量时，java虚拟机（JVM）跳过特定的变量。</li></ol><h2 id="修饰符的使用"><a href="#修饰符的使用" class="headerlink" title="修饰符的使用"></a>修饰符的使用</h2><h3 id="类修饰符"><a href="#类修饰符" class="headerlink" title="类修饰符"></a>类修饰符</h3><h4 id="外部类修饰符"><a href="#外部类修饰符" class="headerlink" title="外部类修饰符"></a>外部类修饰符</h4><ol><li>public（访问控制符）：将一个类声明为公共类，他可以被任何对象访问，一个程序的主类必须时公开类。</li><li>default（访问控制符）：类只对包内可见，包外不可见。</li><li>abstract（非访问控制符）：将一个类声明为抽象类，抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充，抽象类可以包含抽象方法和非抽方法。</li><li>final（非访问控制符）：将一个类声明为最终（即非继承类），表示它不能被其他类继承。</li></ol><p>注意：</p><ol><li>protected 个private 不能修饰外部类，是因为外部类放在包中，只有两种可能，包可见和包不可见。</li><li>final 和abstract 不能同时修饰外部类，是因为该类要么被继承要么不被继承，二者只能选其一。</li><li>不能用static修饰，因为类加载后才会加载静态成员变量。所以不能用static修饰类和接口，因为类还没加载，无法使用static关键字。</li></ol><h4 id="内部修饰符"><a href="#内部修饰符" class="headerlink" title="内部修饰符"></a>内部修饰符</h4><p>内部类与成员变量地位一直一样，所以可以public、protected、default和private，同时还可以用static修饰，表示嵌套内部类，不用实例化外部类，即可调用。</p><h3 id="方法修饰符"><a href="#方法修饰符" class="headerlink" title="方法修饰符"></a>方法修饰符</h3><ol><li>public类（公共控制符）：包内包外都可以调用该方法。</li><li>protected（保护访问控制符）：指定该方法可以被他的类和子类访问。</li><li>default（默认权限）：指定此方法只对同包可见，对不同包（含不同包的子类）不可加。</li><li>private（私有控制符）：指定此方法只能自己类等方法访问，其他的类不能访问（包括子类），控制的非常严格。</li><li>final：指定方法已完备，不能再进行继承扩充。</li><li>static：指定不需要实例化就可以激活的一个方法，即在内存中只有一份，通过类名即可调用。</li><li>synchronize：同步修饰符，在多个线程中，该修饰符用于运行前，对它所属的方法加锁，以防止其他线程的访问，运行结束后解锁。</li><li>native：本机修饰符。指定此方法的方法体是用其他语言在程序外部编写的。</li><li>abstract：抽象方法是一种没有实现的方法，该方法的具体实现由子类提供。抽象方法不能被声明为final和static。任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。抽象方法的声明以分号结尾，例如：<code>public abstract sample();</code> 。</li></ol><h3 id="变量修饰符"><a href="#变量修饰符" class="headerlink" title="变量修饰符"></a>变量修饰符</h3><h4 id="成员变量修饰符"><a href="#成员变量修饰符" class="headerlink" title="成员变量修饰符"></a>成员变量修饰符</h4><ol><li>public （公共访问控制符）：指定该变量为公共的，它可以被任何抽象对象的方法访问。</li><li>protected（保护访问控制符）：指定该变量可以被自己的类和子类访问，在子类中方可以覆盖此变量。</li><li>default（默认权限）：指定该变量只对同包可见，对不同包（包含不同包的子类）不可见。</li><li>private（私有访问控制符）：指定该变量只允许自己的类的方法访问，其他任何类（包括子类）中的方法均不能访问。</li><li>final：最终修饰符，指定此变量的值不能变。</li><li>static（静态修饰符）：指定变量被所有对象共享，即所有实例都可以使用变量。变量属于这个类。</li><li>transient（过渡修饰符）：指定该变量是系统保留，暂无特别作用的临时性变量。不持久化。</li><li>volatile（易失修饰符）：指定该变量可以同时被几个线程控制和修改，保证两个不同的线程总是看到某个成员变量的同一个值。</li></ol><p>final和static经常一起使用来创建变量</p><h4 id="局部变量修饰符"><a href="#局部变量修饰符" class="headerlink" title="局部变量修饰符"></a>局部变量修饰符</h4><p>只能使用final修饰局部变量</p><ol><li>为什么不能赋予权限修饰符？</li></ol><p>因为局部变量的生命周期为一个方法的调用期间，所以没必要为其设置权限访问字段，既然可以访问到这个方法，所以也就没有必要再为其方法被变量赋予访问权限，因为该变量在方法调用期间已经被加载进了虚拟栈，换句话说就是肯定能被当前线程访问到，所以设置没意义。</p><p> 2.为什么不能用static修饰</p><p>我们都知道静态变量在方法之前先加载，所以如果在方法内设置静态变量，可想而知，方法都还没加载，没法加载成功方法内的静态变量。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="接口修饰符"><a href="#接口修饰符" class="headerlink" title="接口修饰符"></a>接口修饰符</h4><ol><li>接口修饰符只能用public、default和abstract，不能用final、static修饰。</li><li>接口默认修饰为abstract。</li></ol><h4 id="接口中方法修饰符"><a href="#接口中方法修饰符" class="headerlink" title="接口中方法修饰符"></a>接口中方法修饰符</h4><p>只能用public abstract修饰，当然如果什么都不写，默认就是public abstract。</p><p>注意：在Java1.8之后，接口允许定义static静态方法了！也就是说可以用static来修饰。</p>]]></content>
    
    
    <categories>
      
      <category>Android逆向知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android 逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器汇编语言</title>
    <link href="/2023/04/07/%E6%9C%BA%E5%99%A8%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    <url>/2023/04/07/%E6%9C%BA%E5%99%A8%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="机器汇编语言知识点"><a href="#机器汇编语言知识点" class="headerlink" title="机器汇编语言知识点"></a>机器汇编语言知识点</h1><p>机器汇编语言是一种可以被计算机硬件直接识别和执行的低级编程语言。它使用类似英语的助记符来表示不同的指令和操作码，使程序员能够更容易地编写底层系统软件和设备驱动程序。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>指令：机器汇编语言的最基本单位，用于告诉计算机执行什么样的操作。</li><li>操作码（Opcode）：指令的第一个字段，用于表示执行的操作类型。</li><li>操作数（Operand）：指令的其他字段，用于表示操作的操作数和地址。</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>机器汇编语言的数据类型包括：</p><ul><li>字节（Byte）：8位数据类型。</li><li>字（Word）：16位数据类型。</li><li>双字（Double word）：32位数据类型。</li><li>四字（Quad word）：64位数据类型。</li></ul><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>机器汇编语言使用寄存器来暂存数据和地址，常见的寄存器包括：</p><ul><li>通用寄存器（General purpose register）：用于存储临时数据和变量。</li><li>程序计数器（Program counter）：用于存储下一条指令的地址。</li><li>栈指针寄存器（Stack pointer register）：用于存储栈顶指针。</li><li>基址指针寄存器（Base pointer register）：用于存储堆栈基地址。</li><li>标志寄存器（Flags register）：用于存储操作结果的状态标志。</li></ul><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>机器汇编语言的指令包括：</p><ul><li>数据传送指令：用于将数据从一个位置传送到另一个位置。</li><li>算术运算指令：用于执行加减乘除等算术运算。</li><li>逻辑运算指令：用于执行逻辑运算，如与、或、非等。</li><li>控制指令：用于控制程序的执行流程，如跳转、循环等。</li><li>输入输出指令：用于从外部设备读取数据或将数据输出到外部设备。</li><li>特权指令：用于访问系统资源和执行特权操作。</li></ul><h2 id="常见的机器汇编语言"><a href="#常见的机器汇编语言" class="headerlink" title="常见的机器汇编语言"></a>常见的机器汇编语言</h2><p>常见的机器汇编语言包括：</p><ul><li>x86汇编语言：用于PC和Intel兼容计算机。</li><li>ARM汇编语言：用于移动设备和嵌入式系统。</li><li>MIPS汇编语言：用于嵌入式系统和路由器等网络设备。</li><li>PowerPC汇编语言：用于IBM PowerPC架构的计算机。</li></ul><h2 id="编写机器汇编语言程序的步骤"><a href="#编写机器汇编语言程序的步骤" class="headerlink" title="编写机器汇编语言程序的步骤"></a>编写机器汇编语言程序的步骤</h2><p>编写机器汇编语言程序的基本步骤包括：</p><ol><li>确定程序的功能和需求。</li><li>选择合适的指令序列，根据需求选择合适的寄存器和操作数。</li><li>编写指令序列，使用助记符和操作数编写汇编代码。</li><li>使用汇编器将汇编代码转换为机器码。</li><li>链接目标文件，将多个目标文件组合成一个可执行文件。</li><li>在目标计算机上运行可执行文件。</li></ol><h2 id="机器汇编语言的应用领域"><a href="#机器汇编语言的应用领域" class="headerlink" title="机器汇编语言的应用领域"></a>机器汇编语言的应用领域</h2><p>机器汇编语言通常用于编写系统软件和设备驱动程序，以及需要极高性能和优化的应用程序。一些应用领域包括：</p><ul><li>操作系统：操作系统内核通常使用机器汇编语言编写，以实现更高的性能和更好的控制。</li><li>设备驱动程序：一些硬件设备需要使用特定的机器汇编语言来访问和控制。</li><li>嵌入式系统：嵌入式系统通常需要使用机器汇编语言来最大限度地优化性能和减小体积。</li><li>加密和解密程序：一些安全领域的应用需要使用机器汇编语言来实现高效的加密和解密算法。</li><li>游戏和图形程序：游戏和图形程序通常需要使用机器汇编语言来实现高效的图形渲染和物理模拟。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>机器汇编语言虽然比高级语言更难学习和编写，但是在某些应用领域具有非常重要的作用。了解机器汇编语言的基本概念、数据类型、寄存器和指令，以及编写机器汇编语言程序的基本步骤，可以帮助程序员更好地理解计算机系统的底层实现，提高程序的性能和效率。</p>]]></content>
    
    
    <categories>
      
      <category>汇编语言知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编知识点汇总</title>
    <link href="/2023/04/07/%E6%B1%87%E7%BC%96%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <url>/2023/04/07/%E6%B1%87%E7%BC%96%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="汇编语言概述"><a href="#汇编语言概述" class="headerlink" title="汇编语言概述"></a>汇编语言概述</h2><p>汇编语言是一种低级计算机语言，它将机器语言的指令用易于理解和书写的文本形式表示。在计算机执行程序时，汇编语言需要被汇编器转换为机器语言才能被计算机识别和执行。</p><p>汇编语言通常包含一系列指令，这些指令直接对应着计算机硬件中的操作，如加法、乘法、移位等。汇编语言还包含各种寄存器和内存操作，用于管理和控制程序运行时的数据和状态。</p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>在汇编语言中，寄存器是用于存储数据和控制程序流程的重要组成部分。常见的寄存器包括：</p><ul><li><p><code>AX</code>、<code>BX</code>、<code>CX</code>、<code>DX</code>：通用寄存器，用于存储任意数据。</p></li><li><p><code>SP</code>：栈指针寄存器，用于管理程序栈。</p></li><li><p><code>BP</code>：基址指针寄存器，用于存储变量的基址。</p></li><li><p><code>SI</code>、<code>DI</code>：源变址寄存器和目的变址寄存器，用于内存数据传输。</p></li><li><p><code>IP</code>：指令指针寄存器，用于存储下一条指令的地址。</p></li><li><p><code>FLAGS</code>：标志寄存器，用于存储程序状态的各种标志位。</p></li></ul><h2 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h2><p>为了方便对内存的管理和保护，x86架构引入了段寄存器的概念。每个段寄存器都对应着一个内存段，其中存储着程序或数据的一部分。</p><p>常见的段寄存器包括：</p><ul><li><code>CS</code>：代码段寄存器，存储着程序代码。</li><li><code>DS</code>：数据段寄存器，存储着程序数据。</li><li><code>ES</code>：附加段寄存器，通常用于存储一些额外的数据。</li><li><code>SS</code>：栈段寄存器，存储着程序栈。</li></ul><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>汇编语言中的指令是直接对应着计算机硬件的操作，它们通常包含一个操作码和一个或多个操作数。常见的指令包括：</p><ul><li><code>MOV</code>：将一个值从一个位置复制到另一个位置。</li><li><code>ADD</code>、<code>SUB</code>、<code>MUL</code>、<code>DIV</code>：加法、减法、乘法、除法操作。</li><li><code>INC</code>、<code>DEC</code>：递增、递减操作。</li><li><code>AND</code>、<code>OR</code>、<code>XOR</code>：逻辑与、逻辑或、逻辑异或操作。</li><li><code>CMP</code>：比较两个值的大小关系。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>以下是一个简单的汇编程序，它将两个数相加并输出结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">SECTION .data ; 数据段<br>    num1 DW <span class="hljs-number">10</span> ; 定义一个<span class="hljs-number">16</span>位整型变量，值为<span class="hljs-number">10</span><br>    num2 DW <span class="hljs-number">20</span> ; 定义一个<span class="hljs-number">16</span>位整型变量，值为<span class="hljs-number">20</span><br>    <span class="hljs-keyword">result</span> DW ? ; 定义一个<span class="hljs-number">16</span>位整型变量，用于存储结果<br><br>SECTION .text ; 代码段<br>    <span class="hljs-keyword">global</span> _start ; 程序入口<br><br>_start:<br>    mov ax, [num1] ; 将num1的值加载到ax寄存器中<br>    <span class="hljs-keyword">add</span> ax, [num2] ; 将num2的值加到ax寄存器中<br>    mov [<span class="hljs-keyword">result</span>], ax ; 将结果保存到<span class="hljs-keyword">result</span>变量中<br><br>    ; 输出结果<br>    mov ah, <span class="hljs-number">0x09</span> ; 设置打印字符串的功能码<br>    mov dx, <span class="hljs-keyword">result</span> ; 将<span class="hljs-keyword">result</span>的地址加载到dx寄存器中<br>    <span class="hljs-type">int</span> <span class="hljs-number">0x21</span> ; 调用BIOS中断，输出结果<br><br>    mov ah, <span class="hljs-number">0x4c</span> ; 设置程序结束的功能码<br>    <span class="hljs-type">int</span> <span class="hljs-number">0x21</span> ; 调用BIOS中断，结束程序<br><br></code></pre></td></tr></table></figure><p>以上程序中，<code>SECTION .data</code> 定义了程序的数据段，<code>SECTION .text</code> 定义了程序的代码段。程序首先将 <code>num1</code> 和 <code>num2</code> 两个变量的值相加，并将结果保存到 <code>result</code> 变量中。接着，程序调用BIOS中断0x21，使用功能码0x09打印输出 <code>result</code>变量的值，然后调用BIOS中断0x21，使用功能码0x4c结束程序。</p><h2 id="编译和运行汇编程序"><a href="#编译和运行汇编程序" class="headerlink" title="编译和运行汇编程序"></a>编译和运行汇编程序</h2><p>在 Windows 平台上，常用的汇编器是 MASM 和 NASM。在 Linux 平台上，常用的汇编器是 GAS（GNU Assembler）。</p><p>以下是使用 NASM 编译和运行上述示例代码的步骤：</p><ol><li>安装 NASM。<ul><li>在 Windows 上，可以从官方网站 <a href="https://www.nasm.us/">https://www.nasm.us/</a> 下载安装包，并按照提示安装即可。</li><li>在 Linux 上，可以使用包管理器安装 NASM，例如在 Ubuntu 上可以使用以下命令安装：<code>sudo apt-get install nasm</code></li></ul></li><li>创建一个名为 <code>example.asm</code> 的文件，并将示例代码复制进去。</li><li>执行以下命令编译代码：<code>nasm -f elf64 example.asm</code>。该命令将汇编代码转换为 ELF 格式的目标文件。</li><li>执行以下命令链接目标文件并生成可执行文件：<code>ld -s -o example example.o</code>。该命令将目标文件链接为可执行文件，并将生成的可执行文件命名为 <code>example</code>。</li><li>执行以下命令运行可执行文件：<code>./example</code>。该命令将执行汇编程序，并输出结果。</li></ol><p>注意：以上步骤是在 Linux 环境下进行的，如果在 Windows 环境下进行，需要将第3步和第4步中的 <code>elf64</code> 替换为相应的目标平台格式，例如 <code>win32</code> 或 <code>win64</code>。</p><h2 id="汇编语言的应用"><a href="#汇编语言的应用" class="headerlink" title="汇编语言的应用"></a>汇编语言的应用</h2><p>汇编语言是一种低级语言，与高级语言相比，它更加接近计算机硬件的底层。因此，使用汇编语言编写的程序可以更加高效地利用计算机的硬件资源，具有更快的执行速度和更小的程序体积。</p><p>汇编语言广泛应用于以下领域：</p><h3 id="操作系统开发"><a href="#操作系统开发" class="headerlink" title="操作系统开发"></a>操作系统开发</h3><p>操作系统是计算机系统的核心软件，负责管理计算机的硬件和软件资源，并为其他应用程序提供服务。操作系统通常需要直接访问计算机的硬件资源，因此需要使用汇编语言编写底层驱动程序和操作系统内核。</p><p>例如，Windows 操作系统中的许多底层驱动程序和操作系统内核都是使用汇编语言编写的。</p><h3 id="嵌入式系统开发"><a href="#嵌入式系统开发" class="headerlink" title="嵌入式系统开发"></a>嵌入式系统开发</h3><p>嵌入式系统是一种专用计算机系统，通常集成在其他设备中，如家用电器、汽车、医疗设备等。由于嵌入式系统的计算资源和存储资源通常较为有限，因此需要使用汇编语言编写程序，以获得更高的执行效率和更小的程序体积。</p><h3 id="游戏开发"><a href="#游戏开发" class="headerlink" title="游戏开发"></a>游戏开发</h3><p>游戏是计算机应用程序的一种重要类型，游戏开发者通常需要使用汇编语言编写一些底层代码，以实现游戏引擎和特效等功能。使用汇编语言编写的游戏程序通常具有更高的性能和更好的游戏体验。</p><h3 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h3><p>逆向工程是一种分析和理解已有程序的技术，通常用于破解软件、恶意软件分析等领域。逆向工程师需要使用汇编语言来分析和理解程序的底层实现原理，以便于破解和修改程序。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>汇编语言是计算机科学领域中一门重要的编程语言，虽然已经被高级语言所取代，但它仍然具有重要的意义。学习汇编语言可以帮助我们更好地理解计算机底层的工作原理，并提高编程技能和程序效率。</p><p>如果您对汇编语言感兴趣，可以深入学习，掌握汇编语言的更多知识和技能，以便于在逆向工程、系统开发、嵌入式系统开发等领域发挥更大的作用。</p>]]></content>
    
    
    <categories>
      
      <category>汇编语言知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c/c++语言基础</title>
    <link href="/2023/04/07/c-c-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/04/07/c-c-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="C-x2F-C-语言基础"><a href="#C-x2F-C-语言基础" class="headerlink" title="C&#x2F;C++语言基础"></a>C&#x2F;C++语言基础</h1><h2 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h2><p>1字&#x3D;2字节(1 word &#x3D; 2 byte)<br>1字节&#x3D;8位(1 byte &#x3D; 8bit)</p><h3 id="各数据类型大小"><a href="#各数据类型大小" class="headerlink" title="各数据类型大小"></a>各数据类型大小</h3><p>int的内存大小是4 个byte；</p><p>long 的内存大小是4 个byte；</p><p>float 的内存大小是4 个byte；</p><p>double 的内存大小是8 个byte；</p><p>char 的内存大小是1 个byte。</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="有符号指令"><a href="#有符号指令" class="headerlink" title="有符号指令"></a>有符号指令</h3><p>IDIV：带符号除法指令</p><p>IMUL：带符号乘法指令</p><p>SAL：算术左移指令（保留符号）</p><p>SAR：算数右移指令（保留符号）</p><p>MOVSX：带符号扩展传送指令</p><p>JL：当小于时跳转指令</p><p>JIE：当小于或者等于时跳转指令</p><p>JG：当大于时跳转指令</p><h3 id="无符号指令"><a href="#无符号指令" class="headerlink" title="无符号指令"></a>无符号指令</h3><p>DIV：除法指令</p><p>MUL：乘法指令</p><p>SHL：逻辑左移指令</p><p>SHR：逻辑右移指令</p><p>MOVZX：无符号扩展传送指令</p><p>JB：当小于时跳转指令</p><p>JBE：当小于或等于时跳转指令</p><p>JA：当大于时跳转指令</p><p>JAE：当大于或等于时跳转指令</p><h3 id="32位整数数据类型"><a href="#32位整数数据类型" class="headerlink" title="32位整数数据类型"></a>32位整数数据类型</h3><p>int [# of bits]_t</p><p>. int8_t,int16_t,int32_t</p><p>uint [# of bits]_t</p><p>.uint8_t,uint16_t,uint32_t</p><h2 id="格式化输出函数"><a href="#格式化输出函数" class="headerlink" title="格式化输出函数"></a>格式化输出函数</h2><p>fprintf（） 按照格式字符串的内容将输出写入流中·三个参数为流、格式字<br>符串和变参列表。<br>printf(） 等同于 fprintf（），但是它假定输出流为 stdout<br>sprintf（） 等同于 fprintf（），但是输出不是写入流而是写入数组·在写<br>入的字符串末尾必须添加一个空字符。<br>snprintf（）等同于sprintf（），但是它指定了可写入字符的最大值size·<br>当size大于零时，输出字符超过第size-1的部分会被舍奔而不会写入数组中，在写入数组的字符串末尾会添加一个空字符。<br>dprintf（）等同于fprintf（），但是它输出不是流而是一个文件描述符fd。<br>vfprintf(） 丶 vprintf(）  vsprintfC） 、vsnprintf(） vdprintf<br>（）分别与上面的函数对应，只是它们将变参列表换成了 va_list 类型的参<br>数。</p>]]></content>
    
    
    <categories>
      
      <category>c/c++语言基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c/c++语言基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编</title>
    <link href="/2023/04/07/%E6%B1%87%E7%BC%96/"/>
    <url>/2023/04/07/%E6%B1%87%E7%BC%96/</url>
    
    <content type="html"><![CDATA[<h1 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h1><h2 id="字节-bit"><a href="#字节-bit" class="headerlink" title="字节(bit)"></a>字节(bit)</h2><p>1 byte&#x3D;8bit</p><p>1word&#x3D;2byte&#x3D;16bit</p><p>1char&#x3D; 1byte&#x3D;8bit</p><p>1short&#x3D;2byte&#x3D;16bit</p><p>1int&#x3D;4byte&#x3D;32bit</p><p>1float&#x3D;4byte&#x3D;32bit</p><p>1double&#x3D;8byte&#x3D;64bit</p><p>1long&#x3D;8byte&#x3D;64bit</p><h2 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h2><p>没有总线，cpu，内存，输入输出设备之间就无法沟通</p><p>简言之，总线是用来通信的</p><p>总线分为地址总线，数据总线和控制总线</p><p><em><strong>串行和并行</strong></em></p><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>预编译-&gt;编译-&gt;汇编-&gt;链接</p><p>gcc -E xxx.c -o xxx.i</p><p>gcc -s xxx.i -o xxx.s</p><p>gcc -c xxx.s -o xxx.o</p><p>gcc -static xxx.o -o xxx</p><h2 id="X86寄存器"><a href="#X86寄存器" class="headerlink" title="X86寄存器"></a>X86寄存器</h2><h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><p>八个通用寄存器用于储存操作数、运算结果和指针</p><p>al（低八位） ah（高八位） ax（高低八位的组合十六位） eax（三十二位） rax（六十四位） 用处比较多，比如存储返回值</p><p>bx                       常在寻址是存储基地址</p><p>dx                        被用来存放整数除法产生的余数</p><p>cx                        常用于控制循环次数</p><p>di si                         在变址寻址时会使用</p><p>bp                           指向当前栈的底部</p><p>sp                            指向当前栈的顶部、</p><p>EAX：操作数和结果数据的累加器</p><p>EBX：指向DS段中数据的指针</p><p>ECX：用于字符串和循环操作的计数器</p><p>EDX：I&#x2F;O指针</p><p>ESI：指向由DS寄存器指向的段中的数据的指针；字符串操作的源指针</p><p>EDI：指向由ES寄存器指向的段中的数据（或目标地址）的指针；字符串操作的目标指针</p><p>ESP：栈指针（位于SS段）</p><p>EBP：指向栈上数据的指针（位于SS段）</p><h3 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h3><p>段寄存器用于保存16位的段寄存器。是一种特殊的指针，用于确定内存中某个段的位置。</p><p>代码段    cs:ip</p><p>数据段   ds</p><p>栈段   ss</p><p>额外段   es</p><p>64位下的：FS、GS</p><p>不同系统用处不同，在windows下，GS用于管理线程特定的内存</p><p>linux中，GS用于访问cpu特定的内存</p><p>FS和GS的另一个用处 canary的保护</p><h3 id="寄存器——标志寄存器"><a href="#寄存器——标志寄存器" class="headerlink" title="寄存器——标志寄存器"></a>寄存器——标志寄存器</h3><h4 id="eflags寄存器"><a href="#eflags寄存器" class="headerlink" title="eflags寄存器"></a>eflags寄存器</h4><p>OF    overflow flag    溢出标志    溢出标志OF用于反映有符号数加减运算所得结果是否溢出。<br>DF    direction flag    方向标志    控制串指令(MOVS,CMPS).DF&#x3D;1,ESl,EDI自动递减（从高地址向低地址方向处理字符串），DF&#x3D;O,ESL,EDI自动递增<br>IF interrupt enable flag     屏蔽中断标志<br>TF      trap flag      单步调试标志设置后执行一条指令就会被中断<br>SF    signal flag      符号标志正负标志位，它记录相关指令执行后，结果是否为负<br>ZF     zero flag     零标志     它记录相关指令执行后，结果是否为0；如果结为0,zf&#x3D;1，如果结果不为0,zf&#x3D;0<br>AF     auxiliary carry flag    辅助进位标志     运算过程中看最后四位，不论长度为多少。最后四位向前有进位或者借位，AF&#x3D;1,否则AF&#x3D;0;<br>PF     parity flag      奇偶标志        运算结果中“1”的个数的奇偶性，偶数个1,PF&#x3D;1,反之为0.<br>CF     carry f1ag进位标志      如果运算结果的最高位产生了一个进位或借位，其值为1，否则为0。</p><h4 id="EIP寄存器"><a href="#EIP寄存器" class="headerlink" title="EIP寄存器"></a>EIP寄存器</h4><p>包含一个32位的指针，指向下一条被执行的指令</p><h2 id="指令——运算指令"><a href="#指令——运算指令" class="headerlink" title="指令——运算指令"></a>指令——运算指令</h2><p>加 add    add ax,bx</p><p>减 sub    sub ax,bx</p><p>乘 mul    mul ax,bx</p><p>除 div    div ax,bx 商存在ax，余存在bx</p><p>与 and and ax,bx </p><p>或 or    or ax,bx</p><p>非 not  not ecx</p><p>异或 xor xor eax,eax</p><p>左移 shl 逻辑左移</p><p>右移 shr 逻辑右移</p><p>逻辑左移时，最高位丢失，最低位补0；</p><p>逻辑右移时，最高位补0，最低位丢失；</p><p>算术左移时，依次左移一位，尾部补0，最高的符号位保持不变。</p><p>算术右移时，依次右移一位，尾部丢失，符号位右移后，原位置上复制一个符号位；</p><p>循环左移时，将最高位重新放置最低位</p><p>循环右移时，将最低位重新放置最高位</p><p>lea eax,[ebx+8]就是将ebx+8这个值直接赋给eax，而不是把ebx+8处的内存地址里的数据赋给eax。</p><p>而mov指令则恰恰相反，例如：</p><p>mov eax,[ebx+8]则是把内存地址为ebx+8处的数据赋给eax。</p><h2 id="指令——赋值指令"><a href="#指令——赋值指令" class="headerlink" title="指令——赋值指令"></a>指令——赋值指令</h2><p>寄存器寻址           立即数寻址           基址变址寻址</p><p>mov ax,0x10        mov ax,ox18       mov [bx+di],ax</p><p>mov dx,ox9                                        add [bx+si],ax</p><p>mul dx</p><h2 id="指令——栈相关指令"><a href="#指令——栈相关指令" class="headerlink" title="指令——栈相关指令"></a>指令——栈相关指令</h2><p>push 压栈</p><p>pop 弹栈</p><p>Pushfd 把eflags寄存器的内容压入栈</p><p>Popfd 把栈上的内容弹出赋值给eflags寄存器</p><p>Pusha 按照AX、CX、DX、BX、SP（执行PUSHA之前的值）、BP、SI和DI的顺序，将所有16位通用寄存器压入堆栈。</p><p>Popa 按照相反顺序将同样的寄存器弹出栈</p><h2 id="指令——跳转指令"><a href="#指令——跳转指令" class="headerlink" title="指令——跳转指令"></a>指令——跳转指令</h2><p>cmp 指令 cmp 目的操作数，源操作数   目的操作数-源操作数</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202304071447999.png" alt="image-20220921201731155"></p><h2 id="指令——调用函数"><a href="#指令——调用函数" class="headerlink" title="指令——调用函数"></a>指令——调用函数</h2><p>call</p><p>ret</p><p>ip&#x3D;ss*16+sp</p><p>sp&#x3D;sp+2</p><p>ip&#x3D;ss*16+sp</p><p>sp&#x3D;sp+2</p><p>cs&#x3D;ss*16+sp</p><p>sp&#x3D;sp+2</p>]]></content>
    
    
    <categories>
      
      <category>汇编语言知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>exe文件反编译为py文件</title>
    <link href="/2023/04/07/exe%E6%96%87%E4%BB%B6%E5%8F%8D%E7%BC%96%E8%AF%91%E4%B8%BApy%E6%96%87%E4%BB%B6/"/>
    <url>/2023/04/07/exe%E6%96%87%E4%BB%B6%E5%8F%8D%E7%BC%96%E8%AF%91%E4%B8%BApy%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="典型exe文件反编译为py文件"><a href="#典型exe文件反编译为py文件" class="headerlink" title="典型exe文件反编译为py文件"></a>典型exe文件反编译为py文件</h1><p>拿到附件发现是一个exe文件但是根据题目提示这应该是一个py文件，所以我们需要将该exe文件反编译为py文件进行解题。</p><h2 id="解题步骤为：exe文件-gt-pyc文件-gt-py文件"><a href="#解题步骤为：exe文件-gt-pyc文件-gt-py文件" class="headerlink" title="解题步骤为：exe文件-&gt;pyc文件-&gt;py文件"></a>解题步骤为：exe文件-&gt;pyc文件-&gt;py文件</h2><h3 id="exe文件-gt-pyc文件"><a href="#exe文件-gt-pyc文件" class="headerlink" title="exe文件-&gt;pyc文件"></a>exe文件-&gt;pyc文件</h3><p>首先将exe文件复制到python-exe-unpacker-master的文件目录中，然后在该目录中打开命令提示符，</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202304071446918.png" alt="image-20221020142451980">输入命令pyinstxtractor.py ＋文件名，接着会输出一个文件夹（ 文件名称_extracted），进入该文件夹下拉找到与文件名称相同的文件和一个名为struct的文件，放入010editor中分析。</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202304071446930.png" alt="image-20221020142822575"></p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202304071446937.png" alt="image-20221020142836181"></p><p>发现两个文件文件头不同的是struct文件在E3前多了一些十六进制数字，然后新建十六进制文件，先将多出来的十六进制数复制过去再将原文件全部复制过去，重命名为pyc文件</p><h3 id="pyc文件-gt-py文件"><a href="#pyc文件-gt-py文件" class="headerlink" title="pyc文件-&gt;py文件"></a>pyc文件-&gt;py文件</h3><p>使用反编译工具uncompyle6 </p><p>在命令提示符中使用命令 uncompyle6 -o 文件名.py 文件名.pyc</p>]]></content>
    
    
    <categories>
      
      <category>CTF逆向知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加密算法</title>
    <link href="/2023/04/07/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <url>/2023/04/07/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h1><h2 id="shi1加密"><a href="#shi1加密" class="headerlink" title="shi1加密"></a>shi1加密</h2><p>【密码学】SHA-1加密原理及其Java实现_remo0x的博客-CSDN博客_sha1加密算法原理](<a href="https://blog.csdn.net/White_Idiot/article/details/70136461">https://blog.csdn.net/White_Idiot/article/details/70136461</a>)</p><h2 id="TEA算法"><a href="#TEA算法" class="headerlink" title="TEA算法"></a>TEA算法</h2><p>#define DELTA 0x9e3779b9</p><p>void tea_encrypt(unsigned int* v, unsigned int* key) {<br>  unsigned int l &#x3D; v[0], r &#x3D; v[1], sum &#x3D; 0;<br>  for (size_t i &#x3D; 0; i &lt; 32; i++) { &#x2F;&#x2F;进行32次迭代加密，Tea算法作者的建议迭代次数<br>    l +&#x3D; (((r &lt;&lt; 4) ^ (r &gt;&gt; 5)) + r) ^ (sum + key[sum &amp; 3]);<br>    sum +&#x3D; DELTA; &#x2F;&#x2F;累加Delta的值<br>    r +&#x3D; (((l &lt;&lt; 4) ^ (l &gt;&gt; 5)) + l) ^ (sum + key[(sum &gt;&gt; 11) &amp; 3]); &#x2F;&#x2F;利用多次双位移和异或将明文与密钥扩散混乱，并将两个明文互相加密<br>  }<br>  v[0] &#x3D; l;<br>  v[1] &#x3D; r;<br>}</p><p>&#x2F;&#x2F;利用可逆性将加密过程逆转<br>void tea_decrypt(unsigned int* v, unsigned int* key) {<br>  unsigned int l &#x3D; v[0], r &#x3D; v[1], sum &#x3D; 0;<br>  sum &#x3D; DELTA * 32; &#x2F;&#x2F;32次迭代累加后delta的值<br>  for (size_t i &#x3D; 0; i &lt; 32; i++) {<br>    r -&#x3D; (((l &lt;&lt; 4) ^ (l &gt;&gt; 5)) + l) ^ (sum + key[(sum &gt;&gt; 11) &amp; 3]);<br>    sum -&#x3D; DELTA;<br>    l -&#x3D; (((r &lt;&lt; 4) ^ (r &gt;&gt; 5)) + r) ^ (sum + key[sum &amp; 3]);<br>  }<br>  v[0] &#x3D; l;<br>  v[1] &#x3D; r;<br>}</p><p>测试：</p><p>int main(int argc, char const *argv[])<br>{<br>    unsigned int v[2]&#x3D;{123,456},key[4]&#x3D;{0x11,0x22,0x33,0x44};<br>    printf(“%u,%u\n”,v[0],v[1]);<br>    tea_encrypt(v,key);<br>    printf(“%u,%u\n”,v[0],v[1]);<br>    tea_decrypt(v,key);<br>    printf(“%u,%u\n”,v[0],v[1]);<br>    return 0;<br>}</p><p><a href="https://www.cnblogs.com/iBinary/p/13844861.html">TEA算法解析 - iBinary - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF逆向算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python常见文件格式</title>
    <link href="/2023/04/07/python%E5%B8%B8%E8%A7%81%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/"/>
    <url>/2023/04/07/python%E5%B8%B8%E8%A7%81%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-常见文件格式-py-pyc-pyw-pyo-pyd-之间的主要区别"><a href="#Python-常见文件格式-py-pyc-pyw-pyo-pyd-之间的主要区别" class="headerlink" title="Python 常见文件格式 .py .pyc .pyw .pyo .pyd 之间的主要区别"></a><strong>Python 常见文件格式 .py .pyc .pyw .pyo .pyd 之间的主要区别</strong></h1><p>Python是一种面向对象、解释型计算机程序设计语言。Python 语法简洁、清晰，具有丰富和强大的类库。</p><p>Python 提供了一种中间编译结果保存机制，即 byte code，或更准确地说，保存 PyCodeObject。事实上，Python 确实提供了这样一种机制 —— .pyc 文件。在执行一个 .py 文件的源代码之后，Python 并不会自动生成与该 .py 文件对应的 .pyc 文件。Python 会根据需要自动触发、创建 .pyc 文件，原理很简单，就是利用 Python 的 import 机制。</p><p>在 Python 运行过程中如碰到 import abc 这样的语句，Python 将会在设定好的 path 中寻找 abc.pyc 或 abc.dll 文件。若没有这样的文件，而只是发现了 abc.py 文件，那么，Python 会首先将 abc.py 编译成相应的 PyCodeObject 中间结果，然后再创建 abc.pyc 文件，并将中间结果写入该文件。接下来，Python 才会对 abc.pyc 文件进行一个 import 动作，实际上也就是将 abc.pyc 文件中的 PyCodeObject 重新在内存中复制出来，加以运行。</p><p>由于 Python .pyc 文件的此种运行机制，所以，可随时删除所有中间过程 .pyc 文件，当 Python 再次运行时，还会重生成这些 .pyc 文件，对您所编辑程序的运行并无任何影响。当然，得有源代码才行。</p><p>视窗用 python.exe 运行 .py ，用 pythonw.exe 运行 .pyw。因为安装视窗版 Python 时，扩展名 .py 自动被登记为用 python.exe 运行， 而 .pyw 则被登记为用 pythonw.exe 运行。</p><p>智能编辑重构 批处理式 <strong>数字 Python IDE</strong> 集成开发环境 (集成高效 Cython PyInstaller 批处理小程序)</p><p><a href="http://dt.digitser.cn/zh-CN/ide/idepy/index.html">http://dt.digitser.cn/zh-CN/ide/idepy/index.html</a></p><h2 id="py-文件"><a href="#py-文件" class="headerlink" title=".py 文件"></a><strong>.py 文件</strong></h2><p>以 .py 作扩展名的文件是 Python 源代码文件，由 python.exe 解释，可在控制台下运行。</p><p>当然，也可用文本编辑器或其它专用 Python IDE (集成开发环境) 工具进行修改。</p><h2 id="pyc-文件"><a href="#pyc-文件" class="headerlink" title=".pyc 文件"></a><strong>.pyc 文件</strong></h2><p>以 .pyc 作扩展名的文件是 python 编译文件。.pyc 文件是不能直接用文本编辑器进行编辑，其优点是 .pyc 文件的执行速度要远快于 .py 文件。</p><p>至于为什么要有 .pyc 文件，因为 .py 文件是可直接看到源码的。若是软件开发商，不可能把源码泄漏出去？所以，就需编译成 .pyc 后再发布。</p><p>但 .pyc 文件只是经简单编译，并未加密，因此，有些工具还能反编译它得出源代码。</p><h2 id="pyw-文件"><a href="#pyw-文件" class="headerlink" title=".pyw 文件"></a><strong>.pyw 文件</strong></h2><p>.pyc 文件执行时，桌面会出现类似 CMD 命令的黑色 shell 窗口，十分难看，于是 .pyw 文件就应运而生了。.pyw 文件与 .pyc 文件的执行，本质上并没什么区别，只是 .pyw 文件执行的时候不会出现类似 CMD 命令的黑色 shell 窗口。</p><p>.pyw 文件格式主要是设计用来运行 Python 纯 GUI (图形用户界面) 程序的。纯 GUI (图形用户界面) 程序的用户不需要看到类似 CMD 命令的黑色 shell 控制台窗口。当 .pyw 文件运行时，所有 stdout、stderr 输出无效，所有原 stdin 的读取只会得到 EOF。</p><p>值得一提的是，开发纯 GUI (图形用户界面) 程序时，可暂时把 .pyw 改成 .py，以便运行时调出控制台窗口，看到所有错误信息，方便修改、调试。</p><p>注意：采用 PyQt、PySide 等 GUI (图形用户界面) 开发框架开发的程序，源文件仍可采用 .py，无需单独使用 .pyw。</p><h2 id="pyo-文件"><a href="#pyo-文件" class="headerlink" title=".pyo 文件"></a><strong>.pyo 文件</strong></h2><p>“python -O 源文件” 即可将 Python 源程序编译成 .pyo 文件，但有时仍得采用 .pyc 作后缀，才能正常运行。</p><p>.pyo 文件是相对 .pyc 而言的，优化编译后的 Python 文件。 同样，.pyo 文件也不能直接用文本编辑器进行编辑。</p><p>通过数字 IDE 控制台选项卡集成的 python -O -m compileall -l .&#x2F; 命令能把当前目录下的所有 .py 编译成 .pyo 文件，不带 -l 参数可递归进子目录。</p><h2 id="pyd-文件"><a href="#pyd-文件" class="headerlink" title="pyd 文件"></a><strong>pyd 文件</strong></h2><p>.pyd 文件是由非 Python，其它编程语言编写 (或直接把 .py 文件转换成 .c 中间文件) 编译生成的 Python 扩展模块，是类似 .so .dll 动态链接库的一种 Python 文件。</p><p>每个 .pyd 文件实际上都封装了一个 Python module 模块。使用时，采用 import 路径名.modulename 或 from 路径名.modulename import ** 语言，路径名为 .pyd 文件所在的路径。</p><p>基于 Qt&#x2F;C++ 的 PyQt PySide GUI (图形用户界面) 开发框架绑定，会为每个二次开发胶水代码所对应的 Qt&#x2F;C++ 库 .dll 文件生成一个中间 .pyd 文件。PyWin32 项目分发包中，也存在很多 MicroSoft Windows OS 相应 .dll 文件的中间 .pyd 文件。</p><p>Cython 可将个人基于 Python 语言编写的 Python 模块编译成具有 C 语言特性的 .pyd 文件。</p>]]></content>
    
    
    <categories>
      
      <category>CTF逆向知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓逆向技术详解</title>
    <link href="/2023/04/06/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/04/06/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="安卓逆向技术详解"><a href="#安卓逆向技术详解" class="headerlink" title="安卓逆向技术详解"></a>安卓逆向技术详解</h1><p>安卓逆向技术是一种通过分析和破解应用程序，了解其内部结构和实现方式的技术。它可以用于安全研究、漏洞挖掘、反制侵权行为等多个方面。本文将介绍安卓逆向技术的具体技术和常用工具。</p><h2 id="1-反编译"><a href="#1-反编译" class="headerlink" title="1. 反编译"></a>1. 反编译</h2><p>反编译是安卓逆向技术的基础，它是将编译后的二进制代码重新转换为高级语言的过程。对于安卓应用程序，我们可以使用一些工具将其反编译成Java源代码，然后进行分析和修改。</p><p>常用的反编译工具有apktool、dex2jar、jadx等。这些工具可以将应用程序的.dex文件反编译成Java源代码，方便我们进行分析和修改。</p><h2 id="2-动态调试"><a href="#2-动态调试" class="headerlink" title="2. 动态调试"></a>2. 动态调试</h2><p>动态调试是指在程序运行时，通过监视和修改进程的行为，来理解程序的执行过程和内部结构。在安卓逆向中，我们可以使用动态调试技术来分析应用程序的代码逻辑、变量值、函数调用等信息。</p><p>常用的动态调试工具有Frida、Xposed等。这些工具可以在安卓系统中注入自己的代码，从而拦截应用程序的函数调用，并可以在运行时对其进行修改或添加新的行为。</p><h2 id="3-静态分析"><a href="#3-静态分析" class="headerlink" title="3. 静态分析"></a>3. 静态分析</h2><p>静态分析是指在不运行程序的情况下，通过分析应用程序的源代码或二进制代码，来获取程序的内部结构和执行逻辑。在安卓逆向中，静态分析可以帮助我们深入了解应用程序的代码结构和逻辑，发现潜在的漏洞和安全隐患。</p><p>常用的静态分析工具有IDA Pro、Radare2等。这些工具可以反汇编应用程序的二进制代码，分析应用程序的内部结构和执行逻辑，并提供交互式的反汇编和分析功能。</p><h2 id="4-Hook"><a href="#4-Hook" class="headerlink" title="4. Hook"></a>4. Hook</h2><p>Hook技术是一种在运行时修改应用程序行为的技术，它可以用于对应用程序的函数进行拦截、劫持和重定向。在安卓逆向中，我们可以使用Hook技术来拦截应用程序的函数调用，并改变其返回值或修改其参数值，从而影响应用程序的执行行为。</p><p>常用的Hook工具有Xposed、Substrate等。这些工具可以在运行时对应用程序进行Hook，拦截函数调用并修改其返回值或参数值，从而达到修改应用程序行为的目的。</p><h2 id="5-密码破解"><a href="#5-密码破解" class="headerlink" title="5. 密码破解"></a>5. 密码破解</h2><p>密码破解是指通过一些手段，尝试猜解或破解应用程序中保存的密码，以获取更高的权限或敏感信息。在安卓逆向中，我们可以使用密码破解技术来猜解应用程序中保存的加密密钥或密码，从而获取更多的信息和权限。</p><p>常用的密码破解工具有John the Ripper、Hashcat等。这些工具可以使用字典攻击、暴力破解、彩虹表等方法，尝试猜解应用程序中保存的加密密钥或密码，从而获取更多的信息和权限。</p><h2 id="6-模拟器检测"><a href="#6-模拟器检测" class="headerlink" title="6. 模拟器检测"></a>6. 模拟器检测</h2><p>模拟器检测是指应用程序中使用一些技术手段，判断当前运行环境是否为模拟器环境。在安卓逆向中，我们可以使用模拟器检测技术来绕过应用程序的模拟器检测，使其在模拟器环境下也能正常运行。</p><p>常用的模拟器检测工具有Genymotion、BlueStacks等。这些工具可以模拟安卓系统环境，使我们可以在模拟器环境下运行应用程序，并绕过应用程序的模拟器检测。</p><h2 id="7-反调试"><a href="#7-反调试" class="headerlink" title="7. 反调试"></a>7. 反调试</h2><p>反调试是指应用程序中使用一些技术手段，防止被逆向分析或调试。在安卓逆向中，我们可以使用反调试技术来绕过应用程序的反调试机制，使其在被逆向分析或调试时仍然能够正常运行。</p><p>常用的反调试工具有Frida、Xposed等。这些工具可以在运行时对应用程序进行Hook，绕过其反调试机制，使其在被逆向分析或调试时仍然能够正常运行。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>安卓逆向技术是一项强大的技能，可以帮助我们更深入地了解应用程序的内部结构和执行逻辑。然而，在进行逆向分析时需要遵守法律法规和道德规范，以及保护用户隐私和知识产权。同时，也需要注意应用程序可能使用的加密和混淆技术，选择适当的工具进行破解。</p>]]></content>
    
    
    <categories>
      
      <category>Android逆向知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android 逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓逆向技术</title>
    <link href="/2023/04/06/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/"/>
    <url>/2023/04/06/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="安卓逆向技术"><a href="#安卓逆向技术" class="headerlink" title="安卓逆向技术"></a>安卓逆向技术</h1><p>安卓逆向技术是指通过对安卓应用程序进行分析和反编译，了解其内部结构和实现方式的技术。安卓逆向技术可以帮助安全研究人员发现安全漏洞，也可以帮助开发人员理解其他应用程序的实现方式。在本文中，我们将介绍安卓逆向技术的基本原理和常用工具。</p><h2 id="1-基本原理"><a href="#1-基本原理" class="headerlink" title="1. 基本原理"></a>1. 基本原理</h2><p>安卓应用程序是使用Java编写的，最终被编译为.dex文件。.dex文件是Dalvik虚拟机的可执行文件格式，Dalvik虚拟机是安卓系统中的一个虚拟机，用于运行安卓应用程序。因此，如果要进行安卓逆向，就需要先将.dex文件反编译为Java源代码。反编译后的Java源代码可以很容易地被阅读和理解。</p><h2 id="2-常用工具"><a href="#2-常用工具" class="headerlink" title="2. 常用工具"></a>2. 常用工具</h2><h3 id="a-apktool"><a href="#a-apktool" class="headerlink" title="a. apktool"></a>a. apktool</h3><p>apktool是一款反编译安卓应用程序的工具。它可以将安卓应用程序的.apk文件解包为.dex文件、资源文件和其他文件，然后将.dex文件反编译为Java源代码。使用apktool，可以查看应用程序的源代码、资源文件和配置文件等。</p><h3 id="b-jadx"><a href="#b-jadx" class="headerlink" title="b. jadx"></a>b. jadx</h3><p>jadx是一款开源的Java反编译器，可以将.dex文件反编译为Java源代码。jadx可以在Windows、Linux和macOS上运行，可以查看应用程序的源代码、类、方法等信息。jadx还提供了搜索、导出和调试等功能，方便进行更深入的逆向分析。</p><h3 id="c-IDA-Pro"><a href="#c-IDA-Pro" class="headerlink" title="c. IDA Pro"></a>c. IDA Pro</h3><p>IDA Pro是一款强大的反汇编工具，可以用于分析和修改二进制文件。IDA Pro可以将.dex文件反汇编为汇编代码，还可以反编译为C语言代码。使用IDA Pro，可以分析应用程序的内存分配、函数调用、程序流程等信息。</p><h2 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3. 注意事项"></a>3. 注意事项</h2><p>在进行安卓逆向时，需要注意以下事项：</p><ul><li>尊重知识产权：反编译他人应用程序可能会侵犯知识产权，因此在进行逆向分析时需要遵守法律法规，尊重知识产权。</li><li>保护隐私：安卓应用程序中可能包含用户隐私信息，因此在进行逆向分析时需要注意保护用户隐私。</li><li>可能会遇到加密和混淆：开发人员可能会使用加密和混淆技术来保护应用程序，因此在进行逆向分析时需要了解这些技术，并使用相应的工具进行破解。</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>安卓逆向技术是一项强大的技能，可以帮助安全研究人员识别和修复应用程序中的安全漏洞，也可以帮助开发人员理解其他应用程序的实现方式。然而，需要注意的是，在进行逆向分析时，需要遵守法律法规，尊重知识产权和保护用户隐私。</p><p>此外，需要了解开发人员可能使用的加密和混淆技术，并使用相应的工具进行破解。常用的安卓逆向工具包括apktool、jadx和IDA Pro等。</p><p>总之，安卓逆向技术是一项强大的技能，可以帮助我们更好地理解和掌握安卓应用程序的内部实现方式。但是，在进行逆向分析时需要注意法律法规和道德规范，以及保护用户隐私和知识产权。</p>]]></content>
    
    
    <categories>
      
      <category>Android逆向知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android 逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Art题解</title>
    <link href="/2023/04/04/Art%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/04/04/Art%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="moectf-Art-writeup"><a href="#moectf-Art-writeup" class="headerlink" title="moectf Art writeup"></a>moectf Art writeup</h1><p>首先将题目所给的exe文件拖入EXEInofope中查看发现有一个UPX壳，</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202304041235736.png" alt="image-20220829210908121"></p><p>然后使用UPXshell工具对其进行脱壳，接着将脱壳完成的文件拖入IDAx64中查看找到main函数，按F5进行伪代码分析</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202304041235745.png" alt="image-20220829211102041"></p><p>分析得到主要加密为for ( i &#x3D; 1; i &lt;&#x3D; 27; ++i )<br>    Str1[i - 1] ^&#x3D; (Str1[i - 1] % 17 + Str1[i]) ^ 0x19;</p><p>Str1即为我们要输入的flag</p><p>往下接着看找到Str2，发现将Str1与Str2进行了比较，然后跟进Str2使用shift+e提取十六进制字符得到</p><p>02 18 0F F8 19 04 27 D8 EB 00 35 48 4D 2A 45 6B 59 2E 43 01 18 5C 09 09 09 09 B5 7D</p><p>这船十六进制数为flag经过加密得到的</p><p>下面进行解密：<br>分析flag的开头是moectf</p><p>m的ascll码值为109所以将其设置为第一个数那么第一个数是由下面一个数进行计算得来的，所以后面那一个数为未知数，我们使用循环的方式将其爆破出来我们只需要将式子照抄然后将Str1[i]换为一个循环数字进行爆破代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> Str1[<span class="hljs-number">28</span>]=&#123;<span class="hljs-number">0x02</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x00</span>, <br>  <span class="hljs-number">0x35</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x01</span>, <br>  <span class="hljs-number">0x18</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x7D</span>&#125;;<br>  <span class="hljs-type">int</span> flag[<span class="hljs-number">28</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>  flag[<span class="hljs-number">27</span>]=Str1[<span class="hljs-number">27</span>];<br>  flag[<span class="hljs-number">0</span>]=<span class="hljs-number">109</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">27</span>;i++)<br>  &#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">128</span>;j++)<br>  &#123;<br>  <span class="hljs-type">int</span> a=flag[i<span class="hljs-number">-1</span>]^(flag[i<span class="hljs-number">-1</span>]% <span class="hljs-number">17</span> + j) ^ <span class="hljs-number">25</span>;<br>  <span class="hljs-keyword">if</span>(Str1[i<span class="hljs-number">-1</span>]==a)<br>  &#123;<br>  flag[i]=j;<br>  <span class="hljs-keyword">break</span>;<br>  &#125;<br>&#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">27</span>;i++)<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,flag[i]);<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF逆向题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ezbase题解</title>
    <link href="/2023/04/03/ezbase%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/04/03/ezbase%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="ISCTF-ezbase题解"><a href="#ISCTF-ezbase题解" class="headerlink" title="ISCTF ezbase题解"></a>ISCTF ezbase题解</h1><p>将附件放入exeinfo中，</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202304030909578.png" alt="tmp393F"></p><p>发现是个64位没壳的exe文件</p><p>拖入ida64查看</p><p>找到main函数，F5进行编译，看主逻辑发现是对str2和v7进行异或操作，但是进行了56次操作，看前面所给的str2只有7个数，说明少东西了。</p><p>查看汇编，发现有56个数给str2赋值</p><p>编写脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br><br>&#123;<br><br>  <span class="hljs-type">char</span> v7[<span class="hljs-number">10</span>]=<span class="hljs-string">&quot;bbbbase64&quot;</span>;<br><br>  <span class="hljs-type">int</span> v710[<span class="hljs-number">963</span>]=&#123;<span class="hljs-number">0x37</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xEB</span>, <br><br> <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x62</span>, <br><br> <span class="hljs-number">0x62</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xE9</span>, <br><br> <span class="hljs-number">0x27</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x63</span>, <br><br> <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x2C</span>, <br><br> <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x99</span>, <br><br> <span class="hljs-number">0xEC</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xEC</span>, <br><br> <span class="hljs-number">0x73</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x63</span>, <br><br> <span class="hljs-number">0xBD</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x1D</span>, <br><br> <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xEB</span>, <br><br> <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x26</span>, <br><br> <span class="hljs-number">0x27</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xDA</span>, <br><br> <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEB</span>, <br><br> <span class="hljs-number">0x24</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x37</span>, <br><br> <span class="hljs-number">0x24</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x29</span>, <br><br> <span class="hljs-number">0x04</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xDD</span>, <br><br> <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x58</span>, <br><br> <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x46</span>, <br><br> <span class="hljs-number">0x11</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xDA</span>, <br><br> <span class="hljs-number">0x15</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEB</span>, <br><br> <span class="hljs-number">0x27</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x5B</span>, <br><br> <span class="hljs-number">0x49</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x62</span>, <br><br> <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x95</span>, <br><br> <span class="hljs-number">0x73</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xF8</span>, <br><br> <span class="hljs-number">0x20</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x64</span>, <br><br> <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xF6</span>, <br><br> <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xAC</span>, <br><br> <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xA3</span>, <br><br> <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x9A</span>, <br><br> <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x6D</span>, <br><br> <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x82</span>, <br><br> <span class="hljs-number">0x51</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEC</span>, <br><br> <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x7C</span>, <br><br> <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x85</span>, <br><br> <span class="hljs-number">0x39</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xAE</span>, <br><br> <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x35</span>, <br><br> <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xEA</span>, <br><br> <span class="hljs-number">0x60</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x63</span>, <br><br> <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x62</span>, <br><br> <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xEB</span>, <br><br> <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x63</span>, <br><br> <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x73</span>, <br><br> <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0xEC</span>, <br><br> <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xBB</span>, <br><br> <span class="hljs-number">0x64</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x7C</span>, <br><br> <span class="hljs-number">0x01</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xE9</span>, <br><br> <span class="hljs-number">0x27</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <br><br> <span class="hljs-number">0x27</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xDC</span>, <br><br> <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x2A</span>, <br><br> <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x29</span>, <br><br> <span class="hljs-number">0x72</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xD3</span>, <br><br> <span class="hljs-number">0xED</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x61</span>, <br><br> <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x0F</span>, <br><br> <span class="hljs-number">0x71</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <br><br> <span class="hljs-number">0x92</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x92</span>, <br><br> <span class="hljs-number">0x63</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x7A</span>, <br><br> <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x8B</span>, <br><br> <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x62</span>, <br><br> <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x29</span>, <br><br> <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xB3</span>, <br><br> <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xA4</span>, <br><br> <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x7E</span>, <br><br> <span class="hljs-number">0x35</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x94</span>, <br><br> <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x32</span>, <br><br> <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD4</span>, <br><br> <span class="hljs-number">0x62</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x52</span>, <br><br> <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x32</span>, <br><br> <span class="hljs-number">0x60</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x02</span>, <br><br> <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x36</span>, <br><br> <span class="hljs-number">0x95</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x20</span>, <br><br> <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xC6</span>, <br><br> <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x2C</span>, <br><br> <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x62</span>, <br><br> <span class="hljs-number">0x62</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x62</span>, <br><br> <span class="hljs-number">0x62</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x9C</span>, <br><br> <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x62</span>, <br><br> <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xE8</span>, <br><br> <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x6B</span>, <br><br> <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x60</span>, <br><br> <span class="hljs-number">0x96</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xBB</span>, <br><br> <span class="hljs-number">0x64</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x3B</span>, <br><br> <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x82</span>, <br><br> <span class="hljs-number">0x52</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEF</span>, <br><br> <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x6D</span>, <br><br> <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x82</span>, <br><br> <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xF9</span>, <br><br> <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x72</span>, <br><br> <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xED</span>, <br><br> <span class="hljs-number">0x34</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xC9</span>, <br><br> <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x34</span>, <br><br> <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xEB</span>, <br><br> <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x60</span>, <br><br> <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xA3</span>, <br><br> <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x92</span>, <br><br> <span class="hljs-number">0x29</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x79</span>, <br><br> <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xB7</span>, <br><br> <span class="hljs-number">0x05</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xF7</span>&#125;;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>  i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">962</span>; ++i )<br><br>  v710[i] ^= v7[i % <span class="hljs-number">9</span>];<br><br>  <span class="hljs-type">int</span> Str2[<span class="hljs-number">56</span>]=&#123;<span class="hljs-number">56</span>,<span class="hljs-number">15</span>,<span class="hljs-number">26</span>,<span class="hljs-number">10</span>,<span class="hljs-number">59</span>,<span class="hljs-number">64</span>,<span class="hljs-number">22</span>,<span class="hljs-number">76</span>,<span class="hljs-number">122</span>,<span class="hljs-number">42</span>,<span class="hljs-number">32</span>,<span class="hljs-number">86</span>,<span class="hljs-number">0</span>,<span class="hljs-number">27</span>,<span class="hljs-number">31</span>,<span class="hljs-number">51</span>,<span class="hljs-number">85</span>,<span class="hljs-number">5</span>,<span class="hljs-number">56</span>,<span class="hljs-number">16</span>,<span class="hljs-number">48</span>,<span class="hljs-number">36</span>,<span class="hljs-number">5</span>,<span class="hljs-number">32</span>,<span class="hljs-number">49</span>,<span class="hljs-number">88</span>,<span class="hljs-number">97</span>,<span class="hljs-number">83</span>,<span class="hljs-number">53</span>,<span class="hljs-number">36</span>,<span class="hljs-number">48</span>,<span class="hljs-number">37</span>,<span class="hljs-number">36</span>,<span class="hljs-number">35</span>,<span class="hljs-number">82</span>,<span class="hljs-number">5</span>,<span class="hljs-number">54</span>,<span class="hljs-number">42</span>,<span class="hljs-number">39</span>,<span class="hljs-number">24</span>,<span class="hljs-number">48</span>,<span class="hljs-number">31</span>,<span class="hljs-number">35</span>,<span class="hljs-number">112</span>,<span class="hljs-number">86</span>,<span class="hljs-number">54</span>,<span class="hljs-number">36</span>,<span class="hljs-number">16</span>,<span class="hljs-number">6</span>,<span class="hljs-number">82</span>,<span class="hljs-number">3</span>,<span class="hljs-number">19</span>,<span class="hljs-number">80</span>,<span class="hljs-number">101</span>,<span class="hljs-number">95</span>,<span class="hljs-number">95</span>&#125;;<br><br>  <span class="hljs-type">char</span> v5[<span class="hljs-number">45</span>]=<span class="hljs-string">&quot;Lz* V&quot;</span>;<br><br> v5[<span class="hljs-number">6</span>] = <span class="hljs-number">27</span>;<br><br> v5[<span class="hljs-number">7</span>] = <span class="hljs-number">31</span>;<br><br> v5[<span class="hljs-number">8</span>] = <span class="hljs-number">51</span>;<br><br> v5[<span class="hljs-number">9</span>] = <span class="hljs-number">85</span>;<br><br> v5[<span class="hljs-number">10</span>] = <span class="hljs-number">5</span>;<br><br> v5[<span class="hljs-number">11</span>] = <span class="hljs-number">56</span>;<br><br> v5[<span class="hljs-number">12</span>] = <span class="hljs-number">16</span>;<br><br> v5[<span class="hljs-number">13</span>] = <span class="hljs-number">48</span>;<br><br> v5[<span class="hljs-number">14</span>] = <span class="hljs-number">36</span>;<br><br> v5[<span class="hljs-number">15</span>] = <span class="hljs-number">5</span>;<br><br> v5[<span class="hljs-number">16</span>] = <span class="hljs-number">32</span>;<br><br> v5[<span class="hljs-number">17</span>] = <span class="hljs-number">49</span>;<br><br> v5[<span class="hljs-number">18</span>] = <span class="hljs-number">88</span>;<br><br> v5[<span class="hljs-number">19</span>] = <span class="hljs-number">97</span>;<br><br> v5[<span class="hljs-number">20</span>] = <span class="hljs-number">83</span>;<br><br> v5[<span class="hljs-number">21</span>] = <span class="hljs-number">53</span>;<br><br> v5[<span class="hljs-number">22</span>] = <span class="hljs-number">36</span>;<br><br> v5[<span class="hljs-number">23</span>] = <span class="hljs-number">48</span>;<br><br> v5[<span class="hljs-number">24</span>] = <span class="hljs-number">37</span>;<br><br> v5[<span class="hljs-number">25</span>] = <span class="hljs-number">36</span>;<br><br> v5[<span class="hljs-number">26</span>] = <span class="hljs-number">35</span>;<br><br> v5[<span class="hljs-number">27</span>] = <span class="hljs-number">82</span>;<br><br> v5[<span class="hljs-number">28</span>] = <span class="hljs-number">5</span>;<br><br> v5[<span class="hljs-number">29</span>] = <span class="hljs-number">54</span>;<br><br> v5[<span class="hljs-number">30</span>] = <span class="hljs-number">42</span>;<br><br> v5[<span class="hljs-number">31</span>] = <span class="hljs-number">39</span>;<br><br> v5[<span class="hljs-number">32</span>] = <span class="hljs-number">24</span>;<br><br> v5[<span class="hljs-number">33</span>] = <span class="hljs-number">48</span>;<br><br> v5[<span class="hljs-number">34</span>] = <span class="hljs-number">31</span>;<br><br> v5[<span class="hljs-number">35</span>] = <span class="hljs-number">35</span>;<br><br> v5[<span class="hljs-number">36</span>] = <span class="hljs-number">112</span>;<br><br> v5[<span class="hljs-number">37</span>] = <span class="hljs-number">86</span>;<br><br> v5[<span class="hljs-number">38</span>] = <span class="hljs-number">54</span>;<br><br> v5[<span class="hljs-number">39</span>] = <span class="hljs-number">36</span>;<br><br> v5[<span class="hljs-number">40</span>] = <span class="hljs-number">16</span>;<br><br> v5[<span class="hljs-number">41</span>] = <span class="hljs-number">6</span>;<br><br> v5[<span class="hljs-number">42</span>] = <span class="hljs-number">82</span>;<br><br> v5[<span class="hljs-number">43</span>] = <span class="hljs-number">3</span>;<br><br> v5[<span class="hljs-number">44</span>] = <span class="hljs-number">19</span>;<br><br> <span class="hljs-type">char</span> v6[<span class="hljs-number">5</span>]=<span class="hljs-string">&quot;Pe__&quot;</span>;<br><br> <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">55</span>; ++j )<br><br> &#123;<br><br>  Str2[j] ^= v7[j % <span class="hljs-number">9</span>];<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,Str2[j]);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF逆向题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDA代码段</title>
    <link href="/2023/04/02/IDA%E4%BB%A3%E7%A0%81%E6%AE%B5/"/>
    <url>/2023/04/02/IDA%E4%BB%A3%E7%A0%81%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="IDA代码段"><a href="#IDA代码段" class="headerlink" title="IDA代码段"></a>IDA代码段</h1><h2 id="text段"><a href="#text段" class="headerlink" title="text段"></a>text段</h2><p>该段位程序代码，在该段一开始就可以看到</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202304022146679.png" alt="image-20220923192707143"></p><p>这里的段类型和权限说的很清楚：分别分为代码段和可读可执行。需要注意的是，borland这里叫做code而不是text</p><h2 id="idata、rdata、data段"><a href="#idata、rdata、data段" class="headerlink" title="idata、rdata、data段"></a>idata、rdata、data段</h2><p>三个段全为存放特殊数据的段，但IDA根据PE文件的格式将数据段中不同的数据分。</p><h3 id="1-idata段"><a href="#1-idata段" class="headerlink" title="1.idata段"></a>1.idata段</h3><p>该段在一开始一般有类似下面说明：</p><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202304022146682.png" alt="image-20220923194413503"></p><p>明显是一个imports函数的代码段，这里集中所有外部函数地址，代码中会先跳到该地址后再执行，PE文件加载器在开始会获取真实的函数地址来修idata中的函数地址。</p><p>与之对应的exports是edata，表面上看PE文件对该段的定位是特殊数据段。</p><h3 id="2-rdata段"><a href="#2-rdata段" class="headerlink" title="2.rdata段"></a>2.rdata段</h3><p>名字上看是源数据段，程序用到什么资源都在这里，资源包括自己封包的，也包括开发工具自动封包的。</p><h3 id="3-data段"><a href="#3-data段" class="headerlink" title="3.data段"></a>3.data段</h3><p>这个段存放程序的全局数据、全局变量等</p>]]></content>
    
    
    <categories>
      
      <category>CTF逆向知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sp分析异常</title>
    <link href="/2023/04/02/sp%E5%88%86%E6%9E%90%E5%BC%82%E5%B8%B8/"/>
    <url>/2023/04/02/sp%E5%88%86%E6%9E%90%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="IDA-sp-分析异常"><a href="#IDA-sp-分析异常" class="headerlink" title="IDA sp 分析异常"></a>IDA sp 分析异常</h1><p>有些时候使用ida静态分析，函数结尾或者开头出现 endp ; sp-analysis failed会导致F5调不出伪代码</p><p>出现sp分析异常的原因为堆栈不平衡</p><p>一般是程序代码有一些干扰代码，让IDA的反汇编分析出现错误。比如用push + n条指令 + retn来实际跳转，而IDA会以为retn是函数要结束，结果它分析后发现调用栈不平衡，因此就提示sp analysis failed.</p><p>其中return one_function(a,b)这条语句，在某些新的编译器，可能会编译成这样的指令序列：</p><p>mov esp, ebp<br>pop ebp<br>jmp one_funcion</p><p>而IDA是通过retn指令来识别函数的结束的，因为它不知道这里的意思，会把它当成一个函数内部 的跳转，最后就会出现sp analysis failed了。</p><p>问：有没有什么办法可以让IDA正确分析,因为函数非常长,需要伪代码来减少分析时间？<br>答：用alt-k调整sp来解决。</p><p>问：如何用ALT+K 调整SP 要输入什么值呢?<br>答：并没有一个固定值,针对每一条指令执行完后,看看栈是否正常,如果不对,则通过ALT + K来修改.重点检查虚函数的调用, 如call [esi + n] , 这里不一定非得是esi,以及跳转前后的栈是否一致.另外还需要通过ALT + P 来确认下变量起始地址,清除个数与保存个数是否正常.</p><p>1）用Option-&gt;General-&gt;Disassembly, 将选项Stack pointer打勾；<br>2）仔细观察每条call sub_xxxxxx前后的堆栈指针是否平衡；<br>3）有时还要看被调用的sub_xxxxxx内部的堆栈情况，主要是看入栈的参数与ret xx是否匹配；<br>4）注意观察jmp指令前后的堆栈是否有变化；<br>5）有时用Edit-&gt;Functions-&gt;Edit function…,然后点击OK，(按D再按C键)刷一下函数定义。</p>]]></content>
    
    
    <categories>
      
      <category>CTF逆向知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apk文件结构</title>
    <link href="/2023/04/02/Apk%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
    <url>/2023/04/02/Apk%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="APK-文件结构"><a href="#APK-文件结构" class="headerlink" title="APK 文件结构"></a>APK 文件结构</h2><p>apk全程Android Package，相当于一个压缩文件，只要在电脑上将apk后缀改为rar或者zip即可解压</p><h3 id="assets目录-（不一定有，但比较常见）"><a href="#assets目录-（不一定有，但比较常见）" class="headerlink" title="assets目录 （不一定有，但比较常见）"></a>assets目录 （不一定有，但比较常见）</h3><p>存放APK的静态资源文件，比如视频、音频、图片等</p><p>静态资源文件主要指存放在assets 文件夹中的文件。assets 文件夹是一种未经编译的资源目录，它会被打包进 APK 文件中，在安装应用程序之后可以被访问。assets 文件夹中的文件不会被解压缩，这意味着它们的访问速度会比较快，但是会占用更多的安装包空间。通常情况下，开发者会将应用程序中的静态文件、配置文件、原始数据或者其他不常改变的文件放在 assets 文件夹中。这样可以使得应用程序的下载包大小变小，并且可以更快速地访问这些文件。</p><h3 id="lib目录（不一定有，但比较常见）"><a href="#lib目录（不一定有，但比较常见）" class="headerlink" title="lib目录（不一定有，但比较常见）"></a>lib目录（不一定有，但比较常见）</h3><p>armeabi-v7a基本通用所有的安卓设备，arm64-v8a只适用于64位的安卓设备，x86常见于安卓模拟器，其目录下的.so文件时c或者c++编译的动态链接库文件</p><p>库文件主要指lib文件夹中的文件，在这个文件夹中，存放了运行APP所需要的so文件，也就是动态链接库的二进制文件。为了适配不同安卓系统处理器的版本，lib文件夹中的so库也是按不同处理器版本的文件夹分类放置。在图3的示例中，分成了三种文件夹包括armeabi、armeabi-v7a和x86文件夹，分别用来存储适配arm5架构、arm7架构、Intel32架构的CPU处理器版本的安卓系统。例如，如果智能手机使用的是arm7架构CPU处理器版本的安卓系统，APP在运行时就会调用armeabi-v7a文件夹下的动态链接库文件执行程序。</p><p>在安卓系统中库文件分文两种，一种是共享库文件（Shared Libraries），另一种是本地库文件（Native Libraries）。共享库文件是可供多个应用程序使用的库，它们被存放在系统目录中。在 Android 系统中，共享库文件以 .so 为后缀，常见的共享库文件包括 libc.so 和 libm.so。</p><p>而lib文件夹存放的就是本地库文件。本地库是专门为应用程序所使用的库，它们被打包进 APK 文件中，在安装应用程序之后会被放到私有目录中。在 Android 系统中，本地库文件也以 .so 为后缀，armeabi-v7a的so文件示例见图4。对于一个 Android 应用程序来说，本地库文件往往是应用程序所特有的，并且不会被其他应用程序使用。例如，一个应用程序可能使用本地库文件来封装特定的硬件访问功能，或者使用本地库文件来进行加密解密操作。</p><h3 id="META-INF目录"><a href="#META-INF目录" class="headerlink" title="META-INF目录"></a>META-INF目录</h3><p>保存应用的签名信息，签名信息可以验证APK文件的完整性，相当于APK的身份证（验证文件是否又被修改）</p><p>签名文件指的是存放在META-INF文件夹中的文件。META-INF 文件夹是 Android 系统中的一种特殊文件夹，它用来存放应用程序的签名信息。在 META-INF 文件夹中可以找到三种常见的文件：CERT.RSA、CERT.SF和MANIFEST.MF，META-INF文件夹示例见图5。CERT.RSA、CERT.SF这两个文件用来存放应用程序的签名信息。当安装一个应用程序时，Android 系统会检查这两个文件，确保应用程序的完整性和安全性。MANIFEST.MF文件用来存放应用程序的所有文件的清单信息。</p><p>当打包应用程序时，这些文件会自动生成，并且会被打包进 APK 文件中。通常情况下，不需要手动修改这些文件，但是有时候可能需要编辑这些文件来更新应用程序的版本号或者修改权限要求。</p><p>META-INF文件夹，用于存放签名证书，在APK安装时作为校验的凭据，用于保护APK不被恶意篡改，同时也是对APK著作权和所有权的声名。例如，对安装包的任意文件最作修改，导致安卓系统检查计算后的签名信息与APK文件中存储的签名信息不一致，最终无法安装，会出现签名冲突的问题。</p><h3 id="res目录"><a href="#res目录" class="headerlink" title="res目录"></a>res目录</h3><p>res目录存放资源文件，包括图片，字符串等等，APK的脸蛋由他的layout文件设计</p><h3 id="res目录与asstes目录的区别"><a href="#res目录与asstes目录的区别" class="headerlink" title="res目录与asstes目录的区别"></a>res目录与asstes目录的区别</h3><ol><li>assets目录不会在R.java文件下生成相应标记，存放到R.java中的资源在运行打包时都会打入程序安装包中</li><li>res目录会在R.java文件下生成相应的标记。</li></ol><p>在res文件夹下还可以定义一下目录：</p><p>res&#x2F;anim:这里存放的是动画资源</p><p>res&#x2F;xml:可以在Activity中使用getResource().getXML()读取这里的资源文件</p><p>res&#x2F;raw:该目录下的文件可以直接复制到设备上，编译软件时，这里的数据不需要编译，直接加入到程序安装包中，使用的方法是getResource().OpenRawResources(ID),其中参数ID的形式是R.raw.XXX、</p><h3 id="res-x2F-raw和assets的相同点"><a href="#res-x2F-raw和assets的相同点" class="headerlink" title="res&#x2F;raw和assets的相同点"></a>res&#x2F;raw和assets的相同点</h3><p>两者目录下的文件在打包后会原封不动的保存在apk包中，不会被编译成二进制</p><h3 id="res-x2F-raw和assets的不同点"><a href="#res-x2F-raw和assets的不同点" class="headerlink" title="res&#x2F;raw和assets的不同点"></a>res&#x2F;raw和assets的不同点</h3><p>1.res&#x2F;raw中的文件会被映射到R.java文件中，访问的时候直接使用资源ID即R.id.filename;assets文件下的文件不会被映射到R.java中，访问的时候需要AssetManger类。</p><p>2.res&#x2F;raw不可以有目录结构，而assets则可以有目录结构，也就是assets目录下可以再建立文件夹</p><h4 id="读取文件资源："><a href="#读取文件资源：" class="headerlink" title="读取文件资源："></a>读取文件资源：</h4><p> 1.读取res&#x2F;raw下的文件资源，通过以下方式获取输入流来进行写操作<br> · InputStream is &#x3D;getResources().openRawResource(R.id.filename);<br> 2.读取assets下的文件资源，通过以下方式获取输入流来进行写操作<br> · AssetManager am &#x3D; null;<br> · am &#x3D; getAssets();<br> · InputStream is &#x3D; am.open(“filename”);</p><h3 id="AndroidMainfest-xml-文件"><a href="#AndroidMainfest-xml-文件" class="headerlink" title="AndroidMainfest.xml 文件"></a>AndroidMainfest.xml 文件</h3><p>APK的应用清单信息，它描述了应用的名字，版本，权限，引用的库文件等等信息</p><p>xml文件中存放着应用的Activity信息</p><h3 id="classes-dex文件"><a href="#classes-dex文件" class="headerlink" title="classes.dex文件"></a>classes.dex文件</h3><p>classes.dex是java源码编译后生成的java字节码文件，APK运行的主要逻辑，是apk文件的核心代码文件</p><p>核心代码文件主要指classes.dex文件。classes.dex文件是 Android 系统中的重要代码文件，它是 Dalvik 可执行文件的缩写。Dalvik 是 Android 系统中的一种虚拟机，它负责在 Android 系统中运行应用程序的代码。classes.dex文件运行在Dalvik虚拟机上的核心代码文件，它反编译后的语言是smali代码语言，smali代码可转换为java代码。对于大的APK文件会出现多个dex文件，但在APP实际运行的过程中会将多个dex文件合并成一个dex文件运行。APK打包时存放多个dex的原因是每个dex文件的大小是有限制的。</p><p>.dex 文件中存放的是 Java 字节码，这是 Java 编译器编译出来的机器码。.dex 文件本身是一种二进制文件，它使用一种特殊的格式来存放字节码。</p><p>在打包 Android 应用程序时，.dex 文件会自动生成，并且会被打包进 APK 文件中。当你安装应用程序时，.dex 文件会被解压缩并放到私有目录中，然后被 Dalvik 虚拟机加载并运行。</p><p>.dex 文件的好处是，它可以使得应用程序的下载包大小变小，因为 Java 字节码文件可以被压缩得比较小。但是，.dex 文件的缺点是，它的访问速度略慢于共享库文件。因此，在 Android 系统中，一般情况下会尽量使用共享库文件来实现应用程序的功能。</p><h3 id="resources-arsc文件"><a href="#resources-arsc文件" class="headerlink" title="resources.arsc文件"></a>resources.arsc文件</h3><p>resources.arsc是编译后的二进制资源文件，它是一个映射表，映射着资源和id，通过R文件中的id就可以找到对应的资源</p><p>AndroidManifest.xml文件是整个应用程序的信息描述文件，定义了应用程序中包含的Activity,Service,Content provider和BroadcastReceiver组件信息。每个应用程序在根目录下必须包含一个AndroidManifest.xml文件，且文件名不能修改。它描述了package中暴露的组件，他们各自的实现类，各种能被处理的数据和启动位置。</p><table><thead><tr><th>versionCode</th><th>版本号，主要用来更新，例如:12</th></tr></thead><tbody><tr><td>versionName</td><td>版本名，给用户看的，例如:1.2</td></tr><tr><td>package</td><td>包名，例如：com.zj.52pj.demo</td></tr><tr><td>uses-permission android:name&#x3D;””</td><td>应用权限，例如：android.permission.INTERNET 代表网络权限</td></tr><tr><td>android:label&#x3D;”@string&#x2F;app_name”</td><td>应用名称</td></tr><tr><td>android:icon&#x3D;”@mipmap&#x2F;ic_launcher”</td><td>应用图标路径</td></tr><tr><td>android:debuggable&#x3D;”true”</td><td>应用是否开启debug权</td></tr></tbody></table><p><img src="https://picture-1317599851.cos.ap-beijing.myqcloud.com/undefined202304021941251.png" alt="小美"></p>]]></content>
    
    
    <categories>
      
      <category>Android逆向知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android 逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
